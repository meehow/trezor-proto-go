// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: messages-stellar.proto

package trproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// https://github.com/stellar/stellar-core/blob/02d26858069de7c0eefe065056fb0a19bf72ea56/src/xdr/Stellar-ledger-entries.x#L25-L31
type StellarAssetType int32

const (
	StellarAssetType_NATIVE     StellarAssetType = 0
	StellarAssetType_ALPHANUM4  StellarAssetType = 1
	StellarAssetType_ALPHANUM12 StellarAssetType = 2
)

// Enum value maps for StellarAssetType.
var (
	StellarAssetType_name = map[int32]string{
		0: "NATIVE",
		1: "ALPHANUM4",
		2: "ALPHANUM12",
	}
	StellarAssetType_value = map[string]int32{
		"NATIVE":     0,
		"ALPHANUM4":  1,
		"ALPHANUM12": 2,
	}
)

func (x StellarAssetType) Enum() *StellarAssetType {
	p := new(StellarAssetType)
	*p = x
	return p
}

func (x StellarAssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StellarAssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_stellar_proto_enumTypes[0].Descriptor()
}

func (StellarAssetType) Type() protoreflect.EnumType {
	return &file_messages_stellar_proto_enumTypes[0]
}

func (x StellarAssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StellarAssetType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StellarAssetType(num)
	return nil
}

// Deprecated: Use StellarAssetType.Descriptor instead.
func (StellarAssetType) EnumDescriptor() ([]byte, []int) {
	return file_messages_stellar_proto_rawDescGZIP(), []int{0}
}

// https://github.com/stellar/stellar-core/blob/02d26858069de7c0eefe065056fb0a19bf72ea56/src/xdr/Stellar-transaction.x#L506-L513
type StellarSignTx_StellarMemoType int32

const (
	StellarSignTx_NONE   StellarSignTx_StellarMemoType = 0
	StellarSignTx_TEXT   StellarSignTx_StellarMemoType = 1
	StellarSignTx_ID     StellarSignTx_StellarMemoType = 2
	StellarSignTx_HASH   StellarSignTx_StellarMemoType = 3
	StellarSignTx_RETURN StellarSignTx_StellarMemoType = 4
)

// Enum value maps for StellarSignTx_StellarMemoType.
var (
	StellarSignTx_StellarMemoType_name = map[int32]string{
		0: "NONE",
		1: "TEXT",
		2: "ID",
		3: "HASH",
		4: "RETURN",
	}
	StellarSignTx_StellarMemoType_value = map[string]int32{
		"NONE":   0,
		"TEXT":   1,
		"ID":     2,
		"HASH":   3,
		"RETURN": 4,
	}
)

func (x StellarSignTx_StellarMemoType) Enum() *StellarSignTx_StellarMemoType {
	p := new(StellarSignTx_StellarMemoType)
	*p = x
	return p
}

func (x StellarSignTx_StellarMemoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StellarSignTx_StellarMemoType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_stellar_proto_enumTypes[1].Descriptor()
}

func (StellarSignTx_StellarMemoType) Type() protoreflect.EnumType {
	return &file_messages_stellar_proto_enumTypes[1]
}

func (x StellarSignTx_StellarMemoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StellarSignTx_StellarMemoType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StellarSignTx_StellarMemoType(num)
	return nil
}

// Deprecated: Use StellarSignTx_StellarMemoType.Descriptor instead.
func (StellarSignTx_StellarMemoType) EnumDescriptor() ([]byte, []int) {
	return file_messages_stellar_proto_rawDescGZIP(), []int{3, 0}
}

// https://github.com/stellar/stellar-core/blob/02d26858069de7c0eefe065056fb0a19bf72ea56/src/xdr/Stellar-types.x#L32-L37
type StellarSetOptionsOp_StellarSignerType int32

const (
	StellarSetOptionsOp_ACCOUNT  StellarSetOptionsOp_StellarSignerType = 0
	StellarSetOptionsOp_PRE_AUTH StellarSetOptionsOp_StellarSignerType = 1
	StellarSetOptionsOp_HASH     StellarSetOptionsOp_StellarSignerType = 2
)

// Enum value maps for StellarSetOptionsOp_StellarSignerType.
var (
	StellarSetOptionsOp_StellarSignerType_name = map[int32]string{
		0: "ACCOUNT",
		1: "PRE_AUTH",
		2: "HASH",
	}
	StellarSetOptionsOp_StellarSignerType_value = map[string]int32{
		"ACCOUNT":  0,
		"PRE_AUTH": 1,
		"HASH":     2,
	}
)

func (x StellarSetOptionsOp_StellarSignerType) Enum() *StellarSetOptionsOp_StellarSignerType {
	p := new(StellarSetOptionsOp_StellarSignerType)
	*p = x
	return p
}

func (x StellarSetOptionsOp_StellarSignerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StellarSetOptionsOp_StellarSignerType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_stellar_proto_enumTypes[2].Descriptor()
}

func (StellarSetOptionsOp_StellarSignerType) Type() protoreflect.EnumType {
	return &file_messages_stellar_proto_enumTypes[2]
}

func (x StellarSetOptionsOp_StellarSignerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StellarSetOptionsOp_StellarSignerType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StellarSetOptionsOp_StellarSignerType(num)
	return nil
}

// Deprecated: Use StellarSetOptionsOp_StellarSignerType.Descriptor instead.
func (StellarSetOptionsOp_StellarSignerType) EnumDescriptor() ([]byte, []int) {
	return file_messages_stellar_proto_rawDescGZIP(), []int{12, 0}
}

// *
// Describes a Stellar asset
// @embed
type StellarAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   *StellarAssetType `protobuf:"varint,1,req,name=type,enum=hw.trezor.messages.stellar.StellarAssetType" json:"type,omitempty"`
	Code   *string           `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`     // for non-native assets, string describing the code
	Issuer *string           `protobuf:"bytes,3,opt,name=issuer" json:"issuer,omitempty"` // issuing address
}

func (x *StellarAsset) Reset() {
	*x = StellarAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_stellar_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StellarAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StellarAsset) ProtoMessage() {}

func (x *StellarAsset) ProtoReflect() protoreflect.Message {
	mi := &file_messages_stellar_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StellarAsset.ProtoReflect.Descriptor instead.
func (*StellarAsset) Descriptor() ([]byte, []int) {
	return file_messages_stellar_proto_rawDescGZIP(), []int{0}
}

func (x *StellarAsset) GetType() StellarAssetType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return StellarAssetType_NATIVE
}

func (x *StellarAsset) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *StellarAsset) GetIssuer() string {
	if x != nil && x.Issuer != nil {
		return *x.Issuer
	}
	return ""
}

// *
// Request: Address at the specified index
// @start
// @next StellarAddress
type StellarGetAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressN    []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`          // BIP-32 path. For compatibility with other wallets, must be m/44'/148'/index'
	ShowDisplay *bool    `protobuf:"varint,2,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"` // optionally show on display before sending the result
}

func (x *StellarGetAddress) Reset() {
	*x = StellarGetAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_stellar_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StellarGetAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StellarGetAddress) ProtoMessage() {}

func (x *StellarGetAddress) ProtoReflect() protoreflect.Message {
	mi := &file_messages_stellar_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StellarGetAddress.ProtoReflect.Descriptor instead.
func (*StellarGetAddress) Descriptor() ([]byte, []int) {
	return file_messages_stellar_proto_rawDescGZIP(), []int{1}
}

func (x *StellarGetAddress) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *StellarGetAddress) GetShowDisplay() bool {
	if x != nil && x.ShowDisplay != nil {
		return *x.ShowDisplay
	}
	return false
}

// *
// Response: Address for the given index
// @end
type StellarAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *string `protobuf:"bytes,1,req,name=address" json:"address,omitempty"` // Address in Stellar format (base32 of a pubkey with checksum)
}

func (x *StellarAddress) Reset() {
	*x = StellarAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_stellar_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StellarAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StellarAddress) ProtoMessage() {}

func (x *StellarAddress) ProtoReflect() protoreflect.Message {
	mi := &file_messages_stellar_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StellarAddress.ProtoReflect.Descriptor instead.
func (*StellarAddress) Descriptor() ([]byte, []int) {
	return file_messages_stellar_proto_rawDescGZIP(), []int{2}
}

func (x *StellarAddress) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

// *
// Request: ask device to sign Stellar transaction
// @start
// @next StellarTxOpRequest
type StellarSignTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressN          []uint32                       `protobuf:"varint,2,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                                                                // BIP-32 path. For compatibility with other wallets, must be m/44'/148'/index'
	NetworkPassphrase *string                        `protobuf:"bytes,3,req,name=network_passphrase,json=networkPassphrase" json:"network_passphrase,omitempty"`                                      // passphrase for signing messages on the destination network
	SourceAccount     *string                        `protobuf:"bytes,4,req,name=source_account,json=sourceAccount" json:"source_account,omitempty"`                                                  // source account address
	Fee               *uint32                        `protobuf:"varint,5,req,name=fee" json:"fee,omitempty"`                                                                                          // Fee (in stroops) for the transaction
	SequenceNumber    *uint64                        `protobuf:"varint,6,req,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`                                              // transaction sequence number
	TimeboundsStart   *uint32                        `protobuf:"varint,8,req,name=timebounds_start,json=timeboundsStart" json:"timebounds_start,omitempty"`                                           // unix timestamp (client must truncate this to 32 bytes)
	TimeboundsEnd     *uint32                        `protobuf:"varint,9,req,name=timebounds_end,json=timeboundsEnd" json:"timebounds_end,omitempty"`                                                 // unix timestamp (client must truncate this to 32 bytes)
	MemoType          *StellarSignTx_StellarMemoType `protobuf:"varint,10,req,name=memo_type,json=memoType,enum=hw.trezor.messages.stellar.StellarSignTx_StellarMemoType" json:"memo_type,omitempty"` // type of memo attached to the transaction
	MemoText          *string                        `protobuf:"bytes,11,opt,name=memo_text,json=memoText" json:"memo_text,omitempty"`                                                                // up to 28 characters (4 bytes are for length)
	MemoId            *uint64                        `protobuf:"varint,12,opt,name=memo_id,json=memoId" json:"memo_id,omitempty"`                                                                     // 8-byte uint64
	MemoHash          []byte                         `protobuf:"bytes,13,opt,name=memo_hash,json=memoHash" json:"memo_hash,omitempty"`                                                                // 32 bytes representing a hash
	NumOperations     *uint32                        `protobuf:"varint,14,req,name=num_operations,json=numOperations" json:"num_operations,omitempty"`                                                // number of operations in this transaction
}

func (x *StellarSignTx) Reset() {
	*x = StellarSignTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_stellar_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StellarSignTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StellarSignTx) ProtoMessage() {}

func (x *StellarSignTx) ProtoReflect() protoreflect.Message {
	mi := &file_messages_stellar_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StellarSignTx.ProtoReflect.Descriptor instead.
func (*StellarSignTx) Descriptor() ([]byte, []int) {
	return file_messages_stellar_proto_rawDescGZIP(), []int{3}
}

func (x *StellarSignTx) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *StellarSignTx) GetNetworkPassphrase() string {
	if x != nil && x.NetworkPassphrase != nil {
		return *x.NetworkPassphrase
	}
	return ""
}

func (x *StellarSignTx) GetSourceAccount() string {
	if x != nil && x.SourceAccount != nil {
		return *x.SourceAccount
	}
	return ""
}

func (x *StellarSignTx) GetFee() uint32 {
	if x != nil && x.Fee != nil {
		return *x.Fee
	}
	return 0
}

func (x *StellarSignTx) GetSequenceNumber() uint64 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

func (x *StellarSignTx) GetTimeboundsStart() uint32 {
	if x != nil && x.TimeboundsStart != nil {
		return *x.TimeboundsStart
	}
	return 0
}

func (x *StellarSignTx) GetTimeboundsEnd() uint32 {
	if x != nil && x.TimeboundsEnd != nil {
		return *x.TimeboundsEnd
	}
	return 0
}

func (x *StellarSignTx) GetMemoType() StellarSignTx_StellarMemoType {
	if x != nil && x.MemoType != nil {
		return *x.MemoType
	}
	return StellarSignTx_NONE
}

func (x *StellarSignTx) GetMemoText() string {
	if x != nil && x.MemoText != nil {
		return *x.MemoText
	}
	return ""
}

func (x *StellarSignTx) GetMemoId() uint64 {
	if x != nil && x.MemoId != nil {
		return *x.MemoId
	}
	return 0
}

func (x *StellarSignTx) GetMemoHash() []byte {
	if x != nil {
		return x.MemoHash
	}
	return nil
}

func (x *StellarSignTx) GetNumOperations() uint32 {
	if x != nil && x.NumOperations != nil {
		return *x.NumOperations
	}
	return 0
}

// *
// Response: device is ready for client to send the next operation
// @next StellarPaymentOp
// @next StellarCreateAccountOp
// @next StellarPathPaymentStrictReceiveOp
// @next StellarPathPaymentStrictSendOp
// @next StellarManageSellOfferOp
// @next StellarManageBuyOfferOp
// @next StellarCreatePassiveSellOfferOp
// @next StellarSetOptionsOp
// @next StellarChangeTrustOp
// @next StellarAllowTrustOp
// @next StellarAccountMergeOp
// @next StellarManageDataOp
// @next StellarBumpSequenceOp
type StellarTxOpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StellarTxOpRequest) Reset() {
	*x = StellarTxOpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_stellar_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StellarTxOpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StellarTxOpRequest) ProtoMessage() {}

func (x *StellarTxOpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_stellar_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StellarTxOpRequest.ProtoReflect.Descriptor instead.
func (*StellarTxOpRequest) Descriptor() ([]byte, []int) {
	return file_messages_stellar_proto_rawDescGZIP(), []int{4}
}

// *
// Request: ask device to confirm this operation type
// @next StellarTxOpRequest
// @next StellarSignedTx
type StellarPaymentOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAccount      *string       `protobuf:"bytes,1,opt,name=source_account,json=sourceAccount" json:"source_account,omitempty"`                // (optional) source account address
	DestinationAccount *string       `protobuf:"bytes,2,req,name=destination_account,json=destinationAccount" json:"destination_account,omitempty"` // destination account address
	Asset              *StellarAsset `protobuf:"bytes,3,req,name=asset" json:"asset,omitempty"`                                                     // asset involved in the operation
	Amount             *int64        `protobuf:"zigzag64,4,req,name=amount" json:"amount,omitempty"`                                                // amount of the given asset to pay
}

func (x *StellarPaymentOp) Reset() {
	*x = StellarPaymentOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_stellar_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StellarPaymentOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StellarPaymentOp) ProtoMessage() {}

func (x *StellarPaymentOp) ProtoReflect() protoreflect.Message {
	mi := &file_messages_stellar_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StellarPaymentOp.ProtoReflect.Descriptor instead.
func (*StellarPaymentOp) Descriptor() ([]byte, []int) {
	return file_messages_stellar_proto_rawDescGZIP(), []int{5}
}

func (x *StellarPaymentOp) GetSourceAccount() string {
	if x != nil && x.SourceAccount != nil {
		return *x.SourceAccount
	}
	return ""
}

func (x *StellarPaymentOp) GetDestinationAccount() string {
	if x != nil && x.DestinationAccount != nil {
		return *x.DestinationAccount
	}
	return ""
}

func (x *StellarPaymentOp) GetAsset() *StellarAsset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *StellarPaymentOp) GetAmount() int64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

// *
// Request: ask device to confirm this operation type
// @next StellarTxOpRequest
// @next StellarSignedTx
type StellarCreateAccountOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAccount   *string `protobuf:"bytes,1,opt,name=source_account,json=sourceAccount" json:"source_account,omitempty"`          // (optional) source account address
	NewAccount      *string `protobuf:"bytes,2,req,name=new_account,json=newAccount" json:"new_account,omitempty"`                   // account address to create
	StartingBalance *int64  `protobuf:"zigzag64,3,req,name=starting_balance,json=startingBalance" json:"starting_balance,omitempty"` // initial starting balance for the new account
}

func (x *StellarCreateAccountOp) Reset() {
	*x = StellarCreateAccountOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_stellar_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StellarCreateAccountOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StellarCreateAccountOp) ProtoMessage() {}

func (x *StellarCreateAccountOp) ProtoReflect() protoreflect.Message {
	mi := &file_messages_stellar_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StellarCreateAccountOp.ProtoReflect.Descriptor instead.
func (*StellarCreateAccountOp) Descriptor() ([]byte, []int) {
	return file_messages_stellar_proto_rawDescGZIP(), []int{6}
}

func (x *StellarCreateAccountOp) GetSourceAccount() string {
	if x != nil && x.SourceAccount != nil {
		return *x.SourceAccount
	}
	return ""
}

func (x *StellarCreateAccountOp) GetNewAccount() string {
	if x != nil && x.NewAccount != nil {
		return *x.NewAccount
	}
	return ""
}

func (x *StellarCreateAccountOp) GetStartingBalance() int64 {
	if x != nil && x.StartingBalance != nil {
		return *x.StartingBalance
	}
	return 0
}

// *
// Request: ask device to confirm this operation type
// @next StellarTxOpRequest
// @next StellarSignedTx
type StellarPathPaymentStrictReceiveOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAccount      *string         `protobuf:"bytes,1,opt,name=source_account,json=sourceAccount" json:"source_account,omitempty"`                // (optional) source address
	SendAsset          *StellarAsset   `protobuf:"bytes,2,req,name=send_asset,json=sendAsset" json:"send_asset,omitempty"`                            // asset we pay with
	SendMax            *int64          `protobuf:"zigzag64,3,req,name=send_max,json=sendMax" json:"send_max,omitempty"`                               // the maximum amount of sendAsset to send (excluding fees)
	DestinationAccount *string         `protobuf:"bytes,4,req,name=destination_account,json=destinationAccount" json:"destination_account,omitempty"` // recipient of the payment
	DestinationAsset   *StellarAsset   `protobuf:"bytes,5,req,name=destination_asset,json=destinationAsset" json:"destination_asset,omitempty"`       // what they end up with
	DestinationAmount  *int64          `protobuf:"zigzag64,6,req,name=destination_amount,json=destinationAmount" json:"destination_amount,omitempty"` // amount they end up with
	Paths              []*StellarAsset `protobuf:"bytes,7,rep,name=paths" json:"paths,omitempty"`                                                     // additional hops it must go through to get there
}

func (x *StellarPathPaymentStrictReceiveOp) Reset() {
	*x = StellarPathPaymentStrictReceiveOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_stellar_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StellarPathPaymentStrictReceiveOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StellarPathPaymentStrictReceiveOp) ProtoMessage() {}

func (x *StellarPathPaymentStrictReceiveOp) ProtoReflect() protoreflect.Message {
	mi := &file_messages_stellar_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StellarPathPaymentStrictReceiveOp.ProtoReflect.Descriptor instead.
func (*StellarPathPaymentStrictReceiveOp) Descriptor() ([]byte, []int) {
	return file_messages_stellar_proto_rawDescGZIP(), []int{7}
}

func (x *StellarPathPaymentStrictReceiveOp) GetSourceAccount() string {
	if x != nil && x.SourceAccount != nil {
		return *x.SourceAccount
	}
	return ""
}

func (x *StellarPathPaymentStrictReceiveOp) GetSendAsset() *StellarAsset {
	if x != nil {
		return x.SendAsset
	}
	return nil
}

func (x *StellarPathPaymentStrictReceiveOp) GetSendMax() int64 {
	if x != nil && x.SendMax != nil {
		return *x.SendMax
	}
	return 0
}

func (x *StellarPathPaymentStrictReceiveOp) GetDestinationAccount() string {
	if x != nil && x.DestinationAccount != nil {
		return *x.DestinationAccount
	}
	return ""
}

func (x *StellarPathPaymentStrictReceiveOp) GetDestinationAsset() *StellarAsset {
	if x != nil {
		return x.DestinationAsset
	}
	return nil
}

func (x *StellarPathPaymentStrictReceiveOp) GetDestinationAmount() int64 {
	if x != nil && x.DestinationAmount != nil {
		return *x.DestinationAmount
	}
	return 0
}

func (x *StellarPathPaymentStrictReceiveOp) GetPaths() []*StellarAsset {
	if x != nil {
		return x.Paths
	}
	return nil
}

// *
// Request: ask device to confirm this operation type
// @next StellarTxOpRequest
// @next StellarSignedTx
type StellarPathPaymentStrictSendOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAccount      *string         `protobuf:"bytes,1,opt,name=source_account,json=sourceAccount" json:"source_account,omitempty"`                // (optional) source address
	SendAsset          *StellarAsset   `protobuf:"bytes,2,req,name=send_asset,json=sendAsset" json:"send_asset,omitempty"`                            // asset we pay with
	SendAmount         *int64          `protobuf:"zigzag64,3,req,name=send_amount,json=sendAmount" json:"send_amount,omitempty"`                      // amount of sendAsset to send (excluding fees)
	DestinationAccount *string         `protobuf:"bytes,4,req,name=destination_account,json=destinationAccount" json:"destination_account,omitempty"` // recipient of the payment
	DestinationAsset   *StellarAsset   `protobuf:"bytes,5,req,name=destination_asset,json=destinationAsset" json:"destination_asset,omitempty"`       // what they end up with
	DestinationMin     *int64          `protobuf:"zigzag64,6,req,name=destination_min,json=destinationMin" json:"destination_min,omitempty"`          // the minimum amount of dest asset to be received
	Paths              []*StellarAsset `protobuf:"bytes,7,rep,name=paths" json:"paths,omitempty"`                                                     //additional hops it must go through to get there
}

func (x *StellarPathPaymentStrictSendOp) Reset() {
	*x = StellarPathPaymentStrictSendOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_stellar_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StellarPathPaymentStrictSendOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StellarPathPaymentStrictSendOp) ProtoMessage() {}

func (x *StellarPathPaymentStrictSendOp) ProtoReflect() protoreflect.Message {
	mi := &file_messages_stellar_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StellarPathPaymentStrictSendOp.ProtoReflect.Descriptor instead.
func (*StellarPathPaymentStrictSendOp) Descriptor() ([]byte, []int) {
	return file_messages_stellar_proto_rawDescGZIP(), []int{8}
}

func (x *StellarPathPaymentStrictSendOp) GetSourceAccount() string {
	if x != nil && x.SourceAccount != nil {
		return *x.SourceAccount
	}
	return ""
}

func (x *StellarPathPaymentStrictSendOp) GetSendAsset() *StellarAsset {
	if x != nil {
		return x.SendAsset
	}
	return nil
}

func (x *StellarPathPaymentStrictSendOp) GetSendAmount() int64 {
	if x != nil && x.SendAmount != nil {
		return *x.SendAmount
	}
	return 0
}

func (x *StellarPathPaymentStrictSendOp) GetDestinationAccount() string {
	if x != nil && x.DestinationAccount != nil {
		return *x.DestinationAccount
	}
	return ""
}

func (x *StellarPathPaymentStrictSendOp) GetDestinationAsset() *StellarAsset {
	if x != nil {
		return x.DestinationAsset
	}
	return nil
}

func (x *StellarPathPaymentStrictSendOp) GetDestinationMin() int64 {
	if x != nil && x.DestinationMin != nil {
		return *x.DestinationMin
	}
	return 0
}

func (x *StellarPathPaymentStrictSendOp) GetPaths() []*StellarAsset {
	if x != nil {
		return x.Paths
	}
	return nil
}

// *
// Request: ask device to confirm this operation type
// @next StellarTxOpRequest
// @next StellarSignedTx
type StellarManageSellOfferOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAccount *string       `protobuf:"bytes,1,opt,name=source_account,json=sourceAccount" json:"source_account,omitempty"` // (optional) source account address
	SellingAsset  *StellarAsset `protobuf:"bytes,2,req,name=selling_asset,json=sellingAsset" json:"selling_asset,omitempty"`
	BuyingAsset   *StellarAsset `protobuf:"bytes,3,req,name=buying_asset,json=buyingAsset" json:"buying_asset,omitempty"`
	Amount        *int64        `protobuf:"zigzag64,4,req,name=amount" json:"amount,omitempty"`
	PriceN        *uint32       `protobuf:"varint,5,req,name=price_n,json=priceN" json:"price_n,omitempty"`    // Price numerator
	PriceD        *uint32       `protobuf:"varint,6,req,name=price_d,json=priceD" json:"price_d,omitempty"`    // Price denominator
	OfferId       *uint64       `protobuf:"varint,7,req,name=offer_id,json=offerId" json:"offer_id,omitempty"` // Offer ID for updating an existing offer
}

func (x *StellarManageSellOfferOp) Reset() {
	*x = StellarManageSellOfferOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_stellar_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StellarManageSellOfferOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StellarManageSellOfferOp) ProtoMessage() {}

func (x *StellarManageSellOfferOp) ProtoReflect() protoreflect.Message {
	mi := &file_messages_stellar_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StellarManageSellOfferOp.ProtoReflect.Descriptor instead.
func (*StellarManageSellOfferOp) Descriptor() ([]byte, []int) {
	return file_messages_stellar_proto_rawDescGZIP(), []int{9}
}

func (x *StellarManageSellOfferOp) GetSourceAccount() string {
	if x != nil && x.SourceAccount != nil {
		return *x.SourceAccount
	}
	return ""
}

func (x *StellarManageSellOfferOp) GetSellingAsset() *StellarAsset {
	if x != nil {
		return x.SellingAsset
	}
	return nil
}

func (x *StellarManageSellOfferOp) GetBuyingAsset() *StellarAsset {
	if x != nil {
		return x.BuyingAsset
	}
	return nil
}

func (x *StellarManageSellOfferOp) GetAmount() int64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *StellarManageSellOfferOp) GetPriceN() uint32 {
	if x != nil && x.PriceN != nil {
		return *x.PriceN
	}
	return 0
}

func (x *StellarManageSellOfferOp) GetPriceD() uint32 {
	if x != nil && x.PriceD != nil {
		return *x.PriceD
	}
	return 0
}

func (x *StellarManageSellOfferOp) GetOfferId() uint64 {
	if x != nil && x.OfferId != nil {
		return *x.OfferId
	}
	return 0
}

// *
// Request: ask device to confirm this operation type
// @next StellarTxOpRequest
// @next StellarSignedTx
type StellarManageBuyOfferOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAccount *string       `protobuf:"bytes,1,opt,name=source_account,json=sourceAccount" json:"source_account,omitempty"` // (optional) source account address
	SellingAsset  *StellarAsset `protobuf:"bytes,2,req,name=selling_asset,json=sellingAsset" json:"selling_asset,omitempty"`
	BuyingAsset   *StellarAsset `protobuf:"bytes,3,req,name=buying_asset,json=buyingAsset" json:"buying_asset,omitempty"`
	Amount        *int64        `protobuf:"zigzag64,4,req,name=amount" json:"amount,omitempty"`
	PriceN        *uint32       `protobuf:"varint,5,req,name=price_n,json=priceN" json:"price_n,omitempty"`    // Price numerator
	PriceD        *uint32       `protobuf:"varint,6,req,name=price_d,json=priceD" json:"price_d,omitempty"`    // Price denominator
	OfferId       *uint64       `protobuf:"varint,7,req,name=offer_id,json=offerId" json:"offer_id,omitempty"` // Offer ID for updating an existing offer
}

func (x *StellarManageBuyOfferOp) Reset() {
	*x = StellarManageBuyOfferOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_stellar_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StellarManageBuyOfferOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StellarManageBuyOfferOp) ProtoMessage() {}

func (x *StellarManageBuyOfferOp) ProtoReflect() protoreflect.Message {
	mi := &file_messages_stellar_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StellarManageBuyOfferOp.ProtoReflect.Descriptor instead.
func (*StellarManageBuyOfferOp) Descriptor() ([]byte, []int) {
	return file_messages_stellar_proto_rawDescGZIP(), []int{10}
}

func (x *StellarManageBuyOfferOp) GetSourceAccount() string {
	if x != nil && x.SourceAccount != nil {
		return *x.SourceAccount
	}
	return ""
}

func (x *StellarManageBuyOfferOp) GetSellingAsset() *StellarAsset {
	if x != nil {
		return x.SellingAsset
	}
	return nil
}

func (x *StellarManageBuyOfferOp) GetBuyingAsset() *StellarAsset {
	if x != nil {
		return x.BuyingAsset
	}
	return nil
}

func (x *StellarManageBuyOfferOp) GetAmount() int64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *StellarManageBuyOfferOp) GetPriceN() uint32 {
	if x != nil && x.PriceN != nil {
		return *x.PriceN
	}
	return 0
}

func (x *StellarManageBuyOfferOp) GetPriceD() uint32 {
	if x != nil && x.PriceD != nil {
		return *x.PriceD
	}
	return 0
}

func (x *StellarManageBuyOfferOp) GetOfferId() uint64 {
	if x != nil && x.OfferId != nil {
		return *x.OfferId
	}
	return 0
}

// *
// Request: ask device to confirm this operation type
// @next StellarTxOpRequest
// @next StellarSignedTx
type StellarCreatePassiveSellOfferOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAccount *string       `protobuf:"bytes,1,opt,name=source_account,json=sourceAccount" json:"source_account,omitempty"` // (optional) source account address
	SellingAsset  *StellarAsset `protobuf:"bytes,2,req,name=selling_asset,json=sellingAsset" json:"selling_asset,omitempty"`
	BuyingAsset   *StellarAsset `protobuf:"bytes,3,req,name=buying_asset,json=buyingAsset" json:"buying_asset,omitempty"`
	Amount        *int64        `protobuf:"zigzag64,4,req,name=amount" json:"amount,omitempty"`
	PriceN        *uint32       `protobuf:"varint,5,req,name=price_n,json=priceN" json:"price_n,omitempty"` // Price numerator
	PriceD        *uint32       `protobuf:"varint,6,req,name=price_d,json=priceD" json:"price_d,omitempty"` // Price denominator
}

func (x *StellarCreatePassiveSellOfferOp) Reset() {
	*x = StellarCreatePassiveSellOfferOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_stellar_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StellarCreatePassiveSellOfferOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StellarCreatePassiveSellOfferOp) ProtoMessage() {}

func (x *StellarCreatePassiveSellOfferOp) ProtoReflect() protoreflect.Message {
	mi := &file_messages_stellar_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StellarCreatePassiveSellOfferOp.ProtoReflect.Descriptor instead.
func (*StellarCreatePassiveSellOfferOp) Descriptor() ([]byte, []int) {
	return file_messages_stellar_proto_rawDescGZIP(), []int{11}
}

func (x *StellarCreatePassiveSellOfferOp) GetSourceAccount() string {
	if x != nil && x.SourceAccount != nil {
		return *x.SourceAccount
	}
	return ""
}

func (x *StellarCreatePassiveSellOfferOp) GetSellingAsset() *StellarAsset {
	if x != nil {
		return x.SellingAsset
	}
	return nil
}

func (x *StellarCreatePassiveSellOfferOp) GetBuyingAsset() *StellarAsset {
	if x != nil {
		return x.BuyingAsset
	}
	return nil
}

func (x *StellarCreatePassiveSellOfferOp) GetAmount() int64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *StellarCreatePassiveSellOfferOp) GetPriceN() uint32 {
	if x != nil && x.PriceN != nil {
		return *x.PriceN
	}
	return 0
}

func (x *StellarCreatePassiveSellOfferOp) GetPriceD() uint32 {
	if x != nil && x.PriceD != nil {
		return *x.PriceD
	}
	return 0
}

// *
// Request: ask device to confirm this operation type
// @next StellarTxOpRequest
// @next StellarSignedTx
type StellarSetOptionsOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAccount               *string                                `protobuf:"bytes,1,opt,name=source_account,json=sourceAccount" json:"source_account,omitempty"`                                             // (optional) source account address
	InflationDestinationAccount *string                                `protobuf:"bytes,2,opt,name=inflation_destination_account,json=inflationDestinationAccount" json:"inflation_destination_account,omitempty"` // (optional) inflation destination address
	ClearFlags                  *uint32                                `protobuf:"varint,3,opt,name=clear_flags,json=clearFlags" json:"clear_flags,omitempty"`
	SetFlags                    *uint32                                `protobuf:"varint,4,opt,name=set_flags,json=setFlags" json:"set_flags,omitempty"`
	MasterWeight                *uint32                                `protobuf:"varint,5,opt,name=master_weight,json=masterWeight" json:"master_weight,omitempty"`
	LowThreshold                *uint32                                `protobuf:"varint,6,opt,name=low_threshold,json=lowThreshold" json:"low_threshold,omitempty"`
	MediumThreshold             *uint32                                `protobuf:"varint,7,opt,name=medium_threshold,json=mediumThreshold" json:"medium_threshold,omitempty"`
	HighThreshold               *uint32                                `protobuf:"varint,8,opt,name=high_threshold,json=highThreshold" json:"high_threshold,omitempty"`
	HomeDomain                  *string                                `protobuf:"bytes,9,opt,name=home_domain,json=homeDomain" json:"home_domain,omitempty"`
	SignerType                  *StellarSetOptionsOp_StellarSignerType `protobuf:"varint,10,opt,name=signer_type,json=signerType,enum=hw.trezor.messages.stellar.StellarSetOptionsOp_StellarSignerType" json:"signer_type,omitempty"`
	SignerKey                   []byte                                 `protobuf:"bytes,11,opt,name=signer_key,json=signerKey" json:"signer_key,omitempty"`
	SignerWeight                *uint32                                `protobuf:"varint,12,opt,name=signer_weight,json=signerWeight" json:"signer_weight,omitempty"`
}

func (x *StellarSetOptionsOp) Reset() {
	*x = StellarSetOptionsOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_stellar_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StellarSetOptionsOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StellarSetOptionsOp) ProtoMessage() {}

func (x *StellarSetOptionsOp) ProtoReflect() protoreflect.Message {
	mi := &file_messages_stellar_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StellarSetOptionsOp.ProtoReflect.Descriptor instead.
func (*StellarSetOptionsOp) Descriptor() ([]byte, []int) {
	return file_messages_stellar_proto_rawDescGZIP(), []int{12}
}

func (x *StellarSetOptionsOp) GetSourceAccount() string {
	if x != nil && x.SourceAccount != nil {
		return *x.SourceAccount
	}
	return ""
}

func (x *StellarSetOptionsOp) GetInflationDestinationAccount() string {
	if x != nil && x.InflationDestinationAccount != nil {
		return *x.InflationDestinationAccount
	}
	return ""
}

func (x *StellarSetOptionsOp) GetClearFlags() uint32 {
	if x != nil && x.ClearFlags != nil {
		return *x.ClearFlags
	}
	return 0
}

func (x *StellarSetOptionsOp) GetSetFlags() uint32 {
	if x != nil && x.SetFlags != nil {
		return *x.SetFlags
	}
	return 0
}

func (x *StellarSetOptionsOp) GetMasterWeight() uint32 {
	if x != nil && x.MasterWeight != nil {
		return *x.MasterWeight
	}
	return 0
}

func (x *StellarSetOptionsOp) GetLowThreshold() uint32 {
	if x != nil && x.LowThreshold != nil {
		return *x.LowThreshold
	}
	return 0
}

func (x *StellarSetOptionsOp) GetMediumThreshold() uint32 {
	if x != nil && x.MediumThreshold != nil {
		return *x.MediumThreshold
	}
	return 0
}

func (x *StellarSetOptionsOp) GetHighThreshold() uint32 {
	if x != nil && x.HighThreshold != nil {
		return *x.HighThreshold
	}
	return 0
}

func (x *StellarSetOptionsOp) GetHomeDomain() string {
	if x != nil && x.HomeDomain != nil {
		return *x.HomeDomain
	}
	return ""
}

func (x *StellarSetOptionsOp) GetSignerType() StellarSetOptionsOp_StellarSignerType {
	if x != nil && x.SignerType != nil {
		return *x.SignerType
	}
	return StellarSetOptionsOp_ACCOUNT
}

func (x *StellarSetOptionsOp) GetSignerKey() []byte {
	if x != nil {
		return x.SignerKey
	}
	return nil
}

func (x *StellarSetOptionsOp) GetSignerWeight() uint32 {
	if x != nil && x.SignerWeight != nil {
		return *x.SignerWeight
	}
	return 0
}

// *
// Request: ask device to confirm this operation type
// @next StellarTxOpRequest
// @next StellarSignedTx
type StellarChangeTrustOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAccount *string       `protobuf:"bytes,1,opt,name=source_account,json=sourceAccount" json:"source_account,omitempty"` // (optional) source account address
	Asset         *StellarAsset `protobuf:"bytes,2,req,name=asset" json:"asset,omitempty"`
	Limit         *uint64       `protobuf:"varint,3,req,name=limit" json:"limit,omitempty"`
}

func (x *StellarChangeTrustOp) Reset() {
	*x = StellarChangeTrustOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_stellar_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StellarChangeTrustOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StellarChangeTrustOp) ProtoMessage() {}

func (x *StellarChangeTrustOp) ProtoReflect() protoreflect.Message {
	mi := &file_messages_stellar_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StellarChangeTrustOp.ProtoReflect.Descriptor instead.
func (*StellarChangeTrustOp) Descriptor() ([]byte, []int) {
	return file_messages_stellar_proto_rawDescGZIP(), []int{13}
}

func (x *StellarChangeTrustOp) GetSourceAccount() string {
	if x != nil && x.SourceAccount != nil {
		return *x.SourceAccount
	}
	return ""
}

func (x *StellarChangeTrustOp) GetAsset() *StellarAsset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *StellarChangeTrustOp) GetLimit() uint64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

// *
// Request: ask device to confirm this operation type
// @next StellarTxOpRequest
// @next StellarSignedTx
type StellarAllowTrustOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAccount  *string           `protobuf:"bytes,1,opt,name=source_account,json=sourceAccount" json:"source_account,omitempty"`    // (optional) source account address
	TrustedAccount *string           `protobuf:"bytes,2,req,name=trusted_account,json=trustedAccount" json:"trusted_account,omitempty"` // The account being allowed to hold the asset
	AssetType      *StellarAssetType `protobuf:"varint,3,req,name=asset_type,json=assetType,enum=hw.trezor.messages.stellar.StellarAssetType" json:"asset_type,omitempty"`
	AssetCode      *string           `protobuf:"bytes,4,opt,name=asset_code,json=assetCode" json:"asset_code,omitempty"` // human-readable asset code
	IsAuthorized   *bool             `protobuf:"varint,5,req,name=is_authorized,json=isAuthorized" json:"is_authorized,omitempty"`
}

func (x *StellarAllowTrustOp) Reset() {
	*x = StellarAllowTrustOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_stellar_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StellarAllowTrustOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StellarAllowTrustOp) ProtoMessage() {}

func (x *StellarAllowTrustOp) ProtoReflect() protoreflect.Message {
	mi := &file_messages_stellar_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StellarAllowTrustOp.ProtoReflect.Descriptor instead.
func (*StellarAllowTrustOp) Descriptor() ([]byte, []int) {
	return file_messages_stellar_proto_rawDescGZIP(), []int{14}
}

func (x *StellarAllowTrustOp) GetSourceAccount() string {
	if x != nil && x.SourceAccount != nil {
		return *x.SourceAccount
	}
	return ""
}

func (x *StellarAllowTrustOp) GetTrustedAccount() string {
	if x != nil && x.TrustedAccount != nil {
		return *x.TrustedAccount
	}
	return ""
}

func (x *StellarAllowTrustOp) GetAssetType() StellarAssetType {
	if x != nil && x.AssetType != nil {
		return *x.AssetType
	}
	return StellarAssetType_NATIVE
}

func (x *StellarAllowTrustOp) GetAssetCode() string {
	if x != nil && x.AssetCode != nil {
		return *x.AssetCode
	}
	return ""
}

func (x *StellarAllowTrustOp) GetIsAuthorized() bool {
	if x != nil && x.IsAuthorized != nil {
		return *x.IsAuthorized
	}
	return false
}

// *
// Request: ask device to confirm this operation type
// @next StellarTxOpRequest
// @next StellarSignedTx
type StellarAccountMergeOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAccount      *string `protobuf:"bytes,1,opt,name=source_account,json=sourceAccount" json:"source_account,omitempty"`                // (optional) source account address
	DestinationAccount *string `protobuf:"bytes,2,req,name=destination_account,json=destinationAccount" json:"destination_account,omitempty"` // destination account address
}

func (x *StellarAccountMergeOp) Reset() {
	*x = StellarAccountMergeOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_stellar_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StellarAccountMergeOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StellarAccountMergeOp) ProtoMessage() {}

func (x *StellarAccountMergeOp) ProtoReflect() protoreflect.Message {
	mi := &file_messages_stellar_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StellarAccountMergeOp.ProtoReflect.Descriptor instead.
func (*StellarAccountMergeOp) Descriptor() ([]byte, []int) {
	return file_messages_stellar_proto_rawDescGZIP(), []int{15}
}

func (x *StellarAccountMergeOp) GetSourceAccount() string {
	if x != nil && x.SourceAccount != nil {
		return *x.SourceAccount
	}
	return ""
}

func (x *StellarAccountMergeOp) GetDestinationAccount() string {
	if x != nil && x.DestinationAccount != nil {
		return *x.DestinationAccount
	}
	return ""
}

// *
// Request: ask device to confirm this operation type
// @next StellarTxOpRequest
// @next StellarSignedTx
type StellarManageDataOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAccount *string `protobuf:"bytes,1,opt,name=source_account,json=sourceAccount" json:"source_account,omitempty"` // (optional) source account address
	Key           *string `protobuf:"bytes,2,req,name=key" json:"key,omitempty"`
	Value         []byte  `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"` // 64 bytes of arbitrary data
}

func (x *StellarManageDataOp) Reset() {
	*x = StellarManageDataOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_stellar_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StellarManageDataOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StellarManageDataOp) ProtoMessage() {}

func (x *StellarManageDataOp) ProtoReflect() protoreflect.Message {
	mi := &file_messages_stellar_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StellarManageDataOp.ProtoReflect.Descriptor instead.
func (*StellarManageDataOp) Descriptor() ([]byte, []int) {
	return file_messages_stellar_proto_rawDescGZIP(), []int{16}
}

func (x *StellarManageDataOp) GetSourceAccount() string {
	if x != nil && x.SourceAccount != nil {
		return *x.SourceAccount
	}
	return ""
}

func (x *StellarManageDataOp) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *StellarManageDataOp) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// *
// Request: ask device to confirm this operation type
// @next StellarTxOpRequest
// @next StellarSignedTx
type StellarBumpSequenceOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAccount *string `protobuf:"bytes,1,opt,name=source_account,json=sourceAccount" json:"source_account,omitempty"` // (optional) source account address
	BumpTo        *uint64 `protobuf:"varint,2,req,name=bump_to,json=bumpTo" json:"bump_to,omitempty"`                     // new sequence number
}

func (x *StellarBumpSequenceOp) Reset() {
	*x = StellarBumpSequenceOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_stellar_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StellarBumpSequenceOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StellarBumpSequenceOp) ProtoMessage() {}

func (x *StellarBumpSequenceOp) ProtoReflect() protoreflect.Message {
	mi := &file_messages_stellar_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StellarBumpSequenceOp.ProtoReflect.Descriptor instead.
func (*StellarBumpSequenceOp) Descriptor() ([]byte, []int) {
	return file_messages_stellar_proto_rawDescGZIP(), []int{17}
}

func (x *StellarBumpSequenceOp) GetSourceAccount() string {
	if x != nil && x.SourceAccount != nil {
		return *x.SourceAccount
	}
	return ""
}

func (x *StellarBumpSequenceOp) GetBumpTo() uint64 {
	if x != nil && x.BumpTo != nil {
		return *x.BumpTo
	}
	return 0
}

// *
// Response: signature for transaction
// @end
type StellarSignedTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey []byte `protobuf:"bytes,1,req,name=public_key,json=publicKey" json:"public_key,omitempty"` // public key for the private key used to sign data
	Signature []byte `protobuf:"bytes,2,req,name=signature" json:"signature,omitempty"`                  // signature suitable for sending to the Stellar network
}

func (x *StellarSignedTx) Reset() {
	*x = StellarSignedTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_stellar_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StellarSignedTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StellarSignedTx) ProtoMessage() {}

func (x *StellarSignedTx) ProtoReflect() protoreflect.Message {
	mi := &file_messages_stellar_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StellarSignedTx.ProtoReflect.Descriptor instead.
func (*StellarSignedTx) Descriptor() ([]byte, []int) {
	return file_messages_stellar_proto_rawDescGZIP(), []int{18}
}

func (x *StellarSignedTx) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *StellarSignedTx) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_messages_stellar_proto protoreflect.FileDescriptor

var file_messages_stellar_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2d, 0x73, 0x74, 0x65, 0x6c, 0x6c,
	0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65,
	0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x65,
	0x6c, 0x6c, 0x61, 0x72, 0x22, 0x7c, 0x0a, 0x0c, 0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2e,
	0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x22, 0x53, 0x0a, 0x11, 0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x22, 0x2a, 0x0a, 0x0e, 0x53, 0x74, 0x65, 0x6c, 0x6c,
	0x61, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0xa6, 0x04, 0x0a, 0x0d, 0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x53,
	0x69, 0x67, 0x6e, 0x54, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4e, 0x12, 0x2d, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x11,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f, 0x74,
	0x69, 0x6d, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x65, 0x6e, 0x64,
	0x18, 0x09, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x45, 0x6e, 0x64, 0x12, 0x56, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72,
	0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x73, 0x74,
	0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x53, 0x69, 0x67,
	0x6e, 0x54, 0x78, 0x2e, 0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x65,
	0x6d, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x43, 0x0a, 0x0f, 0x53, 0x74, 0x65, 0x6c, 0x6c,
	0x61, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x06,
	0x0a, 0x02, 0x49, 0x44, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x41, 0x53, 0x48, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x04, 0x22, 0x14, 0x0a, 0x12,
	0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x54, 0x78, 0x4f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f,
	0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3e, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x6c,
	0x6c, 0x61, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x12, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x65, 0x6c,
	0x6c, 0x61, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4f, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x77,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a,
	0x6e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x12, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xa5, 0x03, 0x0a, 0x21, 0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61,
	0x72, 0x50, 0x61, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x47, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a,
	0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x65, 0x6c,
	0x6c, 0x61, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x02, 0x28, 0x12, 0x52, 0x07, 0x73,
	0x65, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2e,
	0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x10, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x2d,
	0x0a, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x02, 0x28, 0x12, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a,
	0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68,
	0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61,
	0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0xa2, 0x03,
	0x0a, 0x1e, 0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x50, 0x61, 0x74, 0x68, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x70,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x77,
	0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x12, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x12,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x55, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x6c, 0x6c,
	0x61, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x12, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x53,
	0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x22, 0xc2, 0x02, 0x0a, 0x18, 0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x4f, 0x70, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x6c, 0x6c,
	0x61, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x77,
	0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x12, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x4e, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x02, 0x28, 0x04, 0x52, 0x07,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc1, 0x02, 0x0a, 0x17, 0x53, 0x74, 0x65, 0x6c,
	0x6c, 0x61, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x42, 0x75, 0x79, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x4f, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x0d, 0x73, 0x65,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x53,
	0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x0c, 0x62, 0x75, 0x79,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x53, 0x74, 0x65,
	0x6c, 0x6c, 0x61, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x69, 0x6e,
	0x67, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x12, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4e, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x02,
	0x28, 0x04, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x22, 0xae, 0x02, 0x0a, 0x1f,
	0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x4f, 0x70, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x6c, 0x6c,
	0x61, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x77,
	0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x12, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x4e, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x22, 0xdd, 0x04, 0x0a,
	0x13, 0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4f, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1d, 0x69,
	0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1b, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x6f, 0x77, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x75,
	0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x69, 0x67, 0x68,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6d,
	0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x68, 0x6f, 0x6d, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x62, 0x0a, 0x0b, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x41, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x53, 0x74, 0x65,
	0x6c, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x70,
	0x2e, 0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0x38, 0x0a, 0x11, 0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x41, 0x53, 0x48, 0x10, 0x02, 0x22, 0x93, 0x01, 0x0a,
	0x14, 0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x72,
	0x75, 0x73, 0x74, 0x4f, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x05,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x77,
	0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0xf6, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x54, 0x72, 0x75, 0x73, 0x74, 0x4f, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0a, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2c,
	0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x6c,
	0x6c, 0x61, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x6f, 0x0a, 0x15, 0x53,
	0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x4f, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x64, 0x0a, 0x13,
	0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x4f, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x57, 0x0a, 0x15, 0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x42, 0x75, 0x6d,
	0x70, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x75, 0x6d, 0x70, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x04, 0x52, 0x06, 0x62, 0x75, 0x6d, 0x70, 0x54, 0x6f, 0x22, 0x4e, 0x0a, 0x0f, 0x53,
	0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2a, 0x3d, 0x0a, 0x10, 0x53,
	0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x4e, 0x55, 0x4d, 0x34, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c,
	0x50, 0x48, 0x41, 0x4e, 0x55, 0x4d, 0x31, 0x32, 0x10, 0x02, 0x42, 0x3b, 0x0a, 0x23, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x74, 0x72,
	0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x42, 0x14, 0x54, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72,
}

var (
	file_messages_stellar_proto_rawDescOnce sync.Once
	file_messages_stellar_proto_rawDescData = file_messages_stellar_proto_rawDesc
)

func file_messages_stellar_proto_rawDescGZIP() []byte {
	file_messages_stellar_proto_rawDescOnce.Do(func() {
		file_messages_stellar_proto_rawDescData = protoimpl.X.CompressGZIP(file_messages_stellar_proto_rawDescData)
	})
	return file_messages_stellar_proto_rawDescData
}

var file_messages_stellar_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_messages_stellar_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_messages_stellar_proto_goTypes = []interface{}{
	(StellarAssetType)(0),                      // 0: hw.trezor.messages.stellar.StellarAssetType
	(StellarSignTx_StellarMemoType)(0),         // 1: hw.trezor.messages.stellar.StellarSignTx.StellarMemoType
	(StellarSetOptionsOp_StellarSignerType)(0), // 2: hw.trezor.messages.stellar.StellarSetOptionsOp.StellarSignerType
	(*StellarAsset)(nil),                       // 3: hw.trezor.messages.stellar.StellarAsset
	(*StellarGetAddress)(nil),                  // 4: hw.trezor.messages.stellar.StellarGetAddress
	(*StellarAddress)(nil),                     // 5: hw.trezor.messages.stellar.StellarAddress
	(*StellarSignTx)(nil),                      // 6: hw.trezor.messages.stellar.StellarSignTx
	(*StellarTxOpRequest)(nil),                 // 7: hw.trezor.messages.stellar.StellarTxOpRequest
	(*StellarPaymentOp)(nil),                   // 8: hw.trezor.messages.stellar.StellarPaymentOp
	(*StellarCreateAccountOp)(nil),             // 9: hw.trezor.messages.stellar.StellarCreateAccountOp
	(*StellarPathPaymentStrictReceiveOp)(nil),  // 10: hw.trezor.messages.stellar.StellarPathPaymentStrictReceiveOp
	(*StellarPathPaymentStrictSendOp)(nil),     // 11: hw.trezor.messages.stellar.StellarPathPaymentStrictSendOp
	(*StellarManageSellOfferOp)(nil),           // 12: hw.trezor.messages.stellar.StellarManageSellOfferOp
	(*StellarManageBuyOfferOp)(nil),            // 13: hw.trezor.messages.stellar.StellarManageBuyOfferOp
	(*StellarCreatePassiveSellOfferOp)(nil),    // 14: hw.trezor.messages.stellar.StellarCreatePassiveSellOfferOp
	(*StellarSetOptionsOp)(nil),                // 15: hw.trezor.messages.stellar.StellarSetOptionsOp
	(*StellarChangeTrustOp)(nil),               // 16: hw.trezor.messages.stellar.StellarChangeTrustOp
	(*StellarAllowTrustOp)(nil),                // 17: hw.trezor.messages.stellar.StellarAllowTrustOp
	(*StellarAccountMergeOp)(nil),              // 18: hw.trezor.messages.stellar.StellarAccountMergeOp
	(*StellarManageDataOp)(nil),                // 19: hw.trezor.messages.stellar.StellarManageDataOp
	(*StellarBumpSequenceOp)(nil),              // 20: hw.trezor.messages.stellar.StellarBumpSequenceOp
	(*StellarSignedTx)(nil),                    // 21: hw.trezor.messages.stellar.StellarSignedTx
}
var file_messages_stellar_proto_depIdxs = []int32{
	0,  // 0: hw.trezor.messages.stellar.StellarAsset.type:type_name -> hw.trezor.messages.stellar.StellarAssetType
	1,  // 1: hw.trezor.messages.stellar.StellarSignTx.memo_type:type_name -> hw.trezor.messages.stellar.StellarSignTx.StellarMemoType
	3,  // 2: hw.trezor.messages.stellar.StellarPaymentOp.asset:type_name -> hw.trezor.messages.stellar.StellarAsset
	3,  // 3: hw.trezor.messages.stellar.StellarPathPaymentStrictReceiveOp.send_asset:type_name -> hw.trezor.messages.stellar.StellarAsset
	3,  // 4: hw.trezor.messages.stellar.StellarPathPaymentStrictReceiveOp.destination_asset:type_name -> hw.trezor.messages.stellar.StellarAsset
	3,  // 5: hw.trezor.messages.stellar.StellarPathPaymentStrictReceiveOp.paths:type_name -> hw.trezor.messages.stellar.StellarAsset
	3,  // 6: hw.trezor.messages.stellar.StellarPathPaymentStrictSendOp.send_asset:type_name -> hw.trezor.messages.stellar.StellarAsset
	3,  // 7: hw.trezor.messages.stellar.StellarPathPaymentStrictSendOp.destination_asset:type_name -> hw.trezor.messages.stellar.StellarAsset
	3,  // 8: hw.trezor.messages.stellar.StellarPathPaymentStrictSendOp.paths:type_name -> hw.trezor.messages.stellar.StellarAsset
	3,  // 9: hw.trezor.messages.stellar.StellarManageSellOfferOp.selling_asset:type_name -> hw.trezor.messages.stellar.StellarAsset
	3,  // 10: hw.trezor.messages.stellar.StellarManageSellOfferOp.buying_asset:type_name -> hw.trezor.messages.stellar.StellarAsset
	3,  // 11: hw.trezor.messages.stellar.StellarManageBuyOfferOp.selling_asset:type_name -> hw.trezor.messages.stellar.StellarAsset
	3,  // 12: hw.trezor.messages.stellar.StellarManageBuyOfferOp.buying_asset:type_name -> hw.trezor.messages.stellar.StellarAsset
	3,  // 13: hw.trezor.messages.stellar.StellarCreatePassiveSellOfferOp.selling_asset:type_name -> hw.trezor.messages.stellar.StellarAsset
	3,  // 14: hw.trezor.messages.stellar.StellarCreatePassiveSellOfferOp.buying_asset:type_name -> hw.trezor.messages.stellar.StellarAsset
	2,  // 15: hw.trezor.messages.stellar.StellarSetOptionsOp.signer_type:type_name -> hw.trezor.messages.stellar.StellarSetOptionsOp.StellarSignerType
	3,  // 16: hw.trezor.messages.stellar.StellarChangeTrustOp.asset:type_name -> hw.trezor.messages.stellar.StellarAsset
	0,  // 17: hw.trezor.messages.stellar.StellarAllowTrustOp.asset_type:type_name -> hw.trezor.messages.stellar.StellarAssetType
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_messages_stellar_proto_init() }
func file_messages_stellar_proto_init() {
	if File_messages_stellar_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_messages_stellar_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StellarAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_stellar_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StellarGetAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_stellar_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StellarAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_stellar_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StellarSignTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_stellar_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StellarTxOpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_stellar_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StellarPaymentOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_stellar_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StellarCreateAccountOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_stellar_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StellarPathPaymentStrictReceiveOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_stellar_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StellarPathPaymentStrictSendOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_stellar_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StellarManageSellOfferOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_stellar_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StellarManageBuyOfferOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_stellar_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StellarCreatePassiveSellOfferOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_stellar_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StellarSetOptionsOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_stellar_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StellarChangeTrustOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_stellar_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StellarAllowTrustOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_stellar_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StellarAccountMergeOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_stellar_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StellarManageDataOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_stellar_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StellarBumpSequenceOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_stellar_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StellarSignedTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messages_stellar_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_stellar_proto_goTypes,
		DependencyIndexes: file_messages_stellar_proto_depIdxs,
		EnumInfos:         file_messages_stellar_proto_enumTypes,
		MessageInfos:      file_messages_stellar_proto_msgTypes,
	}.Build()
	File_messages_stellar_proto = out.File
	file_messages_stellar_proto_rawDesc = nil
	file_messages_stellar_proto_goTypes = nil
	file_messages_stellar_proto_depIdxs = nil
}

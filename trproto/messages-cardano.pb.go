// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: messages-cardano.proto

package trproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CardanoDerivationType int32

const (
	CardanoDerivationType_LEDGER        CardanoDerivationType = 0
	CardanoDerivationType_ICARUS        CardanoDerivationType = 1
	CardanoDerivationType_ICARUS_TREZOR CardanoDerivationType = 2
)

// Enum value maps for CardanoDerivationType.
var (
	CardanoDerivationType_name = map[int32]string{
		0: "LEDGER",
		1: "ICARUS",
		2: "ICARUS_TREZOR",
	}
	CardanoDerivationType_value = map[string]int32{
		"LEDGER":        0,
		"ICARUS":        1,
		"ICARUS_TREZOR": 2,
	}
)

func (x CardanoDerivationType) Enum() *CardanoDerivationType {
	p := new(CardanoDerivationType)
	*p = x
	return p
}

func (x CardanoDerivationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardanoDerivationType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_cardano_proto_enumTypes[0].Descriptor()
}

func (CardanoDerivationType) Type() protoreflect.EnumType {
	return &file_messages_cardano_proto_enumTypes[0]
}

func (x CardanoDerivationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CardanoDerivationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CardanoDerivationType(num)
	return nil
}

// Deprecated: Use CardanoDerivationType.Descriptor instead.
func (CardanoDerivationType) EnumDescriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{0}
}

// *
// Values correspond to address header values given by the spec.
// Script addresses are only supported in transaction outputs.
type CardanoAddressType int32

const (
	CardanoAddressType_BASE               CardanoAddressType = 0
	CardanoAddressType_BASE_SCRIPT_KEY    CardanoAddressType = 1
	CardanoAddressType_BASE_KEY_SCRIPT    CardanoAddressType = 2
	CardanoAddressType_BASE_SCRIPT_SCRIPT CardanoAddressType = 3
	CardanoAddressType_POINTER            CardanoAddressType = 4
	CardanoAddressType_POINTER_SCRIPT     CardanoAddressType = 5
	CardanoAddressType_ENTERPRISE         CardanoAddressType = 6
	CardanoAddressType_ENTERPRISE_SCRIPT  CardanoAddressType = 7
	CardanoAddressType_BYRON              CardanoAddressType = 8
	CardanoAddressType_REWARD             CardanoAddressType = 14
	CardanoAddressType_REWARD_SCRIPT      CardanoAddressType = 15
)

// Enum value maps for CardanoAddressType.
var (
	CardanoAddressType_name = map[int32]string{
		0:  "BASE",
		1:  "BASE_SCRIPT_KEY",
		2:  "BASE_KEY_SCRIPT",
		3:  "BASE_SCRIPT_SCRIPT",
		4:  "POINTER",
		5:  "POINTER_SCRIPT",
		6:  "ENTERPRISE",
		7:  "ENTERPRISE_SCRIPT",
		8:  "BYRON",
		14: "REWARD",
		15: "REWARD_SCRIPT",
	}
	CardanoAddressType_value = map[string]int32{
		"BASE":               0,
		"BASE_SCRIPT_KEY":    1,
		"BASE_KEY_SCRIPT":    2,
		"BASE_SCRIPT_SCRIPT": 3,
		"POINTER":            4,
		"POINTER_SCRIPT":     5,
		"ENTERPRISE":         6,
		"ENTERPRISE_SCRIPT":  7,
		"BYRON":              8,
		"REWARD":             14,
		"REWARD_SCRIPT":      15,
	}
)

func (x CardanoAddressType) Enum() *CardanoAddressType {
	p := new(CardanoAddressType)
	*p = x
	return p
}

func (x CardanoAddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardanoAddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_cardano_proto_enumTypes[1].Descriptor()
}

func (CardanoAddressType) Type() protoreflect.EnumType {
	return &file_messages_cardano_proto_enumTypes[1]
}

func (x CardanoAddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CardanoAddressType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CardanoAddressType(num)
	return nil
}

// Deprecated: Use CardanoAddressType.Descriptor instead.
func (CardanoAddressType) EnumDescriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{1}
}

type CardanoNativeScriptType int32

const (
	CardanoNativeScriptType_PUB_KEY           CardanoNativeScriptType = 0
	CardanoNativeScriptType_ALL               CardanoNativeScriptType = 1
	CardanoNativeScriptType_ANY               CardanoNativeScriptType = 2
	CardanoNativeScriptType_N_OF_K            CardanoNativeScriptType = 3
	CardanoNativeScriptType_INVALID_BEFORE    CardanoNativeScriptType = 4
	CardanoNativeScriptType_INVALID_HEREAFTER CardanoNativeScriptType = 5
)

// Enum value maps for CardanoNativeScriptType.
var (
	CardanoNativeScriptType_name = map[int32]string{
		0: "PUB_KEY",
		1: "ALL",
		2: "ANY",
		3: "N_OF_K",
		4: "INVALID_BEFORE",
		5: "INVALID_HEREAFTER",
	}
	CardanoNativeScriptType_value = map[string]int32{
		"PUB_KEY":           0,
		"ALL":               1,
		"ANY":               2,
		"N_OF_K":            3,
		"INVALID_BEFORE":    4,
		"INVALID_HEREAFTER": 5,
	}
)

func (x CardanoNativeScriptType) Enum() *CardanoNativeScriptType {
	p := new(CardanoNativeScriptType)
	*p = x
	return p
}

func (x CardanoNativeScriptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardanoNativeScriptType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_cardano_proto_enumTypes[2].Descriptor()
}

func (CardanoNativeScriptType) Type() protoreflect.EnumType {
	return &file_messages_cardano_proto_enumTypes[2]
}

func (x CardanoNativeScriptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CardanoNativeScriptType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CardanoNativeScriptType(num)
	return nil
}

// Deprecated: Use CardanoNativeScriptType.Descriptor instead.
func (CardanoNativeScriptType) EnumDescriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{2}
}

type CardanoNativeScriptHashDisplayFormat int32

const (
	CardanoNativeScriptHashDisplayFormat_HIDE      CardanoNativeScriptHashDisplayFormat = 0
	CardanoNativeScriptHashDisplayFormat_BECH32    CardanoNativeScriptHashDisplayFormat = 1
	CardanoNativeScriptHashDisplayFormat_POLICY_ID CardanoNativeScriptHashDisplayFormat = 2
)

// Enum value maps for CardanoNativeScriptHashDisplayFormat.
var (
	CardanoNativeScriptHashDisplayFormat_name = map[int32]string{
		0: "HIDE",
		1: "BECH32",
		2: "POLICY_ID",
	}
	CardanoNativeScriptHashDisplayFormat_value = map[string]int32{
		"HIDE":      0,
		"BECH32":    1,
		"POLICY_ID": 2,
	}
)

func (x CardanoNativeScriptHashDisplayFormat) Enum() *CardanoNativeScriptHashDisplayFormat {
	p := new(CardanoNativeScriptHashDisplayFormat)
	*p = x
	return p
}

func (x CardanoNativeScriptHashDisplayFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardanoNativeScriptHashDisplayFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_cardano_proto_enumTypes[3].Descriptor()
}

func (CardanoNativeScriptHashDisplayFormat) Type() protoreflect.EnumType {
	return &file_messages_cardano_proto_enumTypes[3]
}

func (x CardanoNativeScriptHashDisplayFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CardanoNativeScriptHashDisplayFormat) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CardanoNativeScriptHashDisplayFormat(num)
	return nil
}

// Deprecated: Use CardanoNativeScriptHashDisplayFormat.Descriptor instead.
func (CardanoNativeScriptHashDisplayFormat) EnumDescriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{3}
}

type CardanoTxOutputSerializationFormat int32

const (
	CardanoTxOutputSerializationFormat_ARRAY_LEGACY CardanoTxOutputSerializationFormat = 0 // legacy_transaction_output in CDDL
	CardanoTxOutputSerializationFormat_MAP_BABBAGE  CardanoTxOutputSerializationFormat = 1 // post_alonzo_transaction_output in CDDL
)

// Enum value maps for CardanoTxOutputSerializationFormat.
var (
	CardanoTxOutputSerializationFormat_name = map[int32]string{
		0: "ARRAY_LEGACY",
		1: "MAP_BABBAGE",
	}
	CardanoTxOutputSerializationFormat_value = map[string]int32{
		"ARRAY_LEGACY": 0,
		"MAP_BABBAGE":  1,
	}
)

func (x CardanoTxOutputSerializationFormat) Enum() *CardanoTxOutputSerializationFormat {
	p := new(CardanoTxOutputSerializationFormat)
	*p = x
	return p
}

func (x CardanoTxOutputSerializationFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardanoTxOutputSerializationFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_cardano_proto_enumTypes[4].Descriptor()
}

func (CardanoTxOutputSerializationFormat) Type() protoreflect.EnumType {
	return &file_messages_cardano_proto_enumTypes[4]
}

func (x CardanoTxOutputSerializationFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CardanoTxOutputSerializationFormat) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CardanoTxOutputSerializationFormat(num)
	return nil
}

// Deprecated: Use CardanoTxOutputSerializationFormat.Descriptor instead.
func (CardanoTxOutputSerializationFormat) EnumDescriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{4}
}

type CardanoCertificateType int32

const (
	CardanoCertificateType_STAKE_REGISTRATION      CardanoCertificateType = 0
	CardanoCertificateType_STAKE_DEREGISTRATION    CardanoCertificateType = 1
	CardanoCertificateType_STAKE_DELEGATION        CardanoCertificateType = 2
	CardanoCertificateType_STAKE_POOL_REGISTRATION CardanoCertificateType = 3
)

// Enum value maps for CardanoCertificateType.
var (
	CardanoCertificateType_name = map[int32]string{
		0: "STAKE_REGISTRATION",
		1: "STAKE_DEREGISTRATION",
		2: "STAKE_DELEGATION",
		3: "STAKE_POOL_REGISTRATION",
	}
	CardanoCertificateType_value = map[string]int32{
		"STAKE_REGISTRATION":      0,
		"STAKE_DEREGISTRATION":    1,
		"STAKE_DELEGATION":        2,
		"STAKE_POOL_REGISTRATION": 3,
	}
)

func (x CardanoCertificateType) Enum() *CardanoCertificateType {
	p := new(CardanoCertificateType)
	*p = x
	return p
}

func (x CardanoCertificateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardanoCertificateType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_cardano_proto_enumTypes[5].Descriptor()
}

func (CardanoCertificateType) Type() protoreflect.EnumType {
	return &file_messages_cardano_proto_enumTypes[5]
}

func (x CardanoCertificateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CardanoCertificateType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CardanoCertificateType(num)
	return nil
}

// Deprecated: Use CardanoCertificateType.Descriptor instead.
func (CardanoCertificateType) EnumDescriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{5}
}

type CardanoPoolRelayType int32

const (
	CardanoPoolRelayType_SINGLE_HOST_IP     CardanoPoolRelayType = 0
	CardanoPoolRelayType_SINGLE_HOST_NAME   CardanoPoolRelayType = 1
	CardanoPoolRelayType_MULTIPLE_HOST_NAME CardanoPoolRelayType = 2
)

// Enum value maps for CardanoPoolRelayType.
var (
	CardanoPoolRelayType_name = map[int32]string{
		0: "SINGLE_HOST_IP",
		1: "SINGLE_HOST_NAME",
		2: "MULTIPLE_HOST_NAME",
	}
	CardanoPoolRelayType_value = map[string]int32{
		"SINGLE_HOST_IP":     0,
		"SINGLE_HOST_NAME":   1,
		"MULTIPLE_HOST_NAME": 2,
	}
)

func (x CardanoPoolRelayType) Enum() *CardanoPoolRelayType {
	p := new(CardanoPoolRelayType)
	*p = x
	return p
}

func (x CardanoPoolRelayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardanoPoolRelayType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_cardano_proto_enumTypes[6].Descriptor()
}

func (CardanoPoolRelayType) Type() protoreflect.EnumType {
	return &file_messages_cardano_proto_enumTypes[6]
}

func (x CardanoPoolRelayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CardanoPoolRelayType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CardanoPoolRelayType(num)
	return nil
}

// Deprecated: Use CardanoPoolRelayType.Descriptor instead.
func (CardanoPoolRelayType) EnumDescriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{6}
}

type CardanoTxAuxiliaryDataSupplementType int32

const (
	CardanoTxAuxiliaryDataSupplementType_NONE                              CardanoTxAuxiliaryDataSupplementType = 0
	CardanoTxAuxiliaryDataSupplementType_GOVERNANCE_REGISTRATION_SIGNATURE CardanoTxAuxiliaryDataSupplementType = 1
)

// Enum value maps for CardanoTxAuxiliaryDataSupplementType.
var (
	CardanoTxAuxiliaryDataSupplementType_name = map[int32]string{
		0: "NONE",
		1: "GOVERNANCE_REGISTRATION_SIGNATURE",
	}
	CardanoTxAuxiliaryDataSupplementType_value = map[string]int32{
		"NONE":                              0,
		"GOVERNANCE_REGISTRATION_SIGNATURE": 1,
	}
)

func (x CardanoTxAuxiliaryDataSupplementType) Enum() *CardanoTxAuxiliaryDataSupplementType {
	p := new(CardanoTxAuxiliaryDataSupplementType)
	*p = x
	return p
}

func (x CardanoTxAuxiliaryDataSupplementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardanoTxAuxiliaryDataSupplementType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_cardano_proto_enumTypes[7].Descriptor()
}

func (CardanoTxAuxiliaryDataSupplementType) Type() protoreflect.EnumType {
	return &file_messages_cardano_proto_enumTypes[7]
}

func (x CardanoTxAuxiliaryDataSupplementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CardanoTxAuxiliaryDataSupplementType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CardanoTxAuxiliaryDataSupplementType(num)
	return nil
}

// Deprecated: Use CardanoTxAuxiliaryDataSupplementType.Descriptor instead.
func (CardanoTxAuxiliaryDataSupplementType) EnumDescriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{7}
}

type CardanoGovernanceRegistrationFormat int32

const (
	CardanoGovernanceRegistrationFormat_CIP15 CardanoGovernanceRegistrationFormat = 0
	CardanoGovernanceRegistrationFormat_CIP36 CardanoGovernanceRegistrationFormat = 1
)

// Enum value maps for CardanoGovernanceRegistrationFormat.
var (
	CardanoGovernanceRegistrationFormat_name = map[int32]string{
		0: "CIP15",
		1: "CIP36",
	}
	CardanoGovernanceRegistrationFormat_value = map[string]int32{
		"CIP15": 0,
		"CIP36": 1,
	}
)

func (x CardanoGovernanceRegistrationFormat) Enum() *CardanoGovernanceRegistrationFormat {
	p := new(CardanoGovernanceRegistrationFormat)
	*p = x
	return p
}

func (x CardanoGovernanceRegistrationFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardanoGovernanceRegistrationFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_cardano_proto_enumTypes[8].Descriptor()
}

func (CardanoGovernanceRegistrationFormat) Type() protoreflect.EnumType {
	return &file_messages_cardano_proto_enumTypes[8]
}

func (x CardanoGovernanceRegistrationFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CardanoGovernanceRegistrationFormat) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CardanoGovernanceRegistrationFormat(num)
	return nil
}

// Deprecated: Use CardanoGovernanceRegistrationFormat.Descriptor instead.
func (CardanoGovernanceRegistrationFormat) EnumDescriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{8}
}

type CardanoTxSigningMode int32

const (
	CardanoTxSigningMode_ORDINARY_TRANSACTION       CardanoTxSigningMode = 0
	CardanoTxSigningMode_POOL_REGISTRATION_AS_OWNER CardanoTxSigningMode = 1
	CardanoTxSigningMode_MULTISIG_TRANSACTION       CardanoTxSigningMode = 2
	CardanoTxSigningMode_PLUTUS_TRANSACTION         CardanoTxSigningMode = 3
)

// Enum value maps for CardanoTxSigningMode.
var (
	CardanoTxSigningMode_name = map[int32]string{
		0: "ORDINARY_TRANSACTION",
		1: "POOL_REGISTRATION_AS_OWNER",
		2: "MULTISIG_TRANSACTION",
		3: "PLUTUS_TRANSACTION",
	}
	CardanoTxSigningMode_value = map[string]int32{
		"ORDINARY_TRANSACTION":       0,
		"POOL_REGISTRATION_AS_OWNER": 1,
		"MULTISIG_TRANSACTION":       2,
		"PLUTUS_TRANSACTION":         3,
	}
)

func (x CardanoTxSigningMode) Enum() *CardanoTxSigningMode {
	p := new(CardanoTxSigningMode)
	*p = x
	return p
}

func (x CardanoTxSigningMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardanoTxSigningMode) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_cardano_proto_enumTypes[9].Descriptor()
}

func (CardanoTxSigningMode) Type() protoreflect.EnumType {
	return &file_messages_cardano_proto_enumTypes[9]
}

func (x CardanoTxSigningMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CardanoTxSigningMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CardanoTxSigningMode(num)
	return nil
}

// Deprecated: Use CardanoTxSigningMode.Descriptor instead.
func (CardanoTxSigningMode) EnumDescriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{9}
}

type CardanoTxWitnessType int32

const (
	CardanoTxWitnessType_BYRON_WITNESS   CardanoTxWitnessType = 0
	CardanoTxWitnessType_SHELLEY_WITNESS CardanoTxWitnessType = 1
)

// Enum value maps for CardanoTxWitnessType.
var (
	CardanoTxWitnessType_name = map[int32]string{
		0: "BYRON_WITNESS",
		1: "SHELLEY_WITNESS",
	}
	CardanoTxWitnessType_value = map[string]int32{
		"BYRON_WITNESS":   0,
		"SHELLEY_WITNESS": 1,
	}
)

func (x CardanoTxWitnessType) Enum() *CardanoTxWitnessType {
	p := new(CardanoTxWitnessType)
	*p = x
	return p
}

func (x CardanoTxWitnessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardanoTxWitnessType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_cardano_proto_enumTypes[10].Descriptor()
}

func (CardanoTxWitnessType) Type() protoreflect.EnumType {
	return &file_messages_cardano_proto_enumTypes[10]
}

func (x CardanoTxWitnessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CardanoTxWitnessType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CardanoTxWitnessType(num)
	return nil
}

// Deprecated: Use CardanoTxWitnessType.Descriptor instead.
func (CardanoTxWitnessType) EnumDescriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{10}
}

// *
// Structure representing cardano PointerAddress pointer,
// which points to a staking key registration certificate.
// @embed
type CardanoBlockchainPointerType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockIndex       *uint32 `protobuf:"varint,1,req,name=block_index,json=blockIndex" json:"block_index,omitempty"`
	TxIndex          *uint32 `protobuf:"varint,2,req,name=tx_index,json=txIndex" json:"tx_index,omitempty"`
	CertificateIndex *uint32 `protobuf:"varint,3,req,name=certificate_index,json=certificateIndex" json:"certificate_index,omitempty"`
}

func (x *CardanoBlockchainPointerType) Reset() {
	*x = CardanoBlockchainPointerType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoBlockchainPointerType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoBlockchainPointerType) ProtoMessage() {}

func (x *CardanoBlockchainPointerType) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoBlockchainPointerType.ProtoReflect.Descriptor instead.
func (*CardanoBlockchainPointerType) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{0}
}

func (x *CardanoBlockchainPointerType) GetBlockIndex() uint32 {
	if x != nil && x.BlockIndex != nil {
		return *x.BlockIndex
	}
	return 0
}

func (x *CardanoBlockchainPointerType) GetTxIndex() uint32 {
	if x != nil && x.TxIndex != nil {
		return *x.TxIndex
	}
	return 0
}

func (x *CardanoBlockchainPointerType) GetCertificateIndex() uint32 {
	if x != nil && x.CertificateIndex != nil {
		return *x.CertificateIndex
	}
	return 0
}

// @embed
type CardanoNativeScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                    *CardanoNativeScriptType `protobuf:"varint,1,req,name=type,enum=hw.trezor.messages.cardano.CardanoNativeScriptType" json:"type,omitempty"`
	Scripts                 []*CardanoNativeScript   `protobuf:"bytes,2,rep,name=scripts" json:"scripts,omitempty"`
	KeyHash                 []byte                   `protobuf:"bytes,3,opt,name=key_hash,json=keyHash" json:"key_hash,omitempty"`
	KeyPath                 []uint32                 `protobuf:"varint,4,rep,name=key_path,json=keyPath" json:"key_path,omitempty"`
	RequiredSignaturesCount *uint32                  `protobuf:"varint,5,opt,name=required_signatures_count,json=requiredSignaturesCount" json:"required_signatures_count,omitempty"`
	InvalidBefore           *uint64                  `protobuf:"varint,6,opt,name=invalid_before,json=invalidBefore" json:"invalid_before,omitempty"`
	InvalidHereafter        *uint64                  `protobuf:"varint,7,opt,name=invalid_hereafter,json=invalidHereafter" json:"invalid_hereafter,omitempty"`
}

func (x *CardanoNativeScript) Reset() {
	*x = CardanoNativeScript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoNativeScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoNativeScript) ProtoMessage() {}

func (x *CardanoNativeScript) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoNativeScript.ProtoReflect.Descriptor instead.
func (*CardanoNativeScript) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{1}
}

func (x *CardanoNativeScript) GetType() CardanoNativeScriptType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CardanoNativeScriptType_PUB_KEY
}

func (x *CardanoNativeScript) GetScripts() []*CardanoNativeScript {
	if x != nil {
		return x.Scripts
	}
	return nil
}

func (x *CardanoNativeScript) GetKeyHash() []byte {
	if x != nil {
		return x.KeyHash
	}
	return nil
}

func (x *CardanoNativeScript) GetKeyPath() []uint32 {
	if x != nil {
		return x.KeyPath
	}
	return nil
}

func (x *CardanoNativeScript) GetRequiredSignaturesCount() uint32 {
	if x != nil && x.RequiredSignaturesCount != nil {
		return *x.RequiredSignaturesCount
	}
	return 0
}

func (x *CardanoNativeScript) GetInvalidBefore() uint64 {
	if x != nil && x.InvalidBefore != nil {
		return *x.InvalidBefore
	}
	return 0
}

func (x *CardanoNativeScript) GetInvalidHereafter() uint64 {
	if x != nil && x.InvalidHereafter != nil {
		return *x.InvalidHereafter
	}
	return 0
}

// *
// Request: Ask device for Cardano native script hash
// @start
// @next CardanoNativeScriptHash
// @next Failure
type CardanoGetNativeScriptHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Script         *CardanoNativeScript                  `protobuf:"bytes,1,req,name=script" json:"script,omitempty"`
	DisplayFormat  *CardanoNativeScriptHashDisplayFormat `protobuf:"varint,2,req,name=display_format,json=displayFormat,enum=hw.trezor.messages.cardano.CardanoNativeScriptHashDisplayFormat" json:"display_format,omitempty"` // display hash as bech32 or policy id
	DerivationType *CardanoDerivationType                `protobuf:"varint,3,req,name=derivation_type,json=derivationType,enum=hw.trezor.messages.cardano.CardanoDerivationType" json:"derivation_type,omitempty"`
}

func (x *CardanoGetNativeScriptHash) Reset() {
	*x = CardanoGetNativeScriptHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoGetNativeScriptHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoGetNativeScriptHash) ProtoMessage() {}

func (x *CardanoGetNativeScriptHash) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoGetNativeScriptHash.ProtoReflect.Descriptor instead.
func (*CardanoGetNativeScriptHash) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{2}
}

func (x *CardanoGetNativeScriptHash) GetScript() *CardanoNativeScript {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *CardanoGetNativeScriptHash) GetDisplayFormat() CardanoNativeScriptHashDisplayFormat {
	if x != nil && x.DisplayFormat != nil {
		return *x.DisplayFormat
	}
	return CardanoNativeScriptHashDisplayFormat_HIDE
}

func (x *CardanoGetNativeScriptHash) GetDerivationType() CardanoDerivationType {
	if x != nil && x.DerivationType != nil {
		return *x.DerivationType
	}
	return CardanoDerivationType_LEDGER
}

// *
// Request: Ask device for Cardano native script hash
// @end
type CardanoNativeScriptHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptHash []byte `protobuf:"bytes,1,req,name=script_hash,json=scriptHash" json:"script_hash,omitempty"`
}

func (x *CardanoNativeScriptHash) Reset() {
	*x = CardanoNativeScriptHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoNativeScriptHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoNativeScriptHash) ProtoMessage() {}

func (x *CardanoNativeScriptHash) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoNativeScriptHash.ProtoReflect.Descriptor instead.
func (*CardanoNativeScriptHash) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{3}
}

func (x *CardanoNativeScriptHash) GetScriptHash() []byte {
	if x != nil {
		return x.ScriptHash
	}
	return nil
}

// *
// Structure to represent address parameters so they can be
// reused in CardanoGetAddress and CardanoTxOutputType.
// NetworkId isn't a part of the parameters, because in a transaction
// this will be included separately in the transaction itself, so it
// shouldn't be duplicated here.
// @embed
type CardanoAddressParametersType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressType     *CardanoAddressType `protobuf:"varint,1,req,name=address_type,json=addressType,enum=hw.trezor.messages.cardano.CardanoAddressType" json:"address_type,omitempty"` // one of the CardanoAddressType-s
	AddressN        []uint32            `protobuf:"varint,2,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                                                             // BIP-32-style path to derive the spending key from master node
	AddressNStaking []uint32            `protobuf:"varint,3,rep,name=address_n_staking,json=addressNStaking" json:"address_n_staking,omitempty"`                                      // BIP-32-style path to derive staking key from master node
	StakingKeyHash  []byte              `protobuf:"bytes,4,opt,name=staking_key_hash,json=stakingKeyHash" json:"staking_key_hash,omitempty"`                                          // staking key can be derived from address_n_staking, or
	// can be sent directly e.g. if it doesn't belong to
	// the same account as address_n
	CertificatePointer *CardanoBlockchainPointerType `protobuf:"bytes,5,opt,name=certificate_pointer,json=certificatePointer" json:"certificate_pointer,omitempty"` // a pointer to the staking key registration certificate
	ScriptPaymentHash  []byte                        `protobuf:"bytes,6,opt,name=script_payment_hash,json=scriptPaymentHash" json:"script_payment_hash,omitempty"`
	ScriptStakingHash  []byte                        `protobuf:"bytes,7,opt,name=script_staking_hash,json=scriptStakingHash" json:"script_staking_hash,omitempty"`
}

func (x *CardanoAddressParametersType) Reset() {
	*x = CardanoAddressParametersType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoAddressParametersType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoAddressParametersType) ProtoMessage() {}

func (x *CardanoAddressParametersType) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoAddressParametersType.ProtoReflect.Descriptor instead.
func (*CardanoAddressParametersType) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{4}
}

func (x *CardanoAddressParametersType) GetAddressType() CardanoAddressType {
	if x != nil && x.AddressType != nil {
		return *x.AddressType
	}
	return CardanoAddressType_BASE
}

func (x *CardanoAddressParametersType) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *CardanoAddressParametersType) GetAddressNStaking() []uint32 {
	if x != nil {
		return x.AddressNStaking
	}
	return nil
}

func (x *CardanoAddressParametersType) GetStakingKeyHash() []byte {
	if x != nil {
		return x.StakingKeyHash
	}
	return nil
}

func (x *CardanoAddressParametersType) GetCertificatePointer() *CardanoBlockchainPointerType {
	if x != nil {
		return x.CertificatePointer
	}
	return nil
}

func (x *CardanoAddressParametersType) GetScriptPaymentHash() []byte {
	if x != nil {
		return x.ScriptPaymentHash
	}
	return nil
}

func (x *CardanoAddressParametersType) GetScriptStakingHash() []byte {
	if x != nil {
		return x.ScriptStakingHash
	}
	return nil
}

// *
// Request: Ask device for Cardano address
// @start
// @next CardanoAddress
// @next Failure
type CardanoGetAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repeated uint32 address_n = 1;                               // moved to address_parameters
	ShowDisplay       *bool                         `protobuf:"varint,2,opt,name=show_display,json=showDisplay,def=0" json:"show_display,omitempty"`            // optionally prompt for confirmation on trezor display
	ProtocolMagic     *uint32                       `protobuf:"varint,3,req,name=protocol_magic,json=protocolMagic" json:"protocol_magic,omitempty"`            // network's protocol magic - needed for Byron addresses on testnets
	NetworkId         *uint32                       `protobuf:"varint,4,req,name=network_id,json=networkId" json:"network_id,omitempty"`                        // network id - mainnet or testnet
	AddressParameters *CardanoAddressParametersType `protobuf:"bytes,5,req,name=address_parameters,json=addressParameters" json:"address_parameters,omitempty"` // parameters used to derive the address
	DerivationType    *CardanoDerivationType        `protobuf:"varint,6,req,name=derivation_type,json=derivationType,enum=hw.trezor.messages.cardano.CardanoDerivationType" json:"derivation_type,omitempty"`
}

// Default values for CardanoGetAddress fields.
const (
	Default_CardanoGetAddress_ShowDisplay = bool(false)
)

func (x *CardanoGetAddress) Reset() {
	*x = CardanoGetAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoGetAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoGetAddress) ProtoMessage() {}

func (x *CardanoGetAddress) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoGetAddress.ProtoReflect.Descriptor instead.
func (*CardanoGetAddress) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{5}
}

func (x *CardanoGetAddress) GetShowDisplay() bool {
	if x != nil && x.ShowDisplay != nil {
		return *x.ShowDisplay
	}
	return Default_CardanoGetAddress_ShowDisplay
}

func (x *CardanoGetAddress) GetProtocolMagic() uint32 {
	if x != nil && x.ProtocolMagic != nil {
		return *x.ProtocolMagic
	}
	return 0
}

func (x *CardanoGetAddress) GetNetworkId() uint32 {
	if x != nil && x.NetworkId != nil {
		return *x.NetworkId
	}
	return 0
}

func (x *CardanoGetAddress) GetAddressParameters() *CardanoAddressParametersType {
	if x != nil {
		return x.AddressParameters
	}
	return nil
}

func (x *CardanoGetAddress) GetDerivationType() CardanoDerivationType {
	if x != nil && x.DerivationType != nil {
		return *x.DerivationType
	}
	return CardanoDerivationType_LEDGER
}

// *
// Request: Ask device for Cardano address
// @end
type CardanoAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *string `protobuf:"bytes,1,req,name=address" json:"address,omitempty"` // Base58 cardano address
}

func (x *CardanoAddress) Reset() {
	*x = CardanoAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoAddress) ProtoMessage() {}

func (x *CardanoAddress) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoAddress.ProtoReflect.Descriptor instead.
func (*CardanoAddress) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{6}
}

func (x *CardanoAddress) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

// *
// Request: Ask device for public key corresponding to address_n path
// @start
// @next CardanoPublicKey
// @next Failure
type CardanoGetPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressN       []uint32               `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`          // BIP-32 path to derive the key from master node
	ShowDisplay    *bool                  `protobuf:"varint,2,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"` // optionally show on display before sending the result
	DerivationType *CardanoDerivationType `protobuf:"varint,3,req,name=derivation_type,json=derivationType,enum=hw.trezor.messages.cardano.CardanoDerivationType" json:"derivation_type,omitempty"`
}

func (x *CardanoGetPublicKey) Reset() {
	*x = CardanoGetPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoGetPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoGetPublicKey) ProtoMessage() {}

func (x *CardanoGetPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoGetPublicKey.ProtoReflect.Descriptor instead.
func (*CardanoGetPublicKey) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{7}
}

func (x *CardanoGetPublicKey) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *CardanoGetPublicKey) GetShowDisplay() bool {
	if x != nil && x.ShowDisplay != nil {
		return *x.ShowDisplay
	}
	return false
}

func (x *CardanoGetPublicKey) GetDerivationType() CardanoDerivationType {
	if x != nil && x.DerivationType != nil {
		return *x.DerivationType
	}
	return CardanoDerivationType_LEDGER
}

// *
// Response: Contains public key derived from device private seed
// @end
type CardanoPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpub *string     `protobuf:"bytes,1,req,name=xpub" json:"xpub,omitempty"` // Xpub key
	Node *HDNodeType `protobuf:"bytes,2,req,name=node" json:"node,omitempty"` // BIP-32 public node
}

func (x *CardanoPublicKey) Reset() {
	*x = CardanoPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoPublicKey) ProtoMessage() {}

func (x *CardanoPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoPublicKey.ProtoReflect.Descriptor instead.
func (*CardanoPublicKey) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{8}
}

func (x *CardanoPublicKey) GetXpub() string {
	if x != nil && x.Xpub != nil {
		return *x.Xpub
	}
	return ""
}

func (x *CardanoPublicKey) GetNode() *HDNodeType {
	if x != nil {
		return x.Node
	}
	return nil
}

// *
// Request: Initiate the Cardano transaction signing process on the device
// @start
// @next CardanoTxItemAck
// @next Failure
type CardanoSignTxInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SigningMode             *CardanoTxSigningMode  `protobuf:"varint,1,req,name=signing_mode,json=signingMode,enum=hw.trezor.messages.cardano.CardanoTxSigningMode" json:"signing_mode,omitempty"`
	ProtocolMagic           *uint32                `protobuf:"varint,2,req,name=protocol_magic,json=protocolMagic" json:"protocol_magic,omitempty"` // network's protocol magic
	NetworkId               *uint32                `protobuf:"varint,3,req,name=network_id,json=networkId" json:"network_id,omitempty"`             // network id - mainnet or testnet
	InputsCount             *uint32                `protobuf:"varint,4,req,name=inputs_count,json=inputsCount" json:"inputs_count,omitempty"`
	OutputsCount            *uint32                `protobuf:"varint,5,req,name=outputs_count,json=outputsCount" json:"outputs_count,omitempty"`
	Fee                     *uint64                `protobuf:"varint,6,req,name=fee" json:"fee,omitempty"` // transaction fee - added in shelley
	Ttl                     *uint64                `protobuf:"varint,7,opt,name=ttl" json:"ttl,omitempty"` // transaction ttl - added in shelley
	CertificatesCount       *uint32                `protobuf:"varint,8,req,name=certificates_count,json=certificatesCount" json:"certificates_count,omitempty"`
	WithdrawalsCount        *uint32                `protobuf:"varint,9,req,name=withdrawals_count,json=withdrawalsCount" json:"withdrawals_count,omitempty"`
	HasAuxiliaryData        *bool                  `protobuf:"varint,10,req,name=has_auxiliary_data,json=hasAuxiliaryData" json:"has_auxiliary_data,omitempty"`
	ValidityIntervalStart   *uint64                `protobuf:"varint,11,opt,name=validity_interval_start,json=validityIntervalStart" json:"validity_interval_start,omitempty"`
	WitnessRequestsCount    *uint32                `protobuf:"varint,12,req,name=witness_requests_count,json=witnessRequestsCount" json:"witness_requests_count,omitempty"`
	MintingAssetGroupsCount *uint32                `protobuf:"varint,13,req,name=minting_asset_groups_count,json=mintingAssetGroupsCount" json:"minting_asset_groups_count,omitempty"`
	DerivationType          *CardanoDerivationType `protobuf:"varint,14,req,name=derivation_type,json=derivationType,enum=hw.trezor.messages.cardano.CardanoDerivationType" json:"derivation_type,omitempty"`
	IncludeNetworkId        *bool                  `protobuf:"varint,15,opt,name=include_network_id,json=includeNetworkId,def=0" json:"include_network_id,omitempty"` // network id included as tx body item
	ScriptDataHash          []byte                 `protobuf:"bytes,16,opt,name=script_data_hash,json=scriptDataHash" json:"script_data_hash,omitempty"`
	CollateralInputsCount   *uint32                `protobuf:"varint,17,req,name=collateral_inputs_count,json=collateralInputsCount" json:"collateral_inputs_count,omitempty"`
	RequiredSignersCount    *uint32                `protobuf:"varint,18,req,name=required_signers_count,json=requiredSignersCount" json:"required_signers_count,omitempty"`
	HasCollateralReturn     *bool                  `protobuf:"varint,19,opt,name=has_collateral_return,json=hasCollateralReturn,def=0" json:"has_collateral_return,omitempty"`
	TotalCollateral         *uint64                `protobuf:"varint,20,opt,name=total_collateral,json=totalCollateral" json:"total_collateral,omitempty"`
	ReferenceInputsCount    *uint32                `protobuf:"varint,21,opt,name=reference_inputs_count,json=referenceInputsCount,def=0" json:"reference_inputs_count,omitempty"`
}

// Default values for CardanoSignTxInit fields.
const (
	Default_CardanoSignTxInit_IncludeNetworkId     = bool(false)
	Default_CardanoSignTxInit_HasCollateralReturn  = bool(false)
	Default_CardanoSignTxInit_ReferenceInputsCount = uint32(0)
)

func (x *CardanoSignTxInit) Reset() {
	*x = CardanoSignTxInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoSignTxInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoSignTxInit) ProtoMessage() {}

func (x *CardanoSignTxInit) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoSignTxInit.ProtoReflect.Descriptor instead.
func (*CardanoSignTxInit) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{9}
}

func (x *CardanoSignTxInit) GetSigningMode() CardanoTxSigningMode {
	if x != nil && x.SigningMode != nil {
		return *x.SigningMode
	}
	return CardanoTxSigningMode_ORDINARY_TRANSACTION
}

func (x *CardanoSignTxInit) GetProtocolMagic() uint32 {
	if x != nil && x.ProtocolMagic != nil {
		return *x.ProtocolMagic
	}
	return 0
}

func (x *CardanoSignTxInit) GetNetworkId() uint32 {
	if x != nil && x.NetworkId != nil {
		return *x.NetworkId
	}
	return 0
}

func (x *CardanoSignTxInit) GetInputsCount() uint32 {
	if x != nil && x.InputsCount != nil {
		return *x.InputsCount
	}
	return 0
}

func (x *CardanoSignTxInit) GetOutputsCount() uint32 {
	if x != nil && x.OutputsCount != nil {
		return *x.OutputsCount
	}
	return 0
}

func (x *CardanoSignTxInit) GetFee() uint64 {
	if x != nil && x.Fee != nil {
		return *x.Fee
	}
	return 0
}

func (x *CardanoSignTxInit) GetTtl() uint64 {
	if x != nil && x.Ttl != nil {
		return *x.Ttl
	}
	return 0
}

func (x *CardanoSignTxInit) GetCertificatesCount() uint32 {
	if x != nil && x.CertificatesCount != nil {
		return *x.CertificatesCount
	}
	return 0
}

func (x *CardanoSignTxInit) GetWithdrawalsCount() uint32 {
	if x != nil && x.WithdrawalsCount != nil {
		return *x.WithdrawalsCount
	}
	return 0
}

func (x *CardanoSignTxInit) GetHasAuxiliaryData() bool {
	if x != nil && x.HasAuxiliaryData != nil {
		return *x.HasAuxiliaryData
	}
	return false
}

func (x *CardanoSignTxInit) GetValidityIntervalStart() uint64 {
	if x != nil && x.ValidityIntervalStart != nil {
		return *x.ValidityIntervalStart
	}
	return 0
}

func (x *CardanoSignTxInit) GetWitnessRequestsCount() uint32 {
	if x != nil && x.WitnessRequestsCount != nil {
		return *x.WitnessRequestsCount
	}
	return 0
}

func (x *CardanoSignTxInit) GetMintingAssetGroupsCount() uint32 {
	if x != nil && x.MintingAssetGroupsCount != nil {
		return *x.MintingAssetGroupsCount
	}
	return 0
}

func (x *CardanoSignTxInit) GetDerivationType() CardanoDerivationType {
	if x != nil && x.DerivationType != nil {
		return *x.DerivationType
	}
	return CardanoDerivationType_LEDGER
}

func (x *CardanoSignTxInit) GetIncludeNetworkId() bool {
	if x != nil && x.IncludeNetworkId != nil {
		return *x.IncludeNetworkId
	}
	return Default_CardanoSignTxInit_IncludeNetworkId
}

func (x *CardanoSignTxInit) GetScriptDataHash() []byte {
	if x != nil {
		return x.ScriptDataHash
	}
	return nil
}

func (x *CardanoSignTxInit) GetCollateralInputsCount() uint32 {
	if x != nil && x.CollateralInputsCount != nil {
		return *x.CollateralInputsCount
	}
	return 0
}

func (x *CardanoSignTxInit) GetRequiredSignersCount() uint32 {
	if x != nil && x.RequiredSignersCount != nil {
		return *x.RequiredSignersCount
	}
	return 0
}

func (x *CardanoSignTxInit) GetHasCollateralReturn() bool {
	if x != nil && x.HasCollateralReturn != nil {
		return *x.HasCollateralReturn
	}
	return Default_CardanoSignTxInit_HasCollateralReturn
}

func (x *CardanoSignTxInit) GetTotalCollateral() uint64 {
	if x != nil && x.TotalCollateral != nil {
		return *x.TotalCollateral
	}
	return 0
}

func (x *CardanoSignTxInit) GetReferenceInputsCount() uint32 {
	if x != nil && x.ReferenceInputsCount != nil {
		return *x.ReferenceInputsCount
	}
	return Default_CardanoSignTxInit_ReferenceInputsCount
}

// *
// Request: Transaction input data
// @next CardanoTxItemAck
type CardanoTxInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrevHash  []byte  `protobuf:"bytes,1,req,name=prev_hash,json=prevHash" json:"prev_hash,omitempty"`     // hash of previous transaction output to spend by this input
	PrevIndex *uint32 `protobuf:"varint,2,req,name=prev_index,json=prevIndex" json:"prev_index,omitempty"` // index of previous output to spend
}

func (x *CardanoTxInput) Reset() {
	*x = CardanoTxInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoTxInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoTxInput) ProtoMessage() {}

func (x *CardanoTxInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoTxInput.ProtoReflect.Descriptor instead.
func (*CardanoTxInput) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{10}
}

func (x *CardanoTxInput) GetPrevHash() []byte {
	if x != nil {
		return x.PrevHash
	}
	return nil
}

func (x *CardanoTxInput) GetPrevIndex() uint32 {
	if x != nil && x.PrevIndex != nil {
		return *x.PrevIndex
	}
	return 0
}

// *
// Request: Transaction output data
// @next CardanoTxItemAck
type CardanoTxOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address             *string                             `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`                                              // target coin address in bech32 or base58
	AddressParameters   *CardanoAddressParametersType       `protobuf:"bytes,2,opt,name=address_parameters,json=addressParameters" json:"address_parameters,omitempty"` // parameters used to derive the address
	Amount              *uint64                             `protobuf:"varint,3,req,name=amount" json:"amount,omitempty"`                                               // amount to spend
	AssetGroupsCount    *uint32                             `protobuf:"varint,4,req,name=asset_groups_count,json=assetGroupsCount" json:"asset_groups_count,omitempty"`
	DatumHash           []byte                              `protobuf:"bytes,5,opt,name=datum_hash,json=datumHash" json:"datum_hash,omitempty"`
	Format              *CardanoTxOutputSerializationFormat `protobuf:"varint,6,opt,name=format,enum=hw.trezor.messages.cardano.CardanoTxOutputSerializationFormat,def=0" json:"format,omitempty"`
	InlineDatumSize     *uint32                             `protobuf:"varint,7,opt,name=inline_datum_size,json=inlineDatumSize,def=0" json:"inline_datum_size,omitempty"`             // 0 means no inline datum
	ReferenceScriptSize *uint32                             `protobuf:"varint,8,opt,name=reference_script_size,json=referenceScriptSize,def=0" json:"reference_script_size,omitempty"` // 0 means no reference script
}

// Default values for CardanoTxOutput fields.
const (
	Default_CardanoTxOutput_Format              = CardanoTxOutputSerializationFormat_ARRAY_LEGACY
	Default_CardanoTxOutput_InlineDatumSize     = uint32(0)
	Default_CardanoTxOutput_ReferenceScriptSize = uint32(0)
)

func (x *CardanoTxOutput) Reset() {
	*x = CardanoTxOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoTxOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoTxOutput) ProtoMessage() {}

func (x *CardanoTxOutput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoTxOutput.ProtoReflect.Descriptor instead.
func (*CardanoTxOutput) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{11}
}

func (x *CardanoTxOutput) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *CardanoTxOutput) GetAddressParameters() *CardanoAddressParametersType {
	if x != nil {
		return x.AddressParameters
	}
	return nil
}

func (x *CardanoTxOutput) GetAmount() uint64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *CardanoTxOutput) GetAssetGroupsCount() uint32 {
	if x != nil && x.AssetGroupsCount != nil {
		return *x.AssetGroupsCount
	}
	return 0
}

func (x *CardanoTxOutput) GetDatumHash() []byte {
	if x != nil {
		return x.DatumHash
	}
	return nil
}

func (x *CardanoTxOutput) GetFormat() CardanoTxOutputSerializationFormat {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return Default_CardanoTxOutput_Format
}

func (x *CardanoTxOutput) GetInlineDatumSize() uint32 {
	if x != nil && x.InlineDatumSize != nil {
		return *x.InlineDatumSize
	}
	return Default_CardanoTxOutput_InlineDatumSize
}

func (x *CardanoTxOutput) GetReferenceScriptSize() uint32 {
	if x != nil && x.ReferenceScriptSize != nil {
		return *x.ReferenceScriptSize
	}
	return Default_CardanoTxOutput_ReferenceScriptSize
}

// *
// Request: Transaction output asset group data
// @next CardanoTxItemAck
type CardanoAssetGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId    []byte  `protobuf:"bytes,1,req,name=policy_id,json=policyId" json:"policy_id,omitempty"` // asset group policy id
	TokensCount *uint32 `protobuf:"varint,2,req,name=tokens_count,json=tokensCount" json:"tokens_count,omitempty"`
}

func (x *CardanoAssetGroup) Reset() {
	*x = CardanoAssetGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoAssetGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoAssetGroup) ProtoMessage() {}

func (x *CardanoAssetGroup) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoAssetGroup.ProtoReflect.Descriptor instead.
func (*CardanoAssetGroup) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{12}
}

func (x *CardanoAssetGroup) GetPolicyId() []byte {
	if x != nil {
		return x.PolicyId
	}
	return nil
}

func (x *CardanoAssetGroup) GetTokensCount() uint32 {
	if x != nil && x.TokensCount != nil {
		return *x.TokensCount
	}
	return 0
}

// *
// Request: Transaction output asset group token data
// @next CardanoTxItemAck
type CardanoToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetNameBytes []byte  `protobuf:"bytes,1,req,name=asset_name_bytes,json=assetNameBytes" json:"asset_name_bytes,omitempty"` // asset name as bytestring (may be either ascii string or hash)
	Amount         *uint64 `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`                                        // asset amount
	MintAmount     *int64  `protobuf:"zigzag64,3,opt,name=mint_amount,json=mintAmount" json:"mint_amount,omitempty"`            // mint amount (can also be negative in which case the tokens are burnt)
}

func (x *CardanoToken) Reset() {
	*x = CardanoToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoToken) ProtoMessage() {}

func (x *CardanoToken) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoToken.ProtoReflect.Descriptor instead.
func (*CardanoToken) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{13}
}

func (x *CardanoToken) GetAssetNameBytes() []byte {
	if x != nil {
		return x.AssetNameBytes
	}
	return nil
}

func (x *CardanoToken) GetAmount() uint64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *CardanoToken) GetMintAmount() int64 {
	if x != nil && x.MintAmount != nil {
		return *x.MintAmount
	}
	return 0
}

// *
// Request: Transaction output inline datum chunk
// @next CardanoTxItemAck
type CardanoTxInlineDatumChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,req,name=data" json:"data,omitempty"` // expected maximum chunk size is 1024 bytes
}

func (x *CardanoTxInlineDatumChunk) Reset() {
	*x = CardanoTxInlineDatumChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoTxInlineDatumChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoTxInlineDatumChunk) ProtoMessage() {}

func (x *CardanoTxInlineDatumChunk) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoTxInlineDatumChunk.ProtoReflect.Descriptor instead.
func (*CardanoTxInlineDatumChunk) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{14}
}

func (x *CardanoTxInlineDatumChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// *
// Request: Transaction output reference script chunk
// @next CardanoTxItemAck
type CardanoTxReferenceScriptChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,req,name=data" json:"data,omitempty"` // expected maximum chunk size is 1024 bytes
}

func (x *CardanoTxReferenceScriptChunk) Reset() {
	*x = CardanoTxReferenceScriptChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoTxReferenceScriptChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoTxReferenceScriptChunk) ProtoMessage() {}

func (x *CardanoTxReferenceScriptChunk) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoTxReferenceScriptChunk.ProtoReflect.Descriptor instead.
func (*CardanoTxReferenceScriptChunk) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{15}
}

func (x *CardanoTxReferenceScriptChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// *
// Request: Stake pool owner parameters
// @next CardanoTxItemAck
type CardanoPoolOwner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakingKeyPath []uint32 `protobuf:"varint,1,rep,name=staking_key_path,json=stakingKeyPath" json:"staking_key_path,omitempty"` // BIP-32-style path to derive staking key of the owner
	StakingKeyHash []byte   `protobuf:"bytes,2,opt,name=staking_key_hash,json=stakingKeyHash" json:"staking_key_hash,omitempty"`  // owner's staking key if it is an external owner
}

func (x *CardanoPoolOwner) Reset() {
	*x = CardanoPoolOwner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoPoolOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoPoolOwner) ProtoMessage() {}

func (x *CardanoPoolOwner) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoPoolOwner.ProtoReflect.Descriptor instead.
func (*CardanoPoolOwner) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{16}
}

func (x *CardanoPoolOwner) GetStakingKeyPath() []uint32 {
	if x != nil {
		return x.StakingKeyPath
	}
	return nil
}

func (x *CardanoPoolOwner) GetStakingKeyHash() []byte {
	if x != nil {
		return x.StakingKeyHash
	}
	return nil
}

// *
// Request: Stake pool relay parameters
// @next CardanoTxItemAck
type CardanoPoolRelayParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        *CardanoPoolRelayType `protobuf:"varint,1,req,name=type,enum=hw.trezor.messages.cardano.CardanoPoolRelayType" json:"type,omitempty"` // pool relay type
	Ipv4Address []byte                `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`                      // ipv4 address of the relay given as 4 bytes
	Ipv6Address []byte                `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address" json:"ipv6_address,omitempty"`                      // ipv6 address of the relay given as 16 bytes
	HostName    *string               `protobuf:"bytes,4,opt,name=host_name,json=hostName" json:"host_name,omitempty"`                               // relay host name given as URL, at most 64 characters
	Port        *uint32               `protobuf:"varint,5,opt,name=port" json:"port,omitempty"`                                                      // relay port number in the range 0-65535
}

func (x *CardanoPoolRelayParameters) Reset() {
	*x = CardanoPoolRelayParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoPoolRelayParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoPoolRelayParameters) ProtoMessage() {}

func (x *CardanoPoolRelayParameters) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoPoolRelayParameters.ProtoReflect.Descriptor instead.
func (*CardanoPoolRelayParameters) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{17}
}

func (x *CardanoPoolRelayParameters) GetType() CardanoPoolRelayType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CardanoPoolRelayType_SINGLE_HOST_IP
}

func (x *CardanoPoolRelayParameters) GetIpv4Address() []byte {
	if x != nil {
		return x.Ipv4Address
	}
	return nil
}

func (x *CardanoPoolRelayParameters) GetIpv6Address() []byte {
	if x != nil {
		return x.Ipv6Address
	}
	return nil
}

func (x *CardanoPoolRelayParameters) GetHostName() string {
	if x != nil && x.HostName != nil {
		return *x.HostName
	}
	return ""
}

func (x *CardanoPoolRelayParameters) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

// *
// Stake pool metadata parameters
// @embed
type CardanoPoolMetadataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url  *string `protobuf:"bytes,1,req,name=url" json:"url,omitempty"`   // stake pool url hosting metadata, at most 64 characters
	Hash []byte  `protobuf:"bytes,2,req,name=hash" json:"hash,omitempty"` // stake pool metadata hash
}

func (x *CardanoPoolMetadataType) Reset() {
	*x = CardanoPoolMetadataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoPoolMetadataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoPoolMetadataType) ProtoMessage() {}

func (x *CardanoPoolMetadataType) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoPoolMetadataType.ProtoReflect.Descriptor instead.
func (*CardanoPoolMetadataType) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{18}
}

func (x *CardanoPoolMetadataType) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *CardanoPoolMetadataType) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

// *
// Stake pool parameters
// @embed
type CardanoPoolParametersType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId            []byte  `protobuf:"bytes,1,req,name=pool_id,json=poolId" json:"pool_id,omitempty"`                                   // stake pool cold public key hash (28 bytes)
	VrfKeyHash        []byte  `protobuf:"bytes,2,req,name=vrf_key_hash,json=vrfKeyHash" json:"vrf_key_hash,omitempty"`                     // VRF key hash (32 bytes)
	Pledge            *uint64 `protobuf:"varint,3,req,name=pledge" json:"pledge,omitempty"`                                                // pledge amount in lovelace
	Cost              *uint64 `protobuf:"varint,4,req,name=cost" json:"cost,omitempty"`                                                    // cost in lovelace
	MarginNumerator   *uint64 `protobuf:"varint,5,req,name=margin_numerator,json=marginNumerator" json:"margin_numerator,omitempty"`       // pool margin numerator
	MarginDenominator *uint64 `protobuf:"varint,6,req,name=margin_denominator,json=marginDenominator" json:"margin_denominator,omitempty"` // pool margin denominator
	RewardAccount     *string `protobuf:"bytes,7,req,name=reward_account,json=rewardAccount" json:"reward_account,omitempty"`              // bech32 reward address where the pool receives rewards
	// repeated CardanoPoolOwner owners = 8;            // legacy pool owners list - support for pre-tx-streaming firmwares dropped
	// repeated CardanoPoolRelayParameters relays = 9;  // legacy pool relays list - support for pre-tx-streaming firmwares dropped
	Metadata    *CardanoPoolMetadataType `protobuf:"bytes,10,opt,name=metadata" json:"metadata,omitempty"`                           // pool metadata
	OwnersCount *uint32                  `protobuf:"varint,11,req,name=owners_count,json=ownersCount" json:"owners_count,omitempty"` // number of pool owners
	RelaysCount *uint32                  `protobuf:"varint,12,req,name=relays_count,json=relaysCount" json:"relays_count,omitempty"` // number of pool relays
}

func (x *CardanoPoolParametersType) Reset() {
	*x = CardanoPoolParametersType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoPoolParametersType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoPoolParametersType) ProtoMessage() {}

func (x *CardanoPoolParametersType) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoPoolParametersType.ProtoReflect.Descriptor instead.
func (*CardanoPoolParametersType) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{19}
}

func (x *CardanoPoolParametersType) GetPoolId() []byte {
	if x != nil {
		return x.PoolId
	}
	return nil
}

func (x *CardanoPoolParametersType) GetVrfKeyHash() []byte {
	if x != nil {
		return x.VrfKeyHash
	}
	return nil
}

func (x *CardanoPoolParametersType) GetPledge() uint64 {
	if x != nil && x.Pledge != nil {
		return *x.Pledge
	}
	return 0
}

func (x *CardanoPoolParametersType) GetCost() uint64 {
	if x != nil && x.Cost != nil {
		return *x.Cost
	}
	return 0
}

func (x *CardanoPoolParametersType) GetMarginNumerator() uint64 {
	if x != nil && x.MarginNumerator != nil {
		return *x.MarginNumerator
	}
	return 0
}

func (x *CardanoPoolParametersType) GetMarginDenominator() uint64 {
	if x != nil && x.MarginDenominator != nil {
		return *x.MarginDenominator
	}
	return 0
}

func (x *CardanoPoolParametersType) GetRewardAccount() string {
	if x != nil && x.RewardAccount != nil {
		return *x.RewardAccount
	}
	return ""
}

func (x *CardanoPoolParametersType) GetMetadata() *CardanoPoolMetadataType {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CardanoPoolParametersType) GetOwnersCount() uint32 {
	if x != nil && x.OwnersCount != nil {
		return *x.OwnersCount
	}
	return 0
}

func (x *CardanoPoolParametersType) GetRelaysCount() uint32 {
	if x != nil && x.RelaysCount != nil {
		return *x.RelaysCount
	}
	return 0
}

// *
// Request: Transaction certificate data
// @next CardanoTxItemAck
type CardanoTxCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           *CardanoCertificateType    `protobuf:"varint,1,req,name=type,enum=hw.trezor.messages.cardano.CardanoCertificateType" json:"type,omitempty"` // certificate type
	Path           []uint32                   `protobuf:"varint,2,rep,name=path" json:"path,omitempty"`                                                        // stake credential key path
	Pool           []byte                     `protobuf:"bytes,3,opt,name=pool" json:"pool,omitempty"`                                                         // pool hash
	PoolParameters *CardanoPoolParametersType `protobuf:"bytes,4,opt,name=pool_parameters,json=poolParameters" json:"pool_parameters,omitempty"`               // used for stake pool registration certificate
	ScriptHash     []byte                     `protobuf:"bytes,5,opt,name=script_hash,json=scriptHash" json:"script_hash,omitempty"`                           // stake credential script hash
	KeyHash        []byte                     `protobuf:"bytes,6,opt,name=key_hash,json=keyHash" json:"key_hash,omitempty"`                                    // stake credential key hash
}

func (x *CardanoTxCertificate) Reset() {
	*x = CardanoTxCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoTxCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoTxCertificate) ProtoMessage() {}

func (x *CardanoTxCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoTxCertificate.ProtoReflect.Descriptor instead.
func (*CardanoTxCertificate) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{20}
}

func (x *CardanoTxCertificate) GetType() CardanoCertificateType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CardanoCertificateType_STAKE_REGISTRATION
}

func (x *CardanoTxCertificate) GetPath() []uint32 {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *CardanoTxCertificate) GetPool() []byte {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *CardanoTxCertificate) GetPoolParameters() *CardanoPoolParametersType {
	if x != nil {
		return x.PoolParameters
	}
	return nil
}

func (x *CardanoTxCertificate) GetScriptHash() []byte {
	if x != nil {
		return x.ScriptHash
	}
	return nil
}

func (x *CardanoTxCertificate) GetKeyHash() []byte {
	if x != nil {
		return x.KeyHash
	}
	return nil
}

// *
// Request: Transaction withdrawal data
// @next CardanoTxItemAck
type CardanoTxWithdrawal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       []uint32 `protobuf:"varint,1,rep,name=path" json:"path,omitempty"` // stake credential key path
	Amount     *uint64  `protobuf:"varint,2,req,name=amount" json:"amount,omitempty"`
	ScriptHash []byte   `protobuf:"bytes,3,opt,name=script_hash,json=scriptHash" json:"script_hash,omitempty"` // stake credential script hash
	KeyHash    []byte   `protobuf:"bytes,4,opt,name=key_hash,json=keyHash" json:"key_hash,omitempty"`          // stake credential key hash
}

func (x *CardanoTxWithdrawal) Reset() {
	*x = CardanoTxWithdrawal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoTxWithdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoTxWithdrawal) ProtoMessage() {}

func (x *CardanoTxWithdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoTxWithdrawal.ProtoReflect.Descriptor instead.
func (*CardanoTxWithdrawal) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{21}
}

func (x *CardanoTxWithdrawal) GetPath() []uint32 {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *CardanoTxWithdrawal) GetAmount() uint64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *CardanoTxWithdrawal) GetScriptHash() []byte {
	if x != nil {
		return x.ScriptHash
	}
	return nil
}

func (x *CardanoTxWithdrawal) GetKeyHash() []byte {
	if x != nil {
		return x.KeyHash
	}
	return nil
}

// *
// @embed
type CardanoGovernanceRegistrationDelegation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VotingPublicKey []byte  `protobuf:"bytes,1,req,name=voting_public_key,json=votingPublicKey" json:"voting_public_key,omitempty"`
	Weight          *uint32 `protobuf:"varint,2,req,name=weight" json:"weight,omitempty"`
}

func (x *CardanoGovernanceRegistrationDelegation) Reset() {
	*x = CardanoGovernanceRegistrationDelegation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoGovernanceRegistrationDelegation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoGovernanceRegistrationDelegation) ProtoMessage() {}

func (x *CardanoGovernanceRegistrationDelegation) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoGovernanceRegistrationDelegation.ProtoReflect.Descriptor instead.
func (*CardanoGovernanceRegistrationDelegation) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{22}
}

func (x *CardanoGovernanceRegistrationDelegation) GetVotingPublicKey() []byte {
	if x != nil {
		return x.VotingPublicKey
	}
	return nil
}

func (x *CardanoGovernanceRegistrationDelegation) GetWeight() uint32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

// *
// @embed
type CardanoGovernanceRegistrationParametersType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VotingPublicKey         []byte                                     `protobuf:"bytes,1,opt,name=voting_public_key,json=votingPublicKey" json:"voting_public_key,omitempty"`
	StakingPath             []uint32                                   `protobuf:"varint,2,rep,name=staking_path,json=stakingPath" json:"staking_path,omitempty"`
	RewardAddressParameters *CardanoAddressParametersType              `protobuf:"bytes,3,req,name=reward_address_parameters,json=rewardAddressParameters" json:"reward_address_parameters,omitempty"`
	Nonce                   *uint64                                    `protobuf:"varint,4,req,name=nonce" json:"nonce,omitempty"`
	Format                  *CardanoGovernanceRegistrationFormat       `protobuf:"varint,5,opt,name=format,enum=hw.trezor.messages.cardano.CardanoGovernanceRegistrationFormat,def=0" json:"format,omitempty"`
	Delegations             []*CardanoGovernanceRegistrationDelegation `protobuf:"bytes,6,rep,name=delegations" json:"delegations,omitempty"` // mutually exclusive with voting_public_key; max 32 delegations
	VotingPurpose           *uint64                                    `protobuf:"varint,7,opt,name=voting_purpose,json=votingPurpose" json:"voting_purpose,omitempty"`
}

// Default values for CardanoGovernanceRegistrationParametersType fields.
const (
	Default_CardanoGovernanceRegistrationParametersType_Format = CardanoGovernanceRegistrationFormat_CIP15
)

func (x *CardanoGovernanceRegistrationParametersType) Reset() {
	*x = CardanoGovernanceRegistrationParametersType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoGovernanceRegistrationParametersType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoGovernanceRegistrationParametersType) ProtoMessage() {}

func (x *CardanoGovernanceRegistrationParametersType) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoGovernanceRegistrationParametersType.ProtoReflect.Descriptor instead.
func (*CardanoGovernanceRegistrationParametersType) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{23}
}

func (x *CardanoGovernanceRegistrationParametersType) GetVotingPublicKey() []byte {
	if x != nil {
		return x.VotingPublicKey
	}
	return nil
}

func (x *CardanoGovernanceRegistrationParametersType) GetStakingPath() []uint32 {
	if x != nil {
		return x.StakingPath
	}
	return nil
}

func (x *CardanoGovernanceRegistrationParametersType) GetRewardAddressParameters() *CardanoAddressParametersType {
	if x != nil {
		return x.RewardAddressParameters
	}
	return nil
}

func (x *CardanoGovernanceRegistrationParametersType) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return 0
}

func (x *CardanoGovernanceRegistrationParametersType) GetFormat() CardanoGovernanceRegistrationFormat {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return Default_CardanoGovernanceRegistrationParametersType_Format
}

func (x *CardanoGovernanceRegistrationParametersType) GetDelegations() []*CardanoGovernanceRegistrationDelegation {
	if x != nil {
		return x.Delegations
	}
	return nil
}

func (x *CardanoGovernanceRegistrationParametersType) GetVotingPurpose() uint64 {
	if x != nil && x.VotingPurpose != nil {
		return *x.VotingPurpose
	}
	return 0
}

// *
// Request: Transaction auxiliary data
// @next CardanoTxItemAck
// @next CardanoTxAuxiliaryDataSupplement
type CardanoTxAuxiliaryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GovernanceRegistrationParameters *CardanoGovernanceRegistrationParametersType `protobuf:"bytes,1,opt,name=governance_registration_parameters,json=governanceRegistrationParameters" json:"governance_registration_parameters,omitempty"`
	Hash                             []byte                                       `protobuf:"bytes,2,opt,name=hash" json:"hash,omitempty"`
}

func (x *CardanoTxAuxiliaryData) Reset() {
	*x = CardanoTxAuxiliaryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoTxAuxiliaryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoTxAuxiliaryData) ProtoMessage() {}

func (x *CardanoTxAuxiliaryData) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoTxAuxiliaryData.ProtoReflect.Descriptor instead.
func (*CardanoTxAuxiliaryData) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{24}
}

func (x *CardanoTxAuxiliaryData) GetGovernanceRegistrationParameters() *CardanoGovernanceRegistrationParametersType {
	if x != nil {
		return x.GovernanceRegistrationParameters
	}
	return nil
}

func (x *CardanoTxAuxiliaryData) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

// *
// Request: Transaction mint
// @next CardanoTxItemAck
type CardanoTxMint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetGroupsCount *uint32 `protobuf:"varint,1,req,name=asset_groups_count,json=assetGroupsCount" json:"asset_groups_count,omitempty"`
}

func (x *CardanoTxMint) Reset() {
	*x = CardanoTxMint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoTxMint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoTxMint) ProtoMessage() {}

func (x *CardanoTxMint) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoTxMint.ProtoReflect.Descriptor instead.
func (*CardanoTxMint) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{25}
}

func (x *CardanoTxMint) GetAssetGroupsCount() uint32 {
	if x != nil && x.AssetGroupsCount != nil {
		return *x.AssetGroupsCount
	}
	return 0
}

// *
// Request: Transaction collateral input data
// @next CardanoTxItemAck
type CardanoTxCollateralInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrevHash  []byte  `protobuf:"bytes,1,req,name=prev_hash,json=prevHash" json:"prev_hash,omitempty"`
	PrevIndex *uint32 `protobuf:"varint,2,req,name=prev_index,json=prevIndex" json:"prev_index,omitempty"`
}

func (x *CardanoTxCollateralInput) Reset() {
	*x = CardanoTxCollateralInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoTxCollateralInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoTxCollateralInput) ProtoMessage() {}

func (x *CardanoTxCollateralInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoTxCollateralInput.ProtoReflect.Descriptor instead.
func (*CardanoTxCollateralInput) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{26}
}

func (x *CardanoTxCollateralInput) GetPrevHash() []byte {
	if x != nil {
		return x.PrevHash
	}
	return nil
}

func (x *CardanoTxCollateralInput) GetPrevIndex() uint32 {
	if x != nil && x.PrevIndex != nil {
		return *x.PrevIndex
	}
	return 0
}

// *
// Request: Transaction required signer
// @next CardanoTxItemAck
type CardanoTxRequiredSigner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyHash []byte   `protobuf:"bytes,1,opt,name=key_hash,json=keyHash" json:"key_hash,omitempty"`
	KeyPath []uint32 `protobuf:"varint,2,rep,name=key_path,json=keyPath" json:"key_path,omitempty"`
}

func (x *CardanoTxRequiredSigner) Reset() {
	*x = CardanoTxRequiredSigner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoTxRequiredSigner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoTxRequiredSigner) ProtoMessage() {}

func (x *CardanoTxRequiredSigner) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoTxRequiredSigner.ProtoReflect.Descriptor instead.
func (*CardanoTxRequiredSigner) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{27}
}

func (x *CardanoTxRequiredSigner) GetKeyHash() []byte {
	if x != nil {
		return x.KeyHash
	}
	return nil
}

func (x *CardanoTxRequiredSigner) GetKeyPath() []uint32 {
	if x != nil {
		return x.KeyPath
	}
	return nil
}

// *
// Request: Transaction reference input data
// @next CardanoTxItemAck
type CardanoTxReferenceInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrevHash  []byte  `protobuf:"bytes,1,req,name=prev_hash,json=prevHash" json:"prev_hash,omitempty"`
	PrevIndex *uint32 `protobuf:"varint,2,req,name=prev_index,json=prevIndex" json:"prev_index,omitempty"`
}

func (x *CardanoTxReferenceInput) Reset() {
	*x = CardanoTxReferenceInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoTxReferenceInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoTxReferenceInput) ProtoMessage() {}

func (x *CardanoTxReferenceInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoTxReferenceInput.ProtoReflect.Descriptor instead.
func (*CardanoTxReferenceInput) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{28}
}

func (x *CardanoTxReferenceInput) GetPrevHash() []byte {
	if x != nil {
		return x.PrevHash
	}
	return nil
}

func (x *CardanoTxReferenceInput) GetPrevIndex() uint32 {
	if x != nil && x.PrevIndex != nil {
		return *x.PrevIndex
	}
	return 0
}

// *
// Response: Acknowledgement of the last transaction item received
// @next CardanoTxInput
// @next CardanoTxOutput
// @next CardanoAssetGroup
// @next CardanoToken
// @next CardanoTxInlineDatumChunk
// @next CardanoTxReferenceScriptChunk
// @next CardanoTxCertificate
// @next CardanoPoolOwner
// @next CardanoPoolRelayParameters
// @next CardanoTxWithdrawal
// @next CardanoTxAuxiliaryData
// @next CardanoTxWitnessRequest
// @next CardanoTxMint
// @next CardanoTxCollateralInput
// @next CardanoTxRequiredSigner
// @next CardanoTxReferenceInput
type CardanoTxItemAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CardanoTxItemAck) Reset() {
	*x = CardanoTxItemAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoTxItemAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoTxItemAck) ProtoMessage() {}

func (x *CardanoTxItemAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoTxItemAck.ProtoReflect.Descriptor instead.
func (*CardanoTxItemAck) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{29}
}

// *
// Response: Device-generated supplement for the auxiliary data
// @next CardanoTxWitnessRequest
type CardanoTxAuxiliaryDataSupplement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                *CardanoTxAuxiliaryDataSupplementType `protobuf:"varint,1,req,name=type,enum=hw.trezor.messages.cardano.CardanoTxAuxiliaryDataSupplementType" json:"type,omitempty"`
	AuxiliaryDataHash   []byte                                `protobuf:"bytes,2,opt,name=auxiliary_data_hash,json=auxiliaryDataHash" json:"auxiliary_data_hash,omitempty"`
	GovernanceSignature []byte                                `protobuf:"bytes,3,opt,name=governance_signature,json=governanceSignature" json:"governance_signature,omitempty"`
}

func (x *CardanoTxAuxiliaryDataSupplement) Reset() {
	*x = CardanoTxAuxiliaryDataSupplement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoTxAuxiliaryDataSupplement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoTxAuxiliaryDataSupplement) ProtoMessage() {}

func (x *CardanoTxAuxiliaryDataSupplement) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoTxAuxiliaryDataSupplement.ProtoReflect.Descriptor instead.
func (*CardanoTxAuxiliaryDataSupplement) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{30}
}

func (x *CardanoTxAuxiliaryDataSupplement) GetType() CardanoTxAuxiliaryDataSupplementType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CardanoTxAuxiliaryDataSupplementType_NONE
}

func (x *CardanoTxAuxiliaryDataSupplement) GetAuxiliaryDataHash() []byte {
	if x != nil {
		return x.AuxiliaryDataHash
	}
	return nil
}

func (x *CardanoTxAuxiliaryDataSupplement) GetGovernanceSignature() []byte {
	if x != nil {
		return x.GovernanceSignature
	}
	return nil
}

// *
// Request: Ask the device to sign a witness path
// @next CardanoTxWitnessResponse
type CardanoTxWitnessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path []uint32 `protobuf:"varint,1,rep,name=path" json:"path,omitempty"`
}

func (x *CardanoTxWitnessRequest) Reset() {
	*x = CardanoTxWitnessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoTxWitnessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoTxWitnessRequest) ProtoMessage() {}

func (x *CardanoTxWitnessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoTxWitnessRequest.ProtoReflect.Descriptor instead.
func (*CardanoTxWitnessRequest) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{31}
}

func (x *CardanoTxWitnessRequest) GetPath() []uint32 {
	if x != nil {
		return x.Path
	}
	return nil
}

// *
// Response: Signature corresponding to the requested witness path
// @next CardanoTxWitnessRequest
// @next CardanoTxHostAck
type CardanoTxWitnessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      *CardanoTxWitnessType `protobuf:"varint,1,req,name=type,enum=hw.trezor.messages.cardano.CardanoTxWitnessType" json:"type,omitempty"`
	PubKey    []byte                `protobuf:"bytes,2,req,name=pub_key,json=pubKey" json:"pub_key,omitempty"`
	Signature []byte                `protobuf:"bytes,3,req,name=signature" json:"signature,omitempty"`
	ChainCode []byte                `protobuf:"bytes,4,opt,name=chain_code,json=chainCode" json:"chain_code,omitempty"`
}

func (x *CardanoTxWitnessResponse) Reset() {
	*x = CardanoTxWitnessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoTxWitnessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoTxWitnessResponse) ProtoMessage() {}

func (x *CardanoTxWitnessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoTxWitnessResponse.ProtoReflect.Descriptor instead.
func (*CardanoTxWitnessResponse) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{32}
}

func (x *CardanoTxWitnessResponse) GetType() CardanoTxWitnessType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CardanoTxWitnessType_BYRON_WITNESS
}

func (x *CardanoTxWitnessResponse) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *CardanoTxWitnessResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *CardanoTxWitnessResponse) GetChainCode() []byte {
	if x != nil {
		return x.ChainCode
	}
	return nil
}

// *
// Request: Acknowledgement of the last response received
// @next CardanoTxBodyHash
// @next CardanoSignTxFinished
type CardanoTxHostAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CardanoTxHostAck) Reset() {
	*x = CardanoTxHostAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoTxHostAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoTxHostAck) ProtoMessage() {}

func (x *CardanoTxHostAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoTxHostAck.ProtoReflect.Descriptor instead.
func (*CardanoTxHostAck) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{33}
}

// *
// Response: Hash of the serialized transaction body
// @next CardanoTxHostAck
type CardanoTxBodyHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash []byte `protobuf:"bytes,1,req,name=tx_hash,json=txHash" json:"tx_hash,omitempty"`
}

func (x *CardanoTxBodyHash) Reset() {
	*x = CardanoTxBodyHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoTxBodyHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoTxBodyHash) ProtoMessage() {}

func (x *CardanoTxBodyHash) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoTxBodyHash.ProtoReflect.Descriptor instead.
func (*CardanoTxBodyHash) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{34}
}

func (x *CardanoTxBodyHash) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

// *
// Response: Confirm the successful completion of the signing process
// @end
type CardanoSignTxFinished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CardanoSignTxFinished) Reset() {
	*x = CardanoSignTxFinished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_cardano_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoSignTxFinished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoSignTxFinished) ProtoMessage() {}

func (x *CardanoSignTxFinished) ProtoReflect() protoreflect.Message {
	mi := &file_messages_cardano_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoSignTxFinished.ProtoReflect.Descriptor instead.
func (*CardanoSignTxFinished) Descriptor() ([]byte, []int) {
	return file_messages_cardano_proto_rawDescGZIP(), []int{35}
}

var File_messages_cardano_proto protoreflect.FileDescriptor

var file_messages_cardano_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2d, 0x63, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65,
	0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x1a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2d, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x01, 0x0a, 0x1c,
	0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xef, 0x02, 0x0a, 0x13, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x47, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x68, 0x77,
	0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65,
	0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x07, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08,
	0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x68, 0x65, 0x72, 0x65, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x48, 0x65,
	0x72, 0x65, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0xaa, 0x02, 0x0a, 0x1a, 0x43, 0x61, 0x72, 0x64,
	0x61, 0x6e, 0x6f, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a,
	0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x61, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x4e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12,
	0x67, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65,
	0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x48, 0x61, 0x73, 0x68, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x5a, 0x0a, 0x0f, 0x64, 0x65, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x31, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x0a, 0x17, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x4e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x22, 0xaf, 0x03, 0x0a, 0x1c, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x51, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65,
	0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4e, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x69, 0x0a, 0x13, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x11, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x11, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x61,
	0x73, 0x68, 0x22, 0xc8, 0x02, 0x0a, 0x11, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6d,
	0x61, 0x67, 0x69, 0x63, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x5a, 0x0a, 0x0f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x68, 0x77, 0x2e,
	0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x44,
	0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x64,
	0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2a, 0x0a,
	0x0e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x13, 0x43, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x12, 0x5a, 0x0a, 0x0f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x68, 0x77, 0x2e,
	0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x44,
	0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x64,
	0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x61, 0x0a,
	0x10, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x78, 0x70, 0x75, 0x62, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x04, 0x78, 0x70, 0x75, 0x62, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x48, 0x44, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x22, 0x97, 0x08, 0x0a, 0x11, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x53, 0x69, 0x67, 0x6e,
	0x54, 0x78, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x53, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x68,
	0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x54, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b,
	0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x61, 0x67,
	0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65,
	0x18, 0x06, 0x20, 0x02, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x74, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x2d, 0x0a,
	0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x61, 0x73,
	0x5f, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0a, 0x20, 0x02, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x41, 0x75, 0x78, 0x69, 0x6c, 0x69,
	0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x34, 0x0a, 0x16, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x14, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x17, 0x6d, 0x69, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x41, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x68, 0x77,
	0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33,
	0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x61, 0x73, 0x68, 0x12, 0x36, 0x0a,
	0x17, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x15,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x12, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x15, 0x68,
	0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x13, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x12, 0x37, 0x0a, 0x16, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x14, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4c, 0x0a, 0x0e, 0x43, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x72, 0x65, 0x76, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x08, 0x70, 0x72, 0x65, 0x76, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65,
	0x76, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x72, 0x65, 0x76, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xc5, 0x03, 0x0a, 0x0f, 0x43, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x67, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x61, 0x74, 0x75, 0x6d,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x64, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x3a, 0x0c, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x4c, 0x45, 0x47, 0x41,
	0x43, 0x59, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2d, 0x0a, 0x11, 0x69, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x44, 0x61, 0x74, 0x75, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a, 0x15, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x13, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x53, 0x0a, 0x11, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x71, 0x0a, 0x0c, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x0e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x6d, 0x69,
	0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2f, 0x0a, 0x19, 0x43, 0x61, 0x72, 0x64,
	0x61, 0x6e, 0x6f, 0x54, 0x78, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x75, 0x6d,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x33, 0x0a, 0x1d, 0x43, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x54, 0x78, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x66,
	0x0a, 0x10, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x50, 0x6f, 0x6f, 0x6c, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x48, 0x61, 0x73, 0x68, 0x22, 0xd9, 0x01, 0x0a, 0x1a, 0x43, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x3f, 0x0a, 0x17, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x50, 0x6f, 0x6f,
	0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x22, 0x9a, 0x03, 0x0a, 0x19, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x50,
	0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x72,
	0x66, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c,
	0x52, 0x0a, 0x76, 0x72, 0x66, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x04, 0x52, 0x0f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x65,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x02, 0x28, 0x04, 0x52,
	0x11, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x77,
	0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xa2, 0x02, 0x0a, 0x14, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x54, 0x78, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65,
	0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x5e, 0x0a, 0x0f, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x70, 0x6f, 0x6f, 0x6c, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x48, 0x61, 0x73, 0x68, 0x22, 0x7d, 0x0a, 0x13, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x54, 0x78, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x22, 0x6d, 0x0a, 0x27, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x11, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0f, 0x76, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0xf6, 0x03, 0x0a, 0x2b, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x74, 0x0a, 0x19, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f,
	0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x17, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x5e,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f,
	0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x61, 0x6e, 0x6f, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a,
	0x05, 0x43, 0x49, 0x50, 0x31, 0x35, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x65,
	0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x76,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x22, 0xc4, 0x01, 0x0a,
	0x16, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x54, 0x78, 0x41, 0x75, 0x78, 0x69, 0x6c, 0x69,
	0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x95, 0x01, 0x0a, 0x22, 0x67, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x20, 0x67,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x22, 0x3d, 0x0a, 0x0d, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x54, 0x78,
	0x4d, 0x69, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x10, 0x61, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x56, 0x0a, 0x18, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x54, 0x78, 0x43,
	0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x65, 0x76, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x72, 0x65, 0x76, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x4f, 0x0a, 0x17, 0x43, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x22, 0x55, 0x0a, 0x17, 0x43,
	0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x54, 0x78, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x76, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x12, 0x0a, 0x10, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x54, 0x78, 0x49,
	0x74, 0x65, 0x6d, 0x41, 0x63, 0x6b, 0x22, 0xdb, 0x01, 0x0a, 0x20, 0x43, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x54, 0x78, 0x41, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x68, 0x77, 0x2e, 0x74,
	0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x54, 0x78,
	0x41, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11,
	0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x31, 0x0a, 0x14, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x13, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x2d, 0x0a, 0x17, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x54,
	0x78, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x22, 0xb6, 0x01, 0x0a, 0x18, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x54,
	0x78, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x61, 0x6e, 0x6f, 0x54, 0x78, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x12, 0x0a, 0x10,
	0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x54, 0x78, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x63, 0x6b,
	0x22, 0x2c, 0x0a, 0x11, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x54, 0x78, 0x42, 0x6f, 0x64,
	0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x22, 0x17,
	0x0a, 0x15, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x78, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x2a, 0x42, 0x0a, 0x15, 0x43, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x49, 0x43, 0x41, 0x52, 0x55, 0x53, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x43, 0x41, 0x52,
	0x55, 0x53, 0x5f, 0x54, 0x52, 0x45, 0x5a, 0x4f, 0x52, 0x10, 0x02, 0x2a, 0xd2, 0x01, 0x0a, 0x12,
	0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x41, 0x53, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x43,
	0x52, 0x49, 0x50, 0x54, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53,
	0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x05, 0x12,
	0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x06, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x5f, 0x53, 0x43,
	0x52, 0x49, 0x50, 0x54, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x59, 0x52, 0x4f, 0x4e, 0x10,
	0x08, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x0e, 0x12, 0x11, 0x0a,
	0x0d, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x0f,
	0x2a, 0x6f, 0x0a, 0x17, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x4e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x55, 0x42, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x5f,
	0x4f, 0x46, 0x5f, 0x4b, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x48, 0x45, 0x52, 0x45, 0x41, 0x46, 0x54, 0x45, 0x52, 0x10,
	0x05, 0x2a, 0x4b, 0x0a, 0x24, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x48, 0x61, 0x73, 0x68, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x44,
	0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x45, 0x43, 0x48, 0x33, 0x32, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x2a, 0x47,
	0x0a, 0x22, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x4c, 0x45,
	0x47, 0x41, 0x43, 0x59, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x50, 0x5f, 0x42, 0x41,
	0x42, 0x42, 0x41, 0x47, 0x45, 0x10, 0x01, 0x2a, 0x7d, 0x0a, 0x16, 0x43, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41,
	0x4b, 0x45, 0x5f, 0x44, 0x45, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41,
	0x4b, 0x45, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x58, 0x0a, 0x14, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x49, 0x50,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53,
	0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x50, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02,
	0x2a, 0x57, 0x0a, 0x24, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x54, 0x78, 0x41, 0x75, 0x78,
	0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x01, 0x2a, 0x3b, 0x0a, 0x23, 0x43, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x09, 0x0a, 0x05, 0x43, 0x49, 0x50, 0x31, 0x35, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43,
	0x49, 0x50, 0x33, 0x36, 0x10, 0x01, 0x2a, 0x82, 0x01, 0x0a, 0x14, 0x43, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x54, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x4f,
	0x4c, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x53, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x53, 0x49, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4c, 0x55, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x3e, 0x0a, 0x14, 0x43,
	0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x54, 0x78, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x59, 0x52, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x54,
	0x4e, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x45,
	0x59, 0x5f, 0x57, 0x49, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x01, 0x42, 0x3b, 0x0a, 0x23, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x74,
	0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x42, 0x14, 0x54, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
}

var (
	file_messages_cardano_proto_rawDescOnce sync.Once
	file_messages_cardano_proto_rawDescData = file_messages_cardano_proto_rawDesc
)

func file_messages_cardano_proto_rawDescGZIP() []byte {
	file_messages_cardano_proto_rawDescOnce.Do(func() {
		file_messages_cardano_proto_rawDescData = protoimpl.X.CompressGZIP(file_messages_cardano_proto_rawDescData)
	})
	return file_messages_cardano_proto_rawDescData
}

var file_messages_cardano_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_messages_cardano_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_messages_cardano_proto_goTypes = []interface{}{
	(CardanoDerivationType)(0),                          // 0: hw.trezor.messages.cardano.CardanoDerivationType
	(CardanoAddressType)(0),                             // 1: hw.trezor.messages.cardano.CardanoAddressType
	(CardanoNativeScriptType)(0),                        // 2: hw.trezor.messages.cardano.CardanoNativeScriptType
	(CardanoNativeScriptHashDisplayFormat)(0),           // 3: hw.trezor.messages.cardano.CardanoNativeScriptHashDisplayFormat
	(CardanoTxOutputSerializationFormat)(0),             // 4: hw.trezor.messages.cardano.CardanoTxOutputSerializationFormat
	(CardanoCertificateType)(0),                         // 5: hw.trezor.messages.cardano.CardanoCertificateType
	(CardanoPoolRelayType)(0),                           // 6: hw.trezor.messages.cardano.CardanoPoolRelayType
	(CardanoTxAuxiliaryDataSupplementType)(0),           // 7: hw.trezor.messages.cardano.CardanoTxAuxiliaryDataSupplementType
	(CardanoGovernanceRegistrationFormat)(0),            // 8: hw.trezor.messages.cardano.CardanoGovernanceRegistrationFormat
	(CardanoTxSigningMode)(0),                           // 9: hw.trezor.messages.cardano.CardanoTxSigningMode
	(CardanoTxWitnessType)(0),                           // 10: hw.trezor.messages.cardano.CardanoTxWitnessType
	(*CardanoBlockchainPointerType)(nil),                // 11: hw.trezor.messages.cardano.CardanoBlockchainPointerType
	(*CardanoNativeScript)(nil),                         // 12: hw.trezor.messages.cardano.CardanoNativeScript
	(*CardanoGetNativeScriptHash)(nil),                  // 13: hw.trezor.messages.cardano.CardanoGetNativeScriptHash
	(*CardanoNativeScriptHash)(nil),                     // 14: hw.trezor.messages.cardano.CardanoNativeScriptHash
	(*CardanoAddressParametersType)(nil),                // 15: hw.trezor.messages.cardano.CardanoAddressParametersType
	(*CardanoGetAddress)(nil),                           // 16: hw.trezor.messages.cardano.CardanoGetAddress
	(*CardanoAddress)(nil),                              // 17: hw.trezor.messages.cardano.CardanoAddress
	(*CardanoGetPublicKey)(nil),                         // 18: hw.trezor.messages.cardano.CardanoGetPublicKey
	(*CardanoPublicKey)(nil),                            // 19: hw.trezor.messages.cardano.CardanoPublicKey
	(*CardanoSignTxInit)(nil),                           // 20: hw.trezor.messages.cardano.CardanoSignTxInit
	(*CardanoTxInput)(nil),                              // 21: hw.trezor.messages.cardano.CardanoTxInput
	(*CardanoTxOutput)(nil),                             // 22: hw.trezor.messages.cardano.CardanoTxOutput
	(*CardanoAssetGroup)(nil),                           // 23: hw.trezor.messages.cardano.CardanoAssetGroup
	(*CardanoToken)(nil),                                // 24: hw.trezor.messages.cardano.CardanoToken
	(*CardanoTxInlineDatumChunk)(nil),                   // 25: hw.trezor.messages.cardano.CardanoTxInlineDatumChunk
	(*CardanoTxReferenceScriptChunk)(nil),               // 26: hw.trezor.messages.cardano.CardanoTxReferenceScriptChunk
	(*CardanoPoolOwner)(nil),                            // 27: hw.trezor.messages.cardano.CardanoPoolOwner
	(*CardanoPoolRelayParameters)(nil),                  // 28: hw.trezor.messages.cardano.CardanoPoolRelayParameters
	(*CardanoPoolMetadataType)(nil),                     // 29: hw.trezor.messages.cardano.CardanoPoolMetadataType
	(*CardanoPoolParametersType)(nil),                   // 30: hw.trezor.messages.cardano.CardanoPoolParametersType
	(*CardanoTxCertificate)(nil),                        // 31: hw.trezor.messages.cardano.CardanoTxCertificate
	(*CardanoTxWithdrawal)(nil),                         // 32: hw.trezor.messages.cardano.CardanoTxWithdrawal
	(*CardanoGovernanceRegistrationDelegation)(nil),     // 33: hw.trezor.messages.cardano.CardanoGovernanceRegistrationDelegation
	(*CardanoGovernanceRegistrationParametersType)(nil), // 34: hw.trezor.messages.cardano.CardanoGovernanceRegistrationParametersType
	(*CardanoTxAuxiliaryData)(nil),                      // 35: hw.trezor.messages.cardano.CardanoTxAuxiliaryData
	(*CardanoTxMint)(nil),                               // 36: hw.trezor.messages.cardano.CardanoTxMint
	(*CardanoTxCollateralInput)(nil),                    // 37: hw.trezor.messages.cardano.CardanoTxCollateralInput
	(*CardanoTxRequiredSigner)(nil),                     // 38: hw.trezor.messages.cardano.CardanoTxRequiredSigner
	(*CardanoTxReferenceInput)(nil),                     // 39: hw.trezor.messages.cardano.CardanoTxReferenceInput
	(*CardanoTxItemAck)(nil),                            // 40: hw.trezor.messages.cardano.CardanoTxItemAck
	(*CardanoTxAuxiliaryDataSupplement)(nil),            // 41: hw.trezor.messages.cardano.CardanoTxAuxiliaryDataSupplement
	(*CardanoTxWitnessRequest)(nil),                     // 42: hw.trezor.messages.cardano.CardanoTxWitnessRequest
	(*CardanoTxWitnessResponse)(nil),                    // 43: hw.trezor.messages.cardano.CardanoTxWitnessResponse
	(*CardanoTxHostAck)(nil),                            // 44: hw.trezor.messages.cardano.CardanoTxHostAck
	(*CardanoTxBodyHash)(nil),                           // 45: hw.trezor.messages.cardano.CardanoTxBodyHash
	(*CardanoSignTxFinished)(nil),                       // 46: hw.trezor.messages.cardano.CardanoSignTxFinished
	(*HDNodeType)(nil),                                  // 47: hw.trezor.messages.common.HDNodeType
}
var file_messages_cardano_proto_depIdxs = []int32{
	2,  // 0: hw.trezor.messages.cardano.CardanoNativeScript.type:type_name -> hw.trezor.messages.cardano.CardanoNativeScriptType
	12, // 1: hw.trezor.messages.cardano.CardanoNativeScript.scripts:type_name -> hw.trezor.messages.cardano.CardanoNativeScript
	12, // 2: hw.trezor.messages.cardano.CardanoGetNativeScriptHash.script:type_name -> hw.trezor.messages.cardano.CardanoNativeScript
	3,  // 3: hw.trezor.messages.cardano.CardanoGetNativeScriptHash.display_format:type_name -> hw.trezor.messages.cardano.CardanoNativeScriptHashDisplayFormat
	0,  // 4: hw.trezor.messages.cardano.CardanoGetNativeScriptHash.derivation_type:type_name -> hw.trezor.messages.cardano.CardanoDerivationType
	1,  // 5: hw.trezor.messages.cardano.CardanoAddressParametersType.address_type:type_name -> hw.trezor.messages.cardano.CardanoAddressType
	11, // 6: hw.trezor.messages.cardano.CardanoAddressParametersType.certificate_pointer:type_name -> hw.trezor.messages.cardano.CardanoBlockchainPointerType
	15, // 7: hw.trezor.messages.cardano.CardanoGetAddress.address_parameters:type_name -> hw.trezor.messages.cardano.CardanoAddressParametersType
	0,  // 8: hw.trezor.messages.cardano.CardanoGetAddress.derivation_type:type_name -> hw.trezor.messages.cardano.CardanoDerivationType
	0,  // 9: hw.trezor.messages.cardano.CardanoGetPublicKey.derivation_type:type_name -> hw.trezor.messages.cardano.CardanoDerivationType
	47, // 10: hw.trezor.messages.cardano.CardanoPublicKey.node:type_name -> hw.trezor.messages.common.HDNodeType
	9,  // 11: hw.trezor.messages.cardano.CardanoSignTxInit.signing_mode:type_name -> hw.trezor.messages.cardano.CardanoTxSigningMode
	0,  // 12: hw.trezor.messages.cardano.CardanoSignTxInit.derivation_type:type_name -> hw.trezor.messages.cardano.CardanoDerivationType
	15, // 13: hw.trezor.messages.cardano.CardanoTxOutput.address_parameters:type_name -> hw.trezor.messages.cardano.CardanoAddressParametersType
	4,  // 14: hw.trezor.messages.cardano.CardanoTxOutput.format:type_name -> hw.trezor.messages.cardano.CardanoTxOutputSerializationFormat
	6,  // 15: hw.trezor.messages.cardano.CardanoPoolRelayParameters.type:type_name -> hw.trezor.messages.cardano.CardanoPoolRelayType
	29, // 16: hw.trezor.messages.cardano.CardanoPoolParametersType.metadata:type_name -> hw.trezor.messages.cardano.CardanoPoolMetadataType
	5,  // 17: hw.trezor.messages.cardano.CardanoTxCertificate.type:type_name -> hw.trezor.messages.cardano.CardanoCertificateType
	30, // 18: hw.trezor.messages.cardano.CardanoTxCertificate.pool_parameters:type_name -> hw.trezor.messages.cardano.CardanoPoolParametersType
	15, // 19: hw.trezor.messages.cardano.CardanoGovernanceRegistrationParametersType.reward_address_parameters:type_name -> hw.trezor.messages.cardano.CardanoAddressParametersType
	8,  // 20: hw.trezor.messages.cardano.CardanoGovernanceRegistrationParametersType.format:type_name -> hw.trezor.messages.cardano.CardanoGovernanceRegistrationFormat
	33, // 21: hw.trezor.messages.cardano.CardanoGovernanceRegistrationParametersType.delegations:type_name -> hw.trezor.messages.cardano.CardanoGovernanceRegistrationDelegation
	34, // 22: hw.trezor.messages.cardano.CardanoTxAuxiliaryData.governance_registration_parameters:type_name -> hw.trezor.messages.cardano.CardanoGovernanceRegistrationParametersType
	7,  // 23: hw.trezor.messages.cardano.CardanoTxAuxiliaryDataSupplement.type:type_name -> hw.trezor.messages.cardano.CardanoTxAuxiliaryDataSupplementType
	10, // 24: hw.trezor.messages.cardano.CardanoTxWitnessResponse.type:type_name -> hw.trezor.messages.cardano.CardanoTxWitnessType
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_messages_cardano_proto_init() }
func file_messages_cardano_proto_init() {
	if File_messages_cardano_proto != nil {
		return
	}
	file_messages_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_messages_cardano_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoBlockchainPointerType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoNativeScript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoGetNativeScriptHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoNativeScriptHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoAddressParametersType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoGetAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoGetPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoSignTxInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoTxInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoTxOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoAssetGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoTxInlineDatumChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoTxReferenceScriptChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoPoolOwner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoPoolRelayParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoPoolMetadataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoPoolParametersType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoTxCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoTxWithdrawal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoGovernanceRegistrationDelegation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoGovernanceRegistrationParametersType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoTxAuxiliaryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoTxMint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoTxCollateralInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoTxRequiredSigner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoTxReferenceInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoTxItemAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoTxAuxiliaryDataSupplement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoTxWitnessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoTxWitnessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoTxHostAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoTxBodyHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_cardano_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoSignTxFinished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messages_cardano_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_cardano_proto_goTypes,
		DependencyIndexes: file_messages_cardano_proto_depIdxs,
		EnumInfos:         file_messages_cardano_proto_enumTypes,
		MessageInfos:      file_messages_cardano_proto_msgTypes,
	}.Build()
	File_messages_cardano_proto = out.File
	file_messages_cardano_proto_rawDesc = nil
	file_messages_cardano_proto_goTypes = nil
	file_messages_cardano_proto_depIdxs = nil
}

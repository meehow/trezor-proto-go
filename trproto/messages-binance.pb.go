// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: messages-binance.proto

package trproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BinanceOrderMsg_BinanceOrderType int32

const (
	BinanceOrderMsg_OT_UNKNOWN  BinanceOrderMsg_BinanceOrderType = 0
	BinanceOrderMsg_MARKET      BinanceOrderMsg_BinanceOrderType = 1
	BinanceOrderMsg_LIMIT       BinanceOrderMsg_BinanceOrderType = 2
	BinanceOrderMsg_OT_RESERVED BinanceOrderMsg_BinanceOrderType = 3
)

// Enum value maps for BinanceOrderMsg_BinanceOrderType.
var (
	BinanceOrderMsg_BinanceOrderType_name = map[int32]string{
		0: "OT_UNKNOWN",
		1: "MARKET",
		2: "LIMIT",
		3: "OT_RESERVED",
	}
	BinanceOrderMsg_BinanceOrderType_value = map[string]int32{
		"OT_UNKNOWN":  0,
		"MARKET":      1,
		"LIMIT":       2,
		"OT_RESERVED": 3,
	}
)

func (x BinanceOrderMsg_BinanceOrderType) Enum() *BinanceOrderMsg_BinanceOrderType {
	p := new(BinanceOrderMsg_BinanceOrderType)
	*p = x
	return p
}

func (x BinanceOrderMsg_BinanceOrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BinanceOrderMsg_BinanceOrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_binance_proto_enumTypes[0].Descriptor()
}

func (BinanceOrderMsg_BinanceOrderType) Type() protoreflect.EnumType {
	return &file_messages_binance_proto_enumTypes[0]
}

func (x BinanceOrderMsg_BinanceOrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BinanceOrderMsg_BinanceOrderType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BinanceOrderMsg_BinanceOrderType(num)
	return nil
}

// Deprecated: Use BinanceOrderMsg_BinanceOrderType.Descriptor instead.
func (BinanceOrderMsg_BinanceOrderType) EnumDescriptor() ([]byte, []int) {
	return file_messages_binance_proto_rawDescGZIP(), []int{7, 0}
}

type BinanceOrderMsg_BinanceOrderSide int32

const (
	BinanceOrderMsg_SIDE_UNKNOWN BinanceOrderMsg_BinanceOrderSide = 0
	BinanceOrderMsg_BUY          BinanceOrderMsg_BinanceOrderSide = 1
	BinanceOrderMsg_SELL         BinanceOrderMsg_BinanceOrderSide = 2
)

// Enum value maps for BinanceOrderMsg_BinanceOrderSide.
var (
	BinanceOrderMsg_BinanceOrderSide_name = map[int32]string{
		0: "SIDE_UNKNOWN",
		1: "BUY",
		2: "SELL",
	}
	BinanceOrderMsg_BinanceOrderSide_value = map[string]int32{
		"SIDE_UNKNOWN": 0,
		"BUY":          1,
		"SELL":         2,
	}
)

func (x BinanceOrderMsg_BinanceOrderSide) Enum() *BinanceOrderMsg_BinanceOrderSide {
	p := new(BinanceOrderMsg_BinanceOrderSide)
	*p = x
	return p
}

func (x BinanceOrderMsg_BinanceOrderSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BinanceOrderMsg_BinanceOrderSide) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_binance_proto_enumTypes[1].Descriptor()
}

func (BinanceOrderMsg_BinanceOrderSide) Type() protoreflect.EnumType {
	return &file_messages_binance_proto_enumTypes[1]
}

func (x BinanceOrderMsg_BinanceOrderSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BinanceOrderMsg_BinanceOrderSide) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BinanceOrderMsg_BinanceOrderSide(num)
	return nil
}

// Deprecated: Use BinanceOrderMsg_BinanceOrderSide.Descriptor instead.
func (BinanceOrderMsg_BinanceOrderSide) EnumDescriptor() ([]byte, []int) {
	return file_messages_binance_proto_rawDescGZIP(), []int{7, 1}
}

type BinanceOrderMsg_BinanceTimeInForce int32

const (
	BinanceOrderMsg_TIF_UNKNOWN  BinanceOrderMsg_BinanceTimeInForce = 0
	BinanceOrderMsg_GTE          BinanceOrderMsg_BinanceTimeInForce = 1
	BinanceOrderMsg_TIF_RESERVED BinanceOrderMsg_BinanceTimeInForce = 2
	BinanceOrderMsg_IOC          BinanceOrderMsg_BinanceTimeInForce = 3
)

// Enum value maps for BinanceOrderMsg_BinanceTimeInForce.
var (
	BinanceOrderMsg_BinanceTimeInForce_name = map[int32]string{
		0: "TIF_UNKNOWN",
		1: "GTE",
		2: "TIF_RESERVED",
		3: "IOC",
	}
	BinanceOrderMsg_BinanceTimeInForce_value = map[string]int32{
		"TIF_UNKNOWN":  0,
		"GTE":          1,
		"TIF_RESERVED": 2,
		"IOC":          3,
	}
)

func (x BinanceOrderMsg_BinanceTimeInForce) Enum() *BinanceOrderMsg_BinanceTimeInForce {
	p := new(BinanceOrderMsg_BinanceTimeInForce)
	*p = x
	return p
}

func (x BinanceOrderMsg_BinanceTimeInForce) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BinanceOrderMsg_BinanceTimeInForce) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_binance_proto_enumTypes[2].Descriptor()
}

func (BinanceOrderMsg_BinanceTimeInForce) Type() protoreflect.EnumType {
	return &file_messages_binance_proto_enumTypes[2]
}

func (x BinanceOrderMsg_BinanceTimeInForce) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BinanceOrderMsg_BinanceTimeInForce) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BinanceOrderMsg_BinanceTimeInForce(num)
	return nil
}

// Deprecated: Use BinanceOrderMsg_BinanceTimeInForce.Descriptor instead.
func (BinanceOrderMsg_BinanceTimeInForce) EnumDescriptor() ([]byte, []int) {
	return file_messages_binance_proto_rawDescGZIP(), []int{7, 2}
}

//*
// Request: Ask the device for a Binance address.
// @start
// @next BinanceAddress
// @next Failure
type BinanceGetAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressN    []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`          // BIP-32-style path to derive the key from master node
	ShowDisplay *bool    `protobuf:"varint,2,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"` // optionally prompt for confirmation on trezor display
}

func (x *BinanceGetAddress) Reset() {
	*x = BinanceGetAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_binance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinanceGetAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinanceGetAddress) ProtoMessage() {}

func (x *BinanceGetAddress) ProtoReflect() protoreflect.Message {
	mi := &file_messages_binance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinanceGetAddress.ProtoReflect.Descriptor instead.
func (*BinanceGetAddress) Descriptor() ([]byte, []int) {
	return file_messages_binance_proto_rawDescGZIP(), []int{0}
}

func (x *BinanceGetAddress) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *BinanceGetAddress) GetShowDisplay() bool {
	if x != nil && x.ShowDisplay != nil {
		return *x.ShowDisplay
	}
	return false
}

//*
// Response: A Binance address.
// @end
type BinanceAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *string `protobuf:"bytes,1,req,name=address" json:"address,omitempty"` // prefixed bech32 Binance address
}

func (x *BinanceAddress) Reset() {
	*x = BinanceAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_binance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinanceAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinanceAddress) ProtoMessage() {}

func (x *BinanceAddress) ProtoReflect() protoreflect.Message {
	mi := &file_messages_binance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinanceAddress.ProtoReflect.Descriptor instead.
func (*BinanceAddress) Descriptor() ([]byte, []int) {
	return file_messages_binance_proto_rawDescGZIP(), []int{1}
}

func (x *BinanceAddress) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

//*
// Request: Ask device for a public key corresponding to address_n path.
// @start
// @next BinancePublicKey
type BinanceGetPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressN    []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`          // BIP-32 path to derive the key from master node
	ShowDisplay *bool    `protobuf:"varint,2,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"` // optionally show on display before sending the result
}

func (x *BinanceGetPublicKey) Reset() {
	*x = BinanceGetPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_binance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinanceGetPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinanceGetPublicKey) ProtoMessage() {}

func (x *BinanceGetPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_messages_binance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinanceGetPublicKey.ProtoReflect.Descriptor instead.
func (*BinanceGetPublicKey) Descriptor() ([]byte, []int) {
	return file_messages_binance_proto_rawDescGZIP(), []int{2}
}

func (x *BinanceGetPublicKey) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *BinanceGetPublicKey) GetShowDisplay() bool {
	if x != nil && x.ShowDisplay != nil {
		return *x.ShowDisplay
	}
	return false
}

//*
// Response: A public key corresponding to address_n path.
// @end
type BinancePublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey []byte `protobuf:"bytes,1,req,name=public_key,json=publicKey" json:"public_key,omitempty"`
}

func (x *BinancePublicKey) Reset() {
	*x = BinancePublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_binance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinancePublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinancePublicKey) ProtoMessage() {}

func (x *BinancePublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_messages_binance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinancePublicKey.ProtoReflect.Descriptor instead.
func (*BinancePublicKey) Descriptor() ([]byte, []int) {
	return file_messages_binance_proto_rawDescGZIP(), []int{3}
}

func (x *BinancePublicKey) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

//*
// Request: Starts the Binance transaction protocol flow.
// A transaction consists of these common fields and a series of Binance<Any>Msg messages.
// These parts form a JSON structure (a string) in Trezor's memory, which is signed to produce a BinanceSignedTx.
// @start
// @next BinanceTxRequest
// @next Failure
type BinanceSignTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressN      []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"` // BIP-32-style path to derive the key from master node
	MsgCount      *uint32  `protobuf:"varint,2,req,name=msg_count,json=msgCount" json:"msg_count,omitempty"` // count of Binance<Any>Msg to be included in this tx
	AccountNumber *int64   `protobuf:"zigzag64,3,req,name=account_number,json=accountNumber" json:"account_number,omitempty"`
	ChainId       *string  `protobuf:"bytes,4,opt,name=chain_id,json=chainId" json:"chain_id,omitempty"`
	Memo          *string  `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	Sequence      *int64   `protobuf:"zigzag64,6,req,name=sequence" json:"sequence,omitempty"`
	Source        *int64   `protobuf:"zigzag64,7,req,name=source" json:"source,omitempty"`
}

func (x *BinanceSignTx) Reset() {
	*x = BinanceSignTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_binance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinanceSignTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinanceSignTx) ProtoMessage() {}

func (x *BinanceSignTx) ProtoReflect() protoreflect.Message {
	mi := &file_messages_binance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinanceSignTx.ProtoReflect.Descriptor instead.
func (*BinanceSignTx) Descriptor() ([]byte, []int) {
	return file_messages_binance_proto_rawDescGZIP(), []int{4}
}

func (x *BinanceSignTx) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *BinanceSignTx) GetMsgCount() uint32 {
	if x != nil && x.MsgCount != nil {
		return *x.MsgCount
	}
	return 0
}

func (x *BinanceSignTx) GetAccountNumber() int64 {
	if x != nil && x.AccountNumber != nil {
		return *x.AccountNumber
	}
	return 0
}

func (x *BinanceSignTx) GetChainId() string {
	if x != nil && x.ChainId != nil {
		return *x.ChainId
	}
	return ""
}

func (x *BinanceSignTx) GetMemo() string {
	if x != nil && x.Memo != nil {
		return *x.Memo
	}
	return ""
}

func (x *BinanceSignTx) GetSequence() int64 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return 0
}

func (x *BinanceSignTx) GetSource() int64 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

//*
// Response: Trezor requests the next message or signals that it is ready to send a BinanceSignedTx.
// @next BinanceTransferMsg
// @next BinanceOrderMsg
// @next BinanceCancelMsg
type BinanceTxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BinanceTxRequest) Reset() {
	*x = BinanceTxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_binance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinanceTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinanceTxRequest) ProtoMessage() {}

func (x *BinanceTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_binance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinanceTxRequest.ProtoReflect.Descriptor instead.
func (*BinanceTxRequest) Descriptor() ([]byte, []int) {
	return file_messages_binance_proto_rawDescGZIP(), []int{5}
}

//*
// Request: Ask the device to include a Binance transfer msg in the tx.
// @next BinanceSignedTx
// @next Failure
type BinanceTransferMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs  []*BinanceTransferMsg_BinanceInputOutput `protobuf:"bytes,1,rep,name=inputs" json:"inputs,omitempty"`
	Outputs []*BinanceTransferMsg_BinanceInputOutput `protobuf:"bytes,2,rep,name=outputs" json:"outputs,omitempty"`
}

func (x *BinanceTransferMsg) Reset() {
	*x = BinanceTransferMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_binance_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinanceTransferMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinanceTransferMsg) ProtoMessage() {}

func (x *BinanceTransferMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messages_binance_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinanceTransferMsg.ProtoReflect.Descriptor instead.
func (*BinanceTransferMsg) Descriptor() ([]byte, []int) {
	return file_messages_binance_proto_rawDescGZIP(), []int{6}
}

func (x *BinanceTransferMsg) GetInputs() []*BinanceTransferMsg_BinanceInputOutput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *BinanceTransferMsg) GetOutputs() []*BinanceTransferMsg_BinanceInputOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

//*
// Request: Ask the device to include a Binance order msg in the tx.
// @next BinanceSignedTx
// @next Failure
type BinanceOrderMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *string                             `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Ordertype   *BinanceOrderMsg_BinanceOrderType   `protobuf:"varint,2,req,name=ordertype,enum=hw.trezor.messages.binance.BinanceOrderMsg_BinanceOrderType" json:"ordertype,omitempty"`
	Price       *int64                              `protobuf:"zigzag64,3,req,name=price" json:"price,omitempty"`
	Quantity    *int64                              `protobuf:"zigzag64,4,req,name=quantity" json:"quantity,omitempty"`
	Sender      *string                             `protobuf:"bytes,5,opt,name=sender" json:"sender,omitempty"`
	Side        *BinanceOrderMsg_BinanceOrderSide   `protobuf:"varint,6,req,name=side,enum=hw.trezor.messages.binance.BinanceOrderMsg_BinanceOrderSide" json:"side,omitempty"`
	Symbol      *string                             `protobuf:"bytes,7,opt,name=symbol" json:"symbol,omitempty"`
	Timeinforce *BinanceOrderMsg_BinanceTimeInForce `protobuf:"varint,8,req,name=timeinforce,enum=hw.trezor.messages.binance.BinanceOrderMsg_BinanceTimeInForce" json:"timeinforce,omitempty"`
}

func (x *BinanceOrderMsg) Reset() {
	*x = BinanceOrderMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_binance_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinanceOrderMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinanceOrderMsg) ProtoMessage() {}

func (x *BinanceOrderMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messages_binance_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinanceOrderMsg.ProtoReflect.Descriptor instead.
func (*BinanceOrderMsg) Descriptor() ([]byte, []int) {
	return file_messages_binance_proto_rawDescGZIP(), []int{7}
}

func (x *BinanceOrderMsg) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BinanceOrderMsg) GetOrdertype() BinanceOrderMsg_BinanceOrderType {
	if x != nil && x.Ordertype != nil {
		return *x.Ordertype
	}
	return BinanceOrderMsg_OT_UNKNOWN
}

func (x *BinanceOrderMsg) GetPrice() int64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *BinanceOrderMsg) GetQuantity() int64 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *BinanceOrderMsg) GetSender() string {
	if x != nil && x.Sender != nil {
		return *x.Sender
	}
	return ""
}

func (x *BinanceOrderMsg) GetSide() BinanceOrderMsg_BinanceOrderSide {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return BinanceOrderMsg_SIDE_UNKNOWN
}

func (x *BinanceOrderMsg) GetSymbol() string {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return ""
}

func (x *BinanceOrderMsg) GetTimeinforce() BinanceOrderMsg_BinanceTimeInForce {
	if x != nil && x.Timeinforce != nil {
		return *x.Timeinforce
	}
	return BinanceOrderMsg_TIF_UNKNOWN
}

//*
// Request: Ask the device to include a Binance cancel msg in the tx.
// @next BinanceSignedTx
// @next Failure
type BinanceCancelMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Refid  *string `protobuf:"bytes,1,opt,name=refid" json:"refid,omitempty"`
	Sender *string `protobuf:"bytes,2,opt,name=sender" json:"sender,omitempty"`
	Symbol *string `protobuf:"bytes,3,opt,name=symbol" json:"symbol,omitempty"`
}

func (x *BinanceCancelMsg) Reset() {
	*x = BinanceCancelMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_binance_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinanceCancelMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinanceCancelMsg) ProtoMessage() {}

func (x *BinanceCancelMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messages_binance_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinanceCancelMsg.ProtoReflect.Descriptor instead.
func (*BinanceCancelMsg) Descriptor() ([]byte, []int) {
	return file_messages_binance_proto_rawDescGZIP(), []int{8}
}

func (x *BinanceCancelMsg) GetRefid() string {
	if x != nil && x.Refid != nil {
		return *x.Refid
	}
	return ""
}

func (x *BinanceCancelMsg) GetSender() string {
	if x != nil && x.Sender != nil {
		return *x.Sender
	}
	return ""
}

func (x *BinanceCancelMsg) GetSymbol() string {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return ""
}

//*
// Response: A transaction signature and public key corresponding to the address_n path in BinanceSignTx.
// @end
type BinanceSignedTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte `protobuf:"bytes,1,req,name=signature" json:"signature,omitempty"`
	PublicKey []byte `protobuf:"bytes,2,req,name=public_key,json=publicKey" json:"public_key,omitempty"`
}

func (x *BinanceSignedTx) Reset() {
	*x = BinanceSignedTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_binance_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinanceSignedTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinanceSignedTx) ProtoMessage() {}

func (x *BinanceSignedTx) ProtoReflect() protoreflect.Message {
	mi := &file_messages_binance_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinanceSignedTx.ProtoReflect.Descriptor instead.
func (*BinanceSignedTx) Descriptor() ([]byte, []int) {
	return file_messages_binance_proto_rawDescGZIP(), []int{9}
}

func (x *BinanceSignedTx) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *BinanceSignedTx) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type BinanceTransferMsg_BinanceInputOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *string                           `protobuf:"bytes,1,req,name=address" json:"address,omitempty"`
	Coins   []*BinanceTransferMsg_BinanceCoin `protobuf:"bytes,2,rep,name=coins" json:"coins,omitempty"`
}

func (x *BinanceTransferMsg_BinanceInputOutput) Reset() {
	*x = BinanceTransferMsg_BinanceInputOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_binance_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinanceTransferMsg_BinanceInputOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinanceTransferMsg_BinanceInputOutput) ProtoMessage() {}

func (x *BinanceTransferMsg_BinanceInputOutput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_binance_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinanceTransferMsg_BinanceInputOutput.ProtoReflect.Descriptor instead.
func (*BinanceTransferMsg_BinanceInputOutput) Descriptor() ([]byte, []int) {
	return file_messages_binance_proto_rawDescGZIP(), []int{6, 0}
}

func (x *BinanceTransferMsg_BinanceInputOutput) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *BinanceTransferMsg_BinanceInputOutput) GetCoins() []*BinanceTransferMsg_BinanceCoin {
	if x != nil {
		return x.Coins
	}
	return nil
}

type BinanceTransferMsg_BinanceCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount *int64  `protobuf:"zigzag64,1,req,name=amount" json:"amount,omitempty"`
	Denom  *string `protobuf:"bytes,2,req,name=denom" json:"denom,omitempty"`
}

func (x *BinanceTransferMsg_BinanceCoin) Reset() {
	*x = BinanceTransferMsg_BinanceCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_binance_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinanceTransferMsg_BinanceCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinanceTransferMsg_BinanceCoin) ProtoMessage() {}

func (x *BinanceTransferMsg_BinanceCoin) ProtoReflect() protoreflect.Message {
	mi := &file_messages_binance_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinanceTransferMsg_BinanceCoin.ProtoReflect.Descriptor instead.
func (*BinanceTransferMsg_BinanceCoin) Descriptor() ([]byte, []int) {
	return file_messages_binance_proto_rawDescGZIP(), []int{6, 1}
}

func (x *BinanceTransferMsg_BinanceCoin) GetAmount() int64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *BinanceTransferMsg_BinanceCoin) GetDenom() string {
	if x != nil && x.Denom != nil {
		return *x.Denom
	}
	return ""
}

var File_messages_binance_proto protoreflect.FileDescriptor

var file_messages_binance_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2d, 0x62, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65,
	0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0x53, 0x0a, 0x11, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68,
	0x6f, 0x77, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x22, 0x2a, 0x0a, 0x0e, 0x42, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x55, 0x0a, 0x13, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x22, 0x31, 0x0a, 0x10,
	0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22,
	0xd3, 0x01, 0x0a, 0x0d, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x54,
	0x78, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x12, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x12, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x12, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8c, 0x03, 0x0a, 0x12, 0x42, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x73, 0x67,
	0x12, 0x59, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x42, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x73, 0x67,
	0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x07, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68,
	0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x80, 0x01, 0x0a, 0x12, 0x42, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x50, 0x0a, 0x05, 0x63, 0x6f, 0x69,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72,
	0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x1a, 0x3b, 0x0a, 0x0b, 0x42,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x12, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x22, 0xe3, 0x04, 0x0a, 0x0f, 0x42, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x09,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x3c, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x42, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x12, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x12,
	0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x50, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x42, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04,
	0x73, 0x69, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x60, 0x0a, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x3e, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x42,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x2e, 0x42,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x4a,
	0x0a, 0x10, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x03, 0x22, 0x37, 0x0a, 0x10, 0x42, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c,
	0x4c, 0x10, 0x02, 0x22, 0x49, 0x0a, 0x12, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x49, 0x46,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x49, 0x46, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4f, 0x43, 0x10, 0x03, 0x22, 0x58,
	0x0a, 0x10, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d,
	0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x65, 0x66, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x4e, 0x0a, 0x0f, 0x42, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x46, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x74, 0x72, 0x65, 0x7a,
	0x6f, 0x72, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x42,
	0x14, 0x54, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5a, 0x09, 0x2e, 0x2f, 0x74, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_messages_binance_proto_rawDescOnce sync.Once
	file_messages_binance_proto_rawDescData = file_messages_binance_proto_rawDesc
)

func file_messages_binance_proto_rawDescGZIP() []byte {
	file_messages_binance_proto_rawDescOnce.Do(func() {
		file_messages_binance_proto_rawDescData = protoimpl.X.CompressGZIP(file_messages_binance_proto_rawDescData)
	})
	return file_messages_binance_proto_rawDescData
}

var file_messages_binance_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_messages_binance_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_messages_binance_proto_goTypes = []interface{}{
	(BinanceOrderMsg_BinanceOrderType)(0),         // 0: hw.trezor.messages.binance.BinanceOrderMsg.BinanceOrderType
	(BinanceOrderMsg_BinanceOrderSide)(0),         // 1: hw.trezor.messages.binance.BinanceOrderMsg.BinanceOrderSide
	(BinanceOrderMsg_BinanceTimeInForce)(0),       // 2: hw.trezor.messages.binance.BinanceOrderMsg.BinanceTimeInForce
	(*BinanceGetAddress)(nil),                     // 3: hw.trezor.messages.binance.BinanceGetAddress
	(*BinanceAddress)(nil),                        // 4: hw.trezor.messages.binance.BinanceAddress
	(*BinanceGetPublicKey)(nil),                   // 5: hw.trezor.messages.binance.BinanceGetPublicKey
	(*BinancePublicKey)(nil),                      // 6: hw.trezor.messages.binance.BinancePublicKey
	(*BinanceSignTx)(nil),                         // 7: hw.trezor.messages.binance.BinanceSignTx
	(*BinanceTxRequest)(nil),                      // 8: hw.trezor.messages.binance.BinanceTxRequest
	(*BinanceTransferMsg)(nil),                    // 9: hw.trezor.messages.binance.BinanceTransferMsg
	(*BinanceOrderMsg)(nil),                       // 10: hw.trezor.messages.binance.BinanceOrderMsg
	(*BinanceCancelMsg)(nil),                      // 11: hw.trezor.messages.binance.BinanceCancelMsg
	(*BinanceSignedTx)(nil),                       // 12: hw.trezor.messages.binance.BinanceSignedTx
	(*BinanceTransferMsg_BinanceInputOutput)(nil), // 13: hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput
	(*BinanceTransferMsg_BinanceCoin)(nil),        // 14: hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin
}
var file_messages_binance_proto_depIdxs = []int32{
	13, // 0: hw.trezor.messages.binance.BinanceTransferMsg.inputs:type_name -> hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput
	13, // 1: hw.trezor.messages.binance.BinanceTransferMsg.outputs:type_name -> hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput
	0,  // 2: hw.trezor.messages.binance.BinanceOrderMsg.ordertype:type_name -> hw.trezor.messages.binance.BinanceOrderMsg.BinanceOrderType
	1,  // 3: hw.trezor.messages.binance.BinanceOrderMsg.side:type_name -> hw.trezor.messages.binance.BinanceOrderMsg.BinanceOrderSide
	2,  // 4: hw.trezor.messages.binance.BinanceOrderMsg.timeinforce:type_name -> hw.trezor.messages.binance.BinanceOrderMsg.BinanceTimeInForce
	14, // 5: hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput.coins:type_name -> hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_messages_binance_proto_init() }
func file_messages_binance_proto_init() {
	if File_messages_binance_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_messages_binance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinanceGetAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_binance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinanceAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_binance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinanceGetPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_binance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinancePublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_binance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinanceSignTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_binance_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinanceTxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_binance_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinanceTransferMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_binance_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinanceOrderMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_binance_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinanceCancelMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_binance_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinanceSignedTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_binance_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinanceTransferMsg_BinanceInputOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_binance_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinanceTransferMsg_BinanceCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messages_binance_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_binance_proto_goTypes,
		DependencyIndexes: file_messages_binance_proto_depIdxs,
		EnumInfos:         file_messages_binance_proto_enumTypes,
		MessageInfos:      file_messages_binance_proto_msgTypes,
	}.Build()
	File_messages_binance_proto = out.File
	file_messages_binance_proto_rawDesc = nil
	file_messages_binance_proto_goTypes = nil
	file_messages_binance_proto_depIdxs = nil
}

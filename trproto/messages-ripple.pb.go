// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: messages-ripple.proto

package trproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Request: Address at the specified index
// @start
// @next RippleAddress
type RippleGetAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressN    []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`          // BIP-32 path. For compatibility with other wallets, must be m/44'/144'/index'
	ShowDisplay *bool    `protobuf:"varint,2,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"` // optionally show on display before sending the result
}

func (x *RippleGetAddress) Reset() {
	*x = RippleGetAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_ripple_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RippleGetAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RippleGetAddress) ProtoMessage() {}

func (x *RippleGetAddress) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ripple_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RippleGetAddress.ProtoReflect.Descriptor instead.
func (*RippleGetAddress) Descriptor() ([]byte, []int) {
	return file_messages_ripple_proto_rawDescGZIP(), []int{0}
}

func (x *RippleGetAddress) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *RippleGetAddress) GetShowDisplay() bool {
	if x != nil && x.ShowDisplay != nil {
		return *x.ShowDisplay
	}
	return false
}

// *
// Response: Address for the given index
// @end
type RippleAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *string `protobuf:"bytes,1,req,name=address" json:"address,omitempty"` // Address in Ripple format (base58 of a pubkey with checksum)
}

func (x *RippleAddress) Reset() {
	*x = RippleAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_ripple_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RippleAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RippleAddress) ProtoMessage() {}

func (x *RippleAddress) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ripple_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RippleAddress.ProtoReflect.Descriptor instead.
func (*RippleAddress) Descriptor() ([]byte, []int) {
	return file_messages_ripple_proto_rawDescGZIP(), []int{1}
}

func (x *RippleAddress) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

// *
// Request: ask device to sign Ripple transaction
// @start
// @next RippleSignedTx
type RippleSignTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressN           []uint32                    `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                                 // BIP-32 path. For compatibility with other wallets, must be m/44'/144'/index'
	Fee                *uint64                     `protobuf:"varint,2,req,name=fee" json:"fee,omitempty"`                                                           // fee (in drops) for the transaction
	Flags              *uint32                     `protobuf:"varint,3,opt,name=flags,def=0" json:"flags,omitempty"`                                                 // transaction flags
	Sequence           *uint32                     `protobuf:"varint,4,req,name=sequence" json:"sequence,omitempty"`                                                 // transaction sequence number
	LastLedgerSequence *uint32                     `protobuf:"varint,5,opt,name=last_ledger_sequence,json=lastLedgerSequence" json:"last_ledger_sequence,omitempty"` // see https://developers.ripple.com/reliable-transaction-submission.html#lastledgersequence
	Payment            *RippleSignTx_RipplePayment `protobuf:"bytes,6,req,name=payment" json:"payment,omitempty"`                                                    // Payment transaction type
}

// Default values for RippleSignTx fields.
const (
	Default_RippleSignTx_Flags = uint32(0)
)

func (x *RippleSignTx) Reset() {
	*x = RippleSignTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_ripple_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RippleSignTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RippleSignTx) ProtoMessage() {}

func (x *RippleSignTx) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ripple_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RippleSignTx.ProtoReflect.Descriptor instead.
func (*RippleSignTx) Descriptor() ([]byte, []int) {
	return file_messages_ripple_proto_rawDescGZIP(), []int{2}
}

func (x *RippleSignTx) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *RippleSignTx) GetFee() uint64 {
	if x != nil && x.Fee != nil {
		return *x.Fee
	}
	return 0
}

func (x *RippleSignTx) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return Default_RippleSignTx_Flags
}

func (x *RippleSignTx) GetSequence() uint32 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return 0
}

func (x *RippleSignTx) GetLastLedgerSequence() uint32 {
	if x != nil && x.LastLedgerSequence != nil {
		return *x.LastLedgerSequence
	}
	return 0
}

func (x *RippleSignTx) GetPayment() *RippleSignTx_RipplePayment {
	if x != nil {
		return x.Payment
	}
	return nil
}

// *
// Response: signature for transaction
// @end
type RippleSignedTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature    []byte `protobuf:"bytes,1,req,name=signature" json:"signature,omitempty"`
	SerializedTx []byte `protobuf:"bytes,2,req,name=serialized_tx,json=serializedTx" json:"serialized_tx,omitempty"`
}

func (x *RippleSignedTx) Reset() {
	*x = RippleSignedTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_ripple_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RippleSignedTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RippleSignedTx) ProtoMessage() {}

func (x *RippleSignedTx) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ripple_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RippleSignedTx.ProtoReflect.Descriptor instead.
func (*RippleSignedTx) Descriptor() ([]byte, []int) {
	return file_messages_ripple_proto_rawDescGZIP(), []int{3}
}

func (x *RippleSignedTx) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *RippleSignedTx) GetSerializedTx() []byte {
	if x != nil {
		return x.SerializedTx
	}
	return nil
}

// *
// Payment transaction type
// - simple A sends money to B
// - only a subset of fields is supported
// - see https://developers.ripple.com/payment.html
type RippleSignTx_RipplePayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount         *uint64 `protobuf:"varint,1,req,name=amount" json:"amount,omitempty"`                                       // only XRP is supported at the moment so this an integer
	Destination    *string `protobuf:"bytes,2,req,name=destination" json:"destination,omitempty"`                              // destination account address
	DestinationTag *uint32 `protobuf:"varint,3,opt,name=destination_tag,json=destinationTag" json:"destination_tag,omitempty"` // destination tag to identify payments
}

func (x *RippleSignTx_RipplePayment) Reset() {
	*x = RippleSignTx_RipplePayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_ripple_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RippleSignTx_RipplePayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RippleSignTx_RipplePayment) ProtoMessage() {}

func (x *RippleSignTx_RipplePayment) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ripple_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RippleSignTx_RipplePayment.ProtoReflect.Descriptor instead.
func (*RippleSignTx_RipplePayment) Descriptor() ([]byte, []int) {
	return file_messages_ripple_proto_rawDescGZIP(), []int{2, 0}
}

func (x *RippleSignTx_RipplePayment) GetAmount() uint64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *RippleSignTx_RipplePayment) GetDestination() string {
	if x != nil && x.Destination != nil {
		return *x.Destination
	}
	return ""
}

func (x *RippleSignTx_RipplePayment) GetDestinationTag() uint32 {
	if x != nil && x.DestinationTag != nil {
		return *x.DestinationTag
	}
	return 0
}

var File_messages_ripple_proto protoreflect.FileDescriptor

var file_messages_ripple_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2d, 0x72, 0x69, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a,
	0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x72, 0x69, 0x70, 0x70,
	0x6c, 0x65, 0x22, 0x52, 0x0a, 0x10, 0x52, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x22, 0x29, 0x0a, 0x0d, 0x52, 0x69, 0x70, 0x70, 0x6c, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0xe9, 0x02, 0x0a, 0x0c, 0x52, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x54, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x12,
	0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65,
	0x65, 0x12, 0x17, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x77, 0x2e, 0x74,
	0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x72,
	0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x52, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x54, 0x78, 0x2e, 0x52, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x72, 0x0a, 0x0d, 0x52, 0x69, 0x70,
	0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x22, 0x53, 0x0a,
	0x0e, 0x52, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x54, 0x78, 0x42, 0x3a, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x61, 0x74, 0x6f, 0x73, 0x68,
	0x69, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6c, 0x69, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x42, 0x13, 0x54, 0x72, 0x65, 0x7a, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x69, 0x70, 0x70, 0x6c, 0x65,
}

var (
	file_messages_ripple_proto_rawDescOnce sync.Once
	file_messages_ripple_proto_rawDescData = file_messages_ripple_proto_rawDesc
)

func file_messages_ripple_proto_rawDescGZIP() []byte {
	file_messages_ripple_proto_rawDescOnce.Do(func() {
		file_messages_ripple_proto_rawDescData = protoimpl.X.CompressGZIP(file_messages_ripple_proto_rawDescData)
	})
	return file_messages_ripple_proto_rawDescData
}

var file_messages_ripple_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_messages_ripple_proto_goTypes = []interface{}{
	(*RippleGetAddress)(nil),           // 0: hw.trezor.messages.ripple.RippleGetAddress
	(*RippleAddress)(nil),              // 1: hw.trezor.messages.ripple.RippleAddress
	(*RippleSignTx)(nil),               // 2: hw.trezor.messages.ripple.RippleSignTx
	(*RippleSignedTx)(nil),             // 3: hw.trezor.messages.ripple.RippleSignedTx
	(*RippleSignTx_RipplePayment)(nil), // 4: hw.trezor.messages.ripple.RippleSignTx.RipplePayment
}
var file_messages_ripple_proto_depIdxs = []int32{
	4, // 0: hw.trezor.messages.ripple.RippleSignTx.payment:type_name -> hw.trezor.messages.ripple.RippleSignTx.RipplePayment
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_messages_ripple_proto_init() }
func file_messages_ripple_proto_init() {
	if File_messages_ripple_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_messages_ripple_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RippleGetAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_ripple_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RippleAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_ripple_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RippleSignTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_ripple_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RippleSignedTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_ripple_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RippleSignTx_RipplePayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messages_ripple_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_ripple_proto_goTypes,
		DependencyIndexes: file_messages_ripple_proto_depIdxs,
		MessageInfos:      file_messages_ripple_proto_msgTypes,
	}.Build()
	File_messages_ripple_proto = out.File
	file_messages_ripple_proto_rawDesc = nil
	file_messages_ripple_proto_goTypes = nil
	file_messages_ripple_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: messages-monero.proto

package trproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MoneroNetworkType int32

const (
	MoneroNetworkType_MAINNET   MoneroNetworkType = 0
	MoneroNetworkType_TESTNET   MoneroNetworkType = 1
	MoneroNetworkType_STAGENET  MoneroNetworkType = 2
	MoneroNetworkType_FAKECHAIN MoneroNetworkType = 3
)

// Enum value maps for MoneroNetworkType.
var (
	MoneroNetworkType_name = map[int32]string{
		0: "MAINNET",
		1: "TESTNET",
		2: "STAGENET",
		3: "FAKECHAIN",
	}
	MoneroNetworkType_value = map[string]int32{
		"MAINNET":   0,
		"TESTNET":   1,
		"STAGENET":  2,
		"FAKECHAIN": 3,
	}
)

func (x MoneroNetworkType) Enum() *MoneroNetworkType {
	p := new(MoneroNetworkType)
	*p = x
	return p
}

func (x MoneroNetworkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MoneroNetworkType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_monero_proto_enumTypes[0].Descriptor()
}

func (MoneroNetworkType) Type() protoreflect.EnumType {
	return &file_messages_monero_proto_enumTypes[0]
}

func (x MoneroNetworkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MoneroNetworkType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MoneroNetworkType(num)
	return nil
}

// Deprecated: Use MoneroNetworkType.Descriptor instead.
func (MoneroNetworkType) EnumDescriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{0}
}

// *
// Structure representing Monero transaction source entry, UTXO
// @embed
type MoneroTransactionSourceEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outputs                 []*MoneroTransactionSourceEntry_MoneroOutputEntry `protobuf:"bytes,1,rep,name=outputs" json:"outputs,omitempty"`                                                                      // all outputs including decoys (forms the ring)
	RealOutput              *uint64                                           `protobuf:"varint,2,opt,name=real_output,json=realOutput" json:"real_output,omitempty"`                                             // index denoting which item in `outputs` is our real output (not a decoy)
	RealOutTxKey            []byte                                            `protobuf:"bytes,3,opt,name=real_out_tx_key,json=realOutTxKey" json:"real_out_tx_key,omitempty"`                                    // tx key located in the real output's tx
	RealOutAdditionalTxKeys [][]byte                                          `protobuf:"bytes,4,rep,name=real_out_additional_tx_keys,json=realOutAdditionalTxKeys" json:"real_out_additional_tx_keys,omitempty"` // additional tx keys if applicable
	RealOutputInTxIndex     *uint64                                           `protobuf:"varint,5,opt,name=real_output_in_tx_index,json=realOutputInTxIndex" json:"real_output_in_tx_index,omitempty"`            // index of our real output in the tx (aka which output was it in the transaction)
	Amount                  *uint64                                           `protobuf:"varint,6,opt,name=amount" json:"amount,omitempty"`
	Rct                     *bool                                             `protobuf:"varint,7,opt,name=rct" json:"rct,omitempty"` // is RingCT used (true for newer UTXOs)
	Mask                    []byte                                            `protobuf:"bytes,8,opt,name=mask" json:"mask,omitempty"`
	MultisigKLRki           *MoneroTransactionSourceEntry_MoneroMultisigKLRki `protobuf:"bytes,9,opt,name=multisig_kLRki,json=multisigKLRki" json:"multisig_kLRki,omitempty"`
	SubaddrMinor            *uint32                                           `protobuf:"varint,10,opt,name=subaddr_minor,json=subaddrMinor" json:"subaddr_minor,omitempty"` // minor subaddr index UTXO was sent to
}

func (x *MoneroTransactionSourceEntry) Reset() {
	*x = MoneroTransactionSourceEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroTransactionSourceEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroTransactionSourceEntry) ProtoMessage() {}

func (x *MoneroTransactionSourceEntry) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroTransactionSourceEntry.ProtoReflect.Descriptor instead.
func (*MoneroTransactionSourceEntry) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{0}
}

func (x *MoneroTransactionSourceEntry) GetOutputs() []*MoneroTransactionSourceEntry_MoneroOutputEntry {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *MoneroTransactionSourceEntry) GetRealOutput() uint64 {
	if x != nil && x.RealOutput != nil {
		return *x.RealOutput
	}
	return 0
}

func (x *MoneroTransactionSourceEntry) GetRealOutTxKey() []byte {
	if x != nil {
		return x.RealOutTxKey
	}
	return nil
}

func (x *MoneroTransactionSourceEntry) GetRealOutAdditionalTxKeys() [][]byte {
	if x != nil {
		return x.RealOutAdditionalTxKeys
	}
	return nil
}

func (x *MoneroTransactionSourceEntry) GetRealOutputInTxIndex() uint64 {
	if x != nil && x.RealOutputInTxIndex != nil {
		return *x.RealOutputInTxIndex
	}
	return 0
}

func (x *MoneroTransactionSourceEntry) GetAmount() uint64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *MoneroTransactionSourceEntry) GetRct() bool {
	if x != nil && x.Rct != nil {
		return *x.Rct
	}
	return false
}

func (x *MoneroTransactionSourceEntry) GetMask() []byte {
	if x != nil {
		return x.Mask
	}
	return nil
}

func (x *MoneroTransactionSourceEntry) GetMultisigKLRki() *MoneroTransactionSourceEntry_MoneroMultisigKLRki {
	if x != nil {
		return x.MultisigKLRki
	}
	return nil
}

func (x *MoneroTransactionSourceEntry) GetSubaddrMinor() uint32 {
	if x != nil && x.SubaddrMinor != nil {
		return *x.SubaddrMinor
	}
	return 0
}

// *
// Structure representing Monero transaction destination entry
// @embed
type MoneroTransactionDestinationEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount       *uint64                                                       `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
	Addr         *MoneroTransactionDestinationEntry_MoneroAccountPublicAddress `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	IsSubaddress *bool                                                         `protobuf:"varint,3,opt,name=is_subaddress,json=isSubaddress" json:"is_subaddress,omitempty"`
	Original     []byte                                                        `protobuf:"bytes,4,opt,name=original" json:"original,omitempty"`
	IsIntegrated *bool                                                         `protobuf:"varint,5,opt,name=is_integrated,json=isIntegrated" json:"is_integrated,omitempty"`
}

func (x *MoneroTransactionDestinationEntry) Reset() {
	*x = MoneroTransactionDestinationEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroTransactionDestinationEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroTransactionDestinationEntry) ProtoMessage() {}

func (x *MoneroTransactionDestinationEntry) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroTransactionDestinationEntry.ProtoReflect.Descriptor instead.
func (*MoneroTransactionDestinationEntry) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{1}
}

func (x *MoneroTransactionDestinationEntry) GetAmount() uint64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *MoneroTransactionDestinationEntry) GetAddr() *MoneroTransactionDestinationEntry_MoneroAccountPublicAddress {
	if x != nil {
		return x.Addr
	}
	return nil
}

func (x *MoneroTransactionDestinationEntry) GetIsSubaddress() bool {
	if x != nil && x.IsSubaddress != nil {
		return *x.IsSubaddress
	}
	return false
}

func (x *MoneroTransactionDestinationEntry) GetOriginal() []byte {
	if x != nil {
		return x.Original
	}
	return nil
}

func (x *MoneroTransactionDestinationEntry) GetIsIntegrated() bool {
	if x != nil && x.IsIntegrated != nil {
		return *x.IsIntegrated
	}
	return false
}

// *
// Range sig parameters / data.
// @embed
type MoneroTransactionRsigData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RsigType    *uint32  `protobuf:"varint,1,opt,name=rsig_type,json=rsigType" json:"rsig_type,omitempty"` // range signature (aka proof) type
	OffloadType *uint32  `protobuf:"varint,2,opt,name=offload_type,json=offloadType" json:"offload_type,omitempty"`
	Grouping    []uint64 `protobuf:"varint,3,rep,name=grouping" json:"grouping,omitempty"` // aggregation scheme for BP
	Mask        []byte   `protobuf:"bytes,4,opt,name=mask" json:"mask,omitempty"`          // mask vector
	Rsig        []byte   `protobuf:"bytes,5,opt,name=rsig" json:"rsig,omitempty"`          // range sig data, all of it or partial (based on rsig_parts)
	RsigParts   [][]byte `protobuf:"bytes,6,rep,name=rsig_parts,json=rsigParts" json:"rsig_parts,omitempty"`
	BpVersion   *uint32  `protobuf:"varint,7,opt,name=bp_version,json=bpVersion" json:"bp_version,omitempty"` // Bulletproof version
}

func (x *MoneroTransactionRsigData) Reset() {
	*x = MoneroTransactionRsigData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroTransactionRsigData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroTransactionRsigData) ProtoMessage() {}

func (x *MoneroTransactionRsigData) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroTransactionRsigData.ProtoReflect.Descriptor instead.
func (*MoneroTransactionRsigData) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{2}
}

func (x *MoneroTransactionRsigData) GetRsigType() uint32 {
	if x != nil && x.RsigType != nil {
		return *x.RsigType
	}
	return 0
}

func (x *MoneroTransactionRsigData) GetOffloadType() uint32 {
	if x != nil && x.OffloadType != nil {
		return *x.OffloadType
	}
	return 0
}

func (x *MoneroTransactionRsigData) GetGrouping() []uint64 {
	if x != nil {
		return x.Grouping
	}
	return nil
}

func (x *MoneroTransactionRsigData) GetMask() []byte {
	if x != nil {
		return x.Mask
	}
	return nil
}

func (x *MoneroTransactionRsigData) GetRsig() []byte {
	if x != nil {
		return x.Rsig
	}
	return nil
}

func (x *MoneroTransactionRsigData) GetRsigParts() [][]byte {
	if x != nil {
		return x.RsigParts
	}
	return nil
}

func (x *MoneroTransactionRsigData) GetBpVersion() uint32 {
	if x != nil && x.BpVersion != nil {
		return *x.BpVersion
	}
	return 0
}

// *
// Request: Ask device for public address derived from seed and address_n
// @start
// @next MoneroAddress
// @next Failure
type MoneroGetAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressN    []uint32           `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                                                                 // BIP-32 path to derive the key from master node
	ShowDisplay *bool              `protobuf:"varint,2,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"`                                                        // Optionally show on display before sending the result
	NetworkType *MoneroNetworkType `protobuf:"varint,3,opt,name=network_type,json=networkType,enum=hw.trezor.messages.monero.MoneroNetworkType,def=0" json:"network_type,omitempty"` // Network type
	Account     *uint32            `protobuf:"varint,4,opt,name=account" json:"account,omitempty"`                                                                                   // Major subaddr index
	Minor       *uint32            `protobuf:"varint,5,opt,name=minor" json:"minor,omitempty"`                                                                                       // Minor subaddr index
	PaymentId   []byte             `protobuf:"bytes,6,opt,name=payment_id,json=paymentId" json:"payment_id,omitempty"`                                                               // Payment ID for integrated address
}

// Default values for MoneroGetAddress fields.
const (
	Default_MoneroGetAddress_NetworkType = MoneroNetworkType_MAINNET
)

func (x *MoneroGetAddress) Reset() {
	*x = MoneroGetAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroGetAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroGetAddress) ProtoMessage() {}

func (x *MoneroGetAddress) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroGetAddress.ProtoReflect.Descriptor instead.
func (*MoneroGetAddress) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{3}
}

func (x *MoneroGetAddress) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *MoneroGetAddress) GetShowDisplay() bool {
	if x != nil && x.ShowDisplay != nil {
		return *x.ShowDisplay
	}
	return false
}

func (x *MoneroGetAddress) GetNetworkType() MoneroNetworkType {
	if x != nil && x.NetworkType != nil {
		return *x.NetworkType
	}
	return Default_MoneroGetAddress_NetworkType
}

func (x *MoneroGetAddress) GetAccount() uint32 {
	if x != nil && x.Account != nil {
		return *x.Account
	}
	return 0
}

func (x *MoneroGetAddress) GetMinor() uint32 {
	if x != nil && x.Minor != nil {
		return *x.Minor
	}
	return 0
}

func (x *MoneroGetAddress) GetPaymentId() []byte {
	if x != nil {
		return x.PaymentId
	}
	return nil
}

// *
// Response: Contains Monero watch-only credentials derived from device private seed
// @end
type MoneroAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (x *MoneroAddress) Reset() {
	*x = MoneroAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroAddress) ProtoMessage() {}

func (x *MoneroAddress) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroAddress.ProtoReflect.Descriptor instead.
func (*MoneroAddress) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{4}
}

func (x *MoneroAddress) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

// *
// Request: Ask device for watch only credentials
// @start
// @next MoneroWatchKey
// @next Failure
type MoneroGetWatchKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressN    []uint32           `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                                                                 // BIP-32 path to derive the key from master node
	NetworkType *MoneroNetworkType `protobuf:"varint,2,opt,name=network_type,json=networkType,enum=hw.trezor.messages.monero.MoneroNetworkType,def=0" json:"network_type,omitempty"` // Network type
}

// Default values for MoneroGetWatchKey fields.
const (
	Default_MoneroGetWatchKey_NetworkType = MoneroNetworkType_MAINNET
)

func (x *MoneroGetWatchKey) Reset() {
	*x = MoneroGetWatchKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroGetWatchKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroGetWatchKey) ProtoMessage() {}

func (x *MoneroGetWatchKey) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroGetWatchKey.ProtoReflect.Descriptor instead.
func (*MoneroGetWatchKey) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{5}
}

func (x *MoneroGetWatchKey) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *MoneroGetWatchKey) GetNetworkType() MoneroNetworkType {
	if x != nil && x.NetworkType != nil {
		return *x.NetworkType
	}
	return Default_MoneroGetWatchKey_NetworkType
}

// *
// Response: Contains Monero watch-only credentials derived from device private seed
// @end
type MoneroWatchKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WatchKey []byte `protobuf:"bytes,1,opt,name=watch_key,json=watchKey" json:"watch_key,omitempty"`
	Address  []byte `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (x *MoneroWatchKey) Reset() {
	*x = MoneroWatchKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroWatchKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroWatchKey) ProtoMessage() {}

func (x *MoneroWatchKey) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroWatchKey.ProtoReflect.Descriptor instead.
func (*MoneroWatchKey) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{6}
}

func (x *MoneroWatchKey) GetWatchKey() []byte {
	if x != nil {
		return x.WatchKey
	}
	return nil
}

func (x *MoneroWatchKey) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

// *
// Request: Sub request of MoneroTransactionSign. Initializes transaction signing.
// @start
// @next MoneroTransactionInitAck
type MoneroTransactionInitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version     *uint32                                             `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	AddressN    []uint32                                            `protobuf:"varint,2,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	NetworkType *MoneroNetworkType                                  `protobuf:"varint,3,opt,name=network_type,json=networkType,enum=hw.trezor.messages.monero.MoneroNetworkType,def=0" json:"network_type,omitempty"` // Network type
	TsxData     *MoneroTransactionInitRequest_MoneroTransactionData `protobuf:"bytes,4,opt,name=tsx_data,json=tsxData" json:"tsx_data,omitempty"`
}

// Default values for MoneroTransactionInitRequest fields.
const (
	Default_MoneroTransactionInitRequest_NetworkType = MoneroNetworkType_MAINNET
)

func (x *MoneroTransactionInitRequest) Reset() {
	*x = MoneroTransactionInitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroTransactionInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroTransactionInitRequest) ProtoMessage() {}

func (x *MoneroTransactionInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroTransactionInitRequest.ProtoReflect.Descriptor instead.
func (*MoneroTransactionInitRequest) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{7}
}

func (x *MoneroTransactionInitRequest) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *MoneroTransactionInitRequest) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *MoneroTransactionInitRequest) GetNetworkType() MoneroNetworkType {
	if x != nil && x.NetworkType != nil {
		return *x.NetworkType
	}
	return Default_MoneroTransactionInitRequest_NetworkType
}

func (x *MoneroTransactionInitRequest) GetTsxData() *MoneroTransactionInitRequest_MoneroTransactionData {
	if x != nil {
		return x.TsxData
	}
	return nil
}

// *
// Response: Response to transaction signing initialization.
// @next MoneroTransactionSetInputRequest
type MoneroTransactionInitAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hmacs    [][]byte                   `protobuf:"bytes,1,rep,name=hmacs" json:"hmacs,omitempty"`
	RsigData *MoneroTransactionRsigData `protobuf:"bytes,2,opt,name=rsig_data,json=rsigData" json:"rsig_data,omitempty"`
}

func (x *MoneroTransactionInitAck) Reset() {
	*x = MoneroTransactionInitAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroTransactionInitAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroTransactionInitAck) ProtoMessage() {}

func (x *MoneroTransactionInitAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroTransactionInitAck.ProtoReflect.Descriptor instead.
func (*MoneroTransactionInitAck) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{8}
}

func (x *MoneroTransactionInitAck) GetHmacs() [][]byte {
	if x != nil {
		return x.Hmacs
	}
	return nil
}

func (x *MoneroTransactionInitAck) GetRsigData() *MoneroTransactionRsigData {
	if x != nil {
		return x.RsigData
	}
	return nil
}

// *
// Request: Sub request of MoneroTransactionSign. Sends one UTXO to device
// @next MoneroTransactionSetInputAck
type MoneroTransactionSetInputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcEntr *MoneroTransactionSourceEntry `protobuf:"bytes,1,opt,name=src_entr,json=srcEntr" json:"src_entr,omitempty"`
}

func (x *MoneroTransactionSetInputRequest) Reset() {
	*x = MoneroTransactionSetInputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroTransactionSetInputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroTransactionSetInputRequest) ProtoMessage() {}

func (x *MoneroTransactionSetInputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroTransactionSetInputRequest.ProtoReflect.Descriptor instead.
func (*MoneroTransactionSetInputRequest) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{9}
}

func (x *MoneroTransactionSetInputRequest) GetSrcEntr() *MoneroTransactionSourceEntry {
	if x != nil {
		return x.SrcEntr
	}
	return nil
}

// *
// Response: Response to setting UTXO for signature. Contains sealed values needed for further protocol steps.
// @next MoneroTransactionSetInputAck
// @next MoneroTransactionInputViniRequest
type MoneroTransactionSetInputAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vini           []byte `protobuf:"bytes,1,opt,name=vini" json:"vini,omitempty"` // xmrtypes.TxinToKey
	ViniHmac       []byte `protobuf:"bytes,2,opt,name=vini_hmac,json=viniHmac" json:"vini_hmac,omitempty"`
	PseudoOut      []byte `protobuf:"bytes,3,opt,name=pseudo_out,json=pseudoOut" json:"pseudo_out,omitempty"`
	PseudoOutHmac  []byte `protobuf:"bytes,4,opt,name=pseudo_out_hmac,json=pseudoOutHmac" json:"pseudo_out_hmac,omitempty"`
	PseudoOutAlpha []byte `protobuf:"bytes,5,opt,name=pseudo_out_alpha,json=pseudoOutAlpha" json:"pseudo_out_alpha,omitempty"`
	SpendKey       []byte `protobuf:"bytes,6,opt,name=spend_key,json=spendKey" json:"spend_key,omitempty"`
}

func (x *MoneroTransactionSetInputAck) Reset() {
	*x = MoneroTransactionSetInputAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroTransactionSetInputAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroTransactionSetInputAck) ProtoMessage() {}

func (x *MoneroTransactionSetInputAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroTransactionSetInputAck.ProtoReflect.Descriptor instead.
func (*MoneroTransactionSetInputAck) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{10}
}

func (x *MoneroTransactionSetInputAck) GetVini() []byte {
	if x != nil {
		return x.Vini
	}
	return nil
}

func (x *MoneroTransactionSetInputAck) GetViniHmac() []byte {
	if x != nil {
		return x.ViniHmac
	}
	return nil
}

func (x *MoneroTransactionSetInputAck) GetPseudoOut() []byte {
	if x != nil {
		return x.PseudoOut
	}
	return nil
}

func (x *MoneroTransactionSetInputAck) GetPseudoOutHmac() []byte {
	if x != nil {
		return x.PseudoOutHmac
	}
	return nil
}

func (x *MoneroTransactionSetInputAck) GetPseudoOutAlpha() []byte {
	if x != nil {
		return x.PseudoOutAlpha
	}
	return nil
}

func (x *MoneroTransactionSetInputAck) GetSpendKey() []byte {
	if x != nil {
		return x.SpendKey
	}
	return nil
}

// *
// Request: Sub request of MoneroTransactionSign. Sends one UTXO to device together with sealed values.
// @next MoneroTransactionInputViniAck
type MoneroTransactionInputViniRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcEntr       *MoneroTransactionSourceEntry `protobuf:"bytes,1,opt,name=src_entr,json=srcEntr" json:"src_entr,omitempty"`
	Vini          []byte                        `protobuf:"bytes,2,opt,name=vini" json:"vini,omitempty"` // xmrtypes.TxinToKey
	ViniHmac      []byte                        `protobuf:"bytes,3,opt,name=vini_hmac,json=viniHmac" json:"vini_hmac,omitempty"`
	PseudoOut     []byte                        `protobuf:"bytes,4,opt,name=pseudo_out,json=pseudoOut" json:"pseudo_out,omitempty"`
	PseudoOutHmac []byte                        `protobuf:"bytes,5,opt,name=pseudo_out_hmac,json=pseudoOutHmac" json:"pseudo_out_hmac,omitempty"`
	OrigIdx       *uint32                       `protobuf:"varint,6,opt,name=orig_idx,json=origIdx" json:"orig_idx,omitempty"` // original sort index, before sorting by key-images
}

func (x *MoneroTransactionInputViniRequest) Reset() {
	*x = MoneroTransactionInputViniRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroTransactionInputViniRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroTransactionInputViniRequest) ProtoMessage() {}

func (x *MoneroTransactionInputViniRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroTransactionInputViniRequest.ProtoReflect.Descriptor instead.
func (*MoneroTransactionInputViniRequest) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{11}
}

func (x *MoneroTransactionInputViniRequest) GetSrcEntr() *MoneroTransactionSourceEntry {
	if x != nil {
		return x.SrcEntr
	}
	return nil
}

func (x *MoneroTransactionInputViniRequest) GetVini() []byte {
	if x != nil {
		return x.Vini
	}
	return nil
}

func (x *MoneroTransactionInputViniRequest) GetViniHmac() []byte {
	if x != nil {
		return x.ViniHmac
	}
	return nil
}

func (x *MoneroTransactionInputViniRequest) GetPseudoOut() []byte {
	if x != nil {
		return x.PseudoOut
	}
	return nil
}

func (x *MoneroTransactionInputViniRequest) GetPseudoOutHmac() []byte {
	if x != nil {
		return x.PseudoOutHmac
	}
	return nil
}

func (x *MoneroTransactionInputViniRequest) GetOrigIdx() uint32 {
	if x != nil && x.OrigIdx != nil {
		return *x.OrigIdx
	}
	return 0
}

// *
// Response: Response to setting UTXO to the device
// @next MoneroTransactionInputViniRequest
// @next MoneroTransactionAllInputsSetRequest
type MoneroTransactionInputViniAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MoneroTransactionInputViniAck) Reset() {
	*x = MoneroTransactionInputViniAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroTransactionInputViniAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroTransactionInputViniAck) ProtoMessage() {}

func (x *MoneroTransactionInputViniAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroTransactionInputViniAck.ProtoReflect.Descriptor instead.
func (*MoneroTransactionInputViniAck) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{12}
}

// *
// Request: Sub request of MoneroTransactionSign. Sent after all inputs have been sent. Useful for rangeisg offloading.
// @next MoneroTransactionAllInputsSetAck
type MoneroTransactionAllInputsSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MoneroTransactionAllInputsSetRequest) Reset() {
	*x = MoneroTransactionAllInputsSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroTransactionAllInputsSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroTransactionAllInputsSetRequest) ProtoMessage() {}

func (x *MoneroTransactionAllInputsSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroTransactionAllInputsSetRequest.ProtoReflect.Descriptor instead.
func (*MoneroTransactionAllInputsSetRequest) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{13}
}

// *
// Response: Response to after all inputs have been set.
// @next MoneroTransactionSetOutputRequest
type MoneroTransactionAllInputsSetAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RsigData *MoneroTransactionRsigData `protobuf:"bytes,1,opt,name=rsig_data,json=rsigData" json:"rsig_data,omitempty"`
}

func (x *MoneroTransactionAllInputsSetAck) Reset() {
	*x = MoneroTransactionAllInputsSetAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroTransactionAllInputsSetAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroTransactionAllInputsSetAck) ProtoMessage() {}

func (x *MoneroTransactionAllInputsSetAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroTransactionAllInputsSetAck.ProtoReflect.Descriptor instead.
func (*MoneroTransactionAllInputsSetAck) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{14}
}

func (x *MoneroTransactionAllInputsSetAck) GetRsigData() *MoneroTransactionRsigData {
	if x != nil {
		return x.RsigData
	}
	return nil
}

// *
// Request: Sub request of MoneroTransactionSign. Sends one transaction destination to device (HMACed)
// @next MoneroTransactionSetOutputAck
type MoneroTransactionSetOutputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DstEntr       *MoneroTransactionDestinationEntry `protobuf:"bytes,1,opt,name=dst_entr,json=dstEntr" json:"dst_entr,omitempty"`
	DstEntrHmac   []byte                             `protobuf:"bytes,2,opt,name=dst_entr_hmac,json=dstEntrHmac" json:"dst_entr_hmac,omitempty"`
	RsigData      *MoneroTransactionRsigData         `protobuf:"bytes,3,opt,name=rsig_data,json=rsigData" json:"rsig_data,omitempty"`
	IsOffloadedBp *bool                              `protobuf:"varint,4,opt,name=is_offloaded_bp,json=isOffloadedBp" json:"is_offloaded_bp,omitempty"` // Extra message, with offloaded BP.
}

func (x *MoneroTransactionSetOutputRequest) Reset() {
	*x = MoneroTransactionSetOutputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroTransactionSetOutputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroTransactionSetOutputRequest) ProtoMessage() {}

func (x *MoneroTransactionSetOutputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroTransactionSetOutputRequest.ProtoReflect.Descriptor instead.
func (*MoneroTransactionSetOutputRequest) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{15}
}

func (x *MoneroTransactionSetOutputRequest) GetDstEntr() *MoneroTransactionDestinationEntry {
	if x != nil {
		return x.DstEntr
	}
	return nil
}

func (x *MoneroTransactionSetOutputRequest) GetDstEntrHmac() []byte {
	if x != nil {
		return x.DstEntrHmac
	}
	return nil
}

func (x *MoneroTransactionSetOutputRequest) GetRsigData() *MoneroTransactionRsigData {
	if x != nil {
		return x.RsigData
	}
	return nil
}

func (x *MoneroTransactionSetOutputRequest) GetIsOffloadedBp() bool {
	if x != nil && x.IsOffloadedBp != nil {
		return *x.IsOffloadedBp
	}
	return false
}

// *
// Response: Response to setting transaction destination. Contains sealed values needed for further protocol steps.
// @next MoneroTransactionSetOutputRequest
// @next MoneroTransactionAllOutSetRequest
type MoneroTransactionSetOutputAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxOut     []byte                     `protobuf:"bytes,1,opt,name=tx_out,json=txOut" json:"tx_out,omitempty"` // xmrtypes.TxOut
	VoutiHmac []byte                     `protobuf:"bytes,2,opt,name=vouti_hmac,json=voutiHmac" json:"vouti_hmac,omitempty"`
	RsigData  *MoneroTransactionRsigData `protobuf:"bytes,3,opt,name=rsig_data,json=rsigData" json:"rsig_data,omitempty"`
	OutPk     []byte                     `protobuf:"bytes,4,opt,name=out_pk,json=outPk" json:"out_pk,omitempty"`
	EcdhInfo  []byte                     `protobuf:"bytes,5,opt,name=ecdh_info,json=ecdhInfo" json:"ecdh_info,omitempty"`
}

func (x *MoneroTransactionSetOutputAck) Reset() {
	*x = MoneroTransactionSetOutputAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroTransactionSetOutputAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroTransactionSetOutputAck) ProtoMessage() {}

func (x *MoneroTransactionSetOutputAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroTransactionSetOutputAck.ProtoReflect.Descriptor instead.
func (*MoneroTransactionSetOutputAck) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{16}
}

func (x *MoneroTransactionSetOutputAck) GetTxOut() []byte {
	if x != nil {
		return x.TxOut
	}
	return nil
}

func (x *MoneroTransactionSetOutputAck) GetVoutiHmac() []byte {
	if x != nil {
		return x.VoutiHmac
	}
	return nil
}

func (x *MoneroTransactionSetOutputAck) GetRsigData() *MoneroTransactionRsigData {
	if x != nil {
		return x.RsigData
	}
	return nil
}

func (x *MoneroTransactionSetOutputAck) GetOutPk() []byte {
	if x != nil {
		return x.OutPk
	}
	return nil
}

func (x *MoneroTransactionSetOutputAck) GetEcdhInfo() []byte {
	if x != nil {
		return x.EcdhInfo
	}
	return nil
}

// *
// Request: Sub request of MoneroTransactionSign. Sent after all outputs are sent.
// @next MoneroTransactionAllOutSetAck
type MoneroTransactionAllOutSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RsigData *MoneroTransactionRsigData `protobuf:"bytes,1,opt,name=rsig_data,json=rsigData" json:"rsig_data,omitempty"`
}

func (x *MoneroTransactionAllOutSetRequest) Reset() {
	*x = MoneroTransactionAllOutSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroTransactionAllOutSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroTransactionAllOutSetRequest) ProtoMessage() {}

func (x *MoneroTransactionAllOutSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroTransactionAllOutSetRequest.ProtoReflect.Descriptor instead.
func (*MoneroTransactionAllOutSetRequest) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{17}
}

func (x *MoneroTransactionAllOutSetRequest) GetRsigData() *MoneroTransactionRsigData {
	if x != nil {
		return x.RsigData
	}
	return nil
}

// *
// Response: After all outputs are sent the initial RCT signature fields are sent.
// @next MoneroTransactionSignInputRequest
type MoneroTransactionAllOutSetAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extra           []byte                                         `protobuf:"bytes,1,opt,name=extra" json:"extra,omitempty"`
	TxPrefixHash    []byte                                         `protobuf:"bytes,2,opt,name=tx_prefix_hash,json=txPrefixHash" json:"tx_prefix_hash,omitempty"`
	Rv              *MoneroTransactionAllOutSetAck_MoneroRingCtSig `protobuf:"bytes,4,opt,name=rv" json:"rv,omitempty"` // xmrtypes.RctSig
	FullMessageHash []byte                                         `protobuf:"bytes,5,opt,name=full_message_hash,json=fullMessageHash" json:"full_message_hash,omitempty"`
}

func (x *MoneroTransactionAllOutSetAck) Reset() {
	*x = MoneroTransactionAllOutSetAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroTransactionAllOutSetAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroTransactionAllOutSetAck) ProtoMessage() {}

func (x *MoneroTransactionAllOutSetAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroTransactionAllOutSetAck.ProtoReflect.Descriptor instead.
func (*MoneroTransactionAllOutSetAck) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{18}
}

func (x *MoneroTransactionAllOutSetAck) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *MoneroTransactionAllOutSetAck) GetTxPrefixHash() []byte {
	if x != nil {
		return x.TxPrefixHash
	}
	return nil
}

func (x *MoneroTransactionAllOutSetAck) GetRv() *MoneroTransactionAllOutSetAck_MoneroRingCtSig {
	if x != nil {
		return x.Rv
	}
	return nil
}

func (x *MoneroTransactionAllOutSetAck) GetFullMessageHash() []byte {
	if x != nil {
		return x.FullMessageHash
	}
	return nil
}

// *
// Request: Sub request of MoneroTransactionSign. Sends UTXO for the signing.
// @next MoneroTransactionSignInputAck
type MoneroTransactionSignInputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcEntr        *MoneroTransactionSourceEntry `protobuf:"bytes,1,opt,name=src_entr,json=srcEntr" json:"src_entr,omitempty"`
	Vini           []byte                        `protobuf:"bytes,2,opt,name=vini" json:"vini,omitempty"` // xmrtypes.TxinToKey
	ViniHmac       []byte                        `protobuf:"bytes,3,opt,name=vini_hmac,json=viniHmac" json:"vini_hmac,omitempty"`
	PseudoOut      []byte                        `protobuf:"bytes,4,opt,name=pseudo_out,json=pseudoOut" json:"pseudo_out,omitempty"`
	PseudoOutHmac  []byte                        `protobuf:"bytes,5,opt,name=pseudo_out_hmac,json=pseudoOutHmac" json:"pseudo_out_hmac,omitempty"`
	PseudoOutAlpha []byte                        `protobuf:"bytes,6,opt,name=pseudo_out_alpha,json=pseudoOutAlpha" json:"pseudo_out_alpha,omitempty"`
	SpendKey       []byte                        `protobuf:"bytes,7,opt,name=spend_key,json=spendKey" json:"spend_key,omitempty"`
	OrigIdx        *uint32                       `protobuf:"varint,8,opt,name=orig_idx,json=origIdx" json:"orig_idx,omitempty"` // original sort index, before sorting by key-images
}

func (x *MoneroTransactionSignInputRequest) Reset() {
	*x = MoneroTransactionSignInputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroTransactionSignInputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroTransactionSignInputRequest) ProtoMessage() {}

func (x *MoneroTransactionSignInputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroTransactionSignInputRequest.ProtoReflect.Descriptor instead.
func (*MoneroTransactionSignInputRequest) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{19}
}

func (x *MoneroTransactionSignInputRequest) GetSrcEntr() *MoneroTransactionSourceEntry {
	if x != nil {
		return x.SrcEntr
	}
	return nil
}

func (x *MoneroTransactionSignInputRequest) GetVini() []byte {
	if x != nil {
		return x.Vini
	}
	return nil
}

func (x *MoneroTransactionSignInputRequest) GetViniHmac() []byte {
	if x != nil {
		return x.ViniHmac
	}
	return nil
}

func (x *MoneroTransactionSignInputRequest) GetPseudoOut() []byte {
	if x != nil {
		return x.PseudoOut
	}
	return nil
}

func (x *MoneroTransactionSignInputRequest) GetPseudoOutHmac() []byte {
	if x != nil {
		return x.PseudoOutHmac
	}
	return nil
}

func (x *MoneroTransactionSignInputRequest) GetPseudoOutAlpha() []byte {
	if x != nil {
		return x.PseudoOutAlpha
	}
	return nil
}

func (x *MoneroTransactionSignInputRequest) GetSpendKey() []byte {
	if x != nil {
		return x.SpendKey
	}
	return nil
}

func (x *MoneroTransactionSignInputRequest) GetOrigIdx() uint32 {
	if x != nil && x.OrigIdx != nil {
		return *x.OrigIdx
	}
	return 0
}

// *
// Response: Contains full MG signature of the UTXO + multisig data if applicable.
// @next MoneroTransactionSignInputRequest
// @next MoneroTransactionFinalRequest
type MoneroTransactionSignInputAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte `protobuf:"bytes,1,opt,name=signature" json:"signature,omitempty"`
	PseudoOut []byte `protobuf:"bytes,2,opt,name=pseudo_out,json=pseudoOut" json:"pseudo_out,omitempty"` // updated pseudo-out after mask correction
}

func (x *MoneroTransactionSignInputAck) Reset() {
	*x = MoneroTransactionSignInputAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroTransactionSignInputAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroTransactionSignInputAck) ProtoMessage() {}

func (x *MoneroTransactionSignInputAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroTransactionSignInputAck.ProtoReflect.Descriptor instead.
func (*MoneroTransactionSignInputAck) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{20}
}

func (x *MoneroTransactionSignInputAck) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *MoneroTransactionSignInputAck) GetPseudoOut() []byte {
	if x != nil {
		return x.PseudoOut
	}
	return nil
}

// *
// Request: Sub request of MoneroTransactionSign. Final message of the procol after all UTXOs are signed
// @next MoneroTransactionFinalAck
type MoneroTransactionFinalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MoneroTransactionFinalRequest) Reset() {
	*x = MoneroTransactionFinalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroTransactionFinalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroTransactionFinalRequest) ProtoMessage() {}

func (x *MoneroTransactionFinalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroTransactionFinalRequest.ProtoReflect.Descriptor instead.
func (*MoneroTransactionFinalRequest) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{21}
}

// *
// Response: Contains transaction metadata and encryption keys needed for further transaction operations (e.g. multisig, send proof).
// @end
type MoneroTransactionFinalAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoutKey    []byte `protobuf:"bytes,1,opt,name=cout_key,json=coutKey" json:"cout_key,omitempty"`
	Salt       []byte `protobuf:"bytes,2,opt,name=salt" json:"salt,omitempty"`
	RandMult   []byte `protobuf:"bytes,3,opt,name=rand_mult,json=randMult" json:"rand_mult,omitempty"`
	TxEncKeys  []byte `protobuf:"bytes,4,opt,name=tx_enc_keys,json=txEncKeys" json:"tx_enc_keys,omitempty"`
	OpeningKey []byte `protobuf:"bytes,5,opt,name=opening_key,json=openingKey" json:"opening_key,omitempty"` // enc master key to decrypt CLSAGs after protocol finishes correctly
}

func (x *MoneroTransactionFinalAck) Reset() {
	*x = MoneroTransactionFinalAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroTransactionFinalAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroTransactionFinalAck) ProtoMessage() {}

func (x *MoneroTransactionFinalAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroTransactionFinalAck.ProtoReflect.Descriptor instead.
func (*MoneroTransactionFinalAck) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{22}
}

func (x *MoneroTransactionFinalAck) GetCoutKey() []byte {
	if x != nil {
		return x.CoutKey
	}
	return nil
}

func (x *MoneroTransactionFinalAck) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *MoneroTransactionFinalAck) GetRandMult() []byte {
	if x != nil {
		return x.RandMult
	}
	return nil
}

func (x *MoneroTransactionFinalAck) GetTxEncKeys() []byte {
	if x != nil {
		return x.TxEncKeys
	}
	return nil
}

func (x *MoneroTransactionFinalAck) GetOpeningKey() []byte {
	if x != nil {
		return x.OpeningKey
	}
	return nil
}

// *
// Request: Sub request of MoneroKeyImageSync. Initializing key image sync.
// @start
// @next MoneroKeyImageExportInitAck
type MoneroKeyImageExportInitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num         *uint64                                                        `protobuf:"varint,1,req,name=num" json:"num,omitempty"`
	Hash        []byte                                                         `protobuf:"bytes,2,req,name=hash" json:"hash,omitempty"`
	AddressN    []uint32                                                       `protobuf:"varint,3,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                                                                 // BIP-32 path to derive the key from master node
	NetworkType *MoneroNetworkType                                             `protobuf:"varint,4,opt,name=network_type,json=networkType,enum=hw.trezor.messages.monero.MoneroNetworkType,def=0" json:"network_type,omitempty"` // network type
	Subs        []*MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList `protobuf:"bytes,5,rep,name=subs" json:"subs,omitempty"`
}

// Default values for MoneroKeyImageExportInitRequest fields.
const (
	Default_MoneroKeyImageExportInitRequest_NetworkType = MoneroNetworkType_MAINNET
)

func (x *MoneroKeyImageExportInitRequest) Reset() {
	*x = MoneroKeyImageExportInitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroKeyImageExportInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroKeyImageExportInitRequest) ProtoMessage() {}

func (x *MoneroKeyImageExportInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroKeyImageExportInitRequest.ProtoReflect.Descriptor instead.
func (*MoneroKeyImageExportInitRequest) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{23}
}

func (x *MoneroKeyImageExportInitRequest) GetNum() uint64 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *MoneroKeyImageExportInitRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *MoneroKeyImageExportInitRequest) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *MoneroKeyImageExportInitRequest) GetNetworkType() MoneroNetworkType {
	if x != nil && x.NetworkType != nil {
		return *x.NetworkType
	}
	return Default_MoneroKeyImageExportInitRequest_NetworkType
}

func (x *MoneroKeyImageExportInitRequest) GetSubs() []*MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList {
	if x != nil {
		return x.Subs
	}
	return nil
}

// *
// Response: Response to key image sync initialization.
// @next MoneroKeyImageSyncStepRequest
type MoneroKeyImageExportInitAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MoneroKeyImageExportInitAck) Reset() {
	*x = MoneroKeyImageExportInitAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroKeyImageExportInitAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroKeyImageExportInitAck) ProtoMessage() {}

func (x *MoneroKeyImageExportInitAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroKeyImageExportInitAck.ProtoReflect.Descriptor instead.
func (*MoneroKeyImageExportInitAck) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{24}
}

// *
// Request: Sub request of MoneroKeyImageSync. Contains batch of the UTXO to export key image for.
// @next MoneroKeyImageSyncStepAck
type MoneroKeyImageSyncStepRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tdis []*MoneroKeyImageSyncStepRequest_MoneroTransferDetails `protobuf:"bytes,1,rep,name=tdis" json:"tdis,omitempty"`
}

func (x *MoneroKeyImageSyncStepRequest) Reset() {
	*x = MoneroKeyImageSyncStepRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroKeyImageSyncStepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroKeyImageSyncStepRequest) ProtoMessage() {}

func (x *MoneroKeyImageSyncStepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroKeyImageSyncStepRequest.ProtoReflect.Descriptor instead.
func (*MoneroKeyImageSyncStepRequest) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{25}
}

func (x *MoneroKeyImageSyncStepRequest) GetTdis() []*MoneroKeyImageSyncStepRequest_MoneroTransferDetails {
	if x != nil {
		return x.Tdis
	}
	return nil
}

// *
// Response: Response to key image sync step. Contains encrypted exported key image.
// @next MoneroKeyImageSyncStepRequest
// @next MoneroKeyImageSyncFinalRequest
type MoneroKeyImageSyncStepAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kis []*MoneroKeyImageSyncStepAck_MoneroExportedKeyImage `protobuf:"bytes,1,rep,name=kis" json:"kis,omitempty"`
}

func (x *MoneroKeyImageSyncStepAck) Reset() {
	*x = MoneroKeyImageSyncStepAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroKeyImageSyncStepAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroKeyImageSyncStepAck) ProtoMessage() {}

func (x *MoneroKeyImageSyncStepAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroKeyImageSyncStepAck.ProtoReflect.Descriptor instead.
func (*MoneroKeyImageSyncStepAck) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{26}
}

func (x *MoneroKeyImageSyncStepAck) GetKis() []*MoneroKeyImageSyncStepAck_MoneroExportedKeyImage {
	if x != nil {
		return x.Kis
	}
	return nil
}

// *
// Request: Sub request of MoneroKeyImageSync. Final message of the sync protocol.
// @next MoneroKeyImageSyncFinalAck
type MoneroKeyImageSyncFinalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MoneroKeyImageSyncFinalRequest) Reset() {
	*x = MoneroKeyImageSyncFinalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroKeyImageSyncFinalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroKeyImageSyncFinalRequest) ProtoMessage() {}

func (x *MoneroKeyImageSyncFinalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroKeyImageSyncFinalRequest.ProtoReflect.Descriptor instead.
func (*MoneroKeyImageSyncFinalRequest) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{27}
}

// *
// Response: Response to key image sync step. Contains encryption keys for exported key images.
// @end
type MoneroKeyImageSyncFinalAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncKey []byte `protobuf:"bytes,1,opt,name=enc_key,json=encKey" json:"enc_key,omitempty"`
}

func (x *MoneroKeyImageSyncFinalAck) Reset() {
	*x = MoneroKeyImageSyncFinalAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroKeyImageSyncFinalAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroKeyImageSyncFinalAck) ProtoMessage() {}

func (x *MoneroKeyImageSyncFinalAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroKeyImageSyncFinalAck.ProtoReflect.Descriptor instead.
func (*MoneroKeyImageSyncFinalAck) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{28}
}

func (x *MoneroKeyImageSyncFinalAck) GetEncKey() []byte {
	if x != nil {
		return x.EncKey
	}
	return nil
}

// *
// Request: Decrypt tx private keys blob
// @next MoneroGetTxKeyAck
type MoneroGetTxKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressN      []uint32           `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                                                                 // BIP-32 path to derive the key from master node
	NetworkType   *MoneroNetworkType `protobuf:"varint,2,opt,name=network_type,json=networkType,enum=hw.trezor.messages.monero.MoneroNetworkType,def=0" json:"network_type,omitempty"` // network type
	Salt1         []byte             `protobuf:"bytes,3,req,name=salt1" json:"salt1,omitempty"`
	Salt2         []byte             `protobuf:"bytes,4,req,name=salt2" json:"salt2,omitempty"`
	TxEncKeys     []byte             `protobuf:"bytes,5,req,name=tx_enc_keys,json=txEncKeys" json:"tx_enc_keys,omitempty"`
	TxPrefixHash  []byte             `protobuf:"bytes,6,req,name=tx_prefix_hash,json=txPrefixHash" json:"tx_prefix_hash,omitempty"`
	Reason        *uint32            `protobuf:"varint,7,opt,name=reason" json:"reason,omitempty"`                                     // reason to display for user. e.g., tx_proof
	ViewPublicKey []byte             `protobuf:"bytes,8,opt,name=view_public_key,json=viewPublicKey" json:"view_public_key,omitempty"` // addr for derivation
}

// Default values for MoneroGetTxKeyRequest fields.
const (
	Default_MoneroGetTxKeyRequest_NetworkType = MoneroNetworkType_MAINNET
)

func (x *MoneroGetTxKeyRequest) Reset() {
	*x = MoneroGetTxKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroGetTxKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroGetTxKeyRequest) ProtoMessage() {}

func (x *MoneroGetTxKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroGetTxKeyRequest.ProtoReflect.Descriptor instead.
func (*MoneroGetTxKeyRequest) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{29}
}

func (x *MoneroGetTxKeyRequest) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *MoneroGetTxKeyRequest) GetNetworkType() MoneroNetworkType {
	if x != nil && x.NetworkType != nil {
		return *x.NetworkType
	}
	return Default_MoneroGetTxKeyRequest_NetworkType
}

func (x *MoneroGetTxKeyRequest) GetSalt1() []byte {
	if x != nil {
		return x.Salt1
	}
	return nil
}

func (x *MoneroGetTxKeyRequest) GetSalt2() []byte {
	if x != nil {
		return x.Salt2
	}
	return nil
}

func (x *MoneroGetTxKeyRequest) GetTxEncKeys() []byte {
	if x != nil {
		return x.TxEncKeys
	}
	return nil
}

func (x *MoneroGetTxKeyRequest) GetTxPrefixHash() []byte {
	if x != nil {
		return x.TxPrefixHash
	}
	return nil
}

func (x *MoneroGetTxKeyRequest) GetReason() uint32 {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return 0
}

func (x *MoneroGetTxKeyRequest) GetViewPublicKey() []byte {
	if x != nil {
		return x.ViewPublicKey
	}
	return nil
}

// *
// Response: Response with the re-encrypted private keys and derivations blob under view key
// @end
type MoneroGetTxKeyAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt          []byte `protobuf:"bytes,1,opt,name=salt" json:"salt,omitempty"`
	TxKeys        []byte `protobuf:"bytes,2,opt,name=tx_keys,json=txKeys" json:"tx_keys,omitempty"`
	TxDerivations []byte `protobuf:"bytes,3,opt,name=tx_derivations,json=txDerivations" json:"tx_derivations,omitempty"`
}

func (x *MoneroGetTxKeyAck) Reset() {
	*x = MoneroGetTxKeyAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroGetTxKeyAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroGetTxKeyAck) ProtoMessage() {}

func (x *MoneroGetTxKeyAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroGetTxKeyAck.ProtoReflect.Descriptor instead.
func (*MoneroGetTxKeyAck) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{30}
}

func (x *MoneroGetTxKeyAck) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *MoneroGetTxKeyAck) GetTxKeys() []byte {
	if x != nil {
		return x.TxKeys
	}
	return nil
}

func (x *MoneroGetTxKeyAck) GetTxDerivations() []byte {
	if x != nil {
		return x.TxDerivations
	}
	return nil
}

// *
// Request: Starts live refresh flow. Asks user permission, switches state
// @next MoneroLiveRefreshStartAck
type MoneroLiveRefreshStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressN    []uint32           `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                                                                 // BIP-32 path to derive the key from master node
	NetworkType *MoneroNetworkType `protobuf:"varint,2,opt,name=network_type,json=networkType,enum=hw.trezor.messages.monero.MoneroNetworkType,def=0" json:"network_type,omitempty"` // network type
}

// Default values for MoneroLiveRefreshStartRequest fields.
const (
	Default_MoneroLiveRefreshStartRequest_NetworkType = MoneroNetworkType_MAINNET
)

func (x *MoneroLiveRefreshStartRequest) Reset() {
	*x = MoneroLiveRefreshStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroLiveRefreshStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroLiveRefreshStartRequest) ProtoMessage() {}

func (x *MoneroLiveRefreshStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroLiveRefreshStartRequest.ProtoReflect.Descriptor instead.
func (*MoneroLiveRefreshStartRequest) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{31}
}

func (x *MoneroLiveRefreshStartRequest) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *MoneroLiveRefreshStartRequest) GetNetworkType() MoneroNetworkType {
	if x != nil && x.NetworkType != nil {
		return *x.NetworkType
	}
	return Default_MoneroLiveRefreshStartRequest_NetworkType
}

// *
// Response after user gave permission
// @next MoneroLiveRefreshStepRequest
// @next MoneroLiveRefreshFinalRequest
type MoneroLiveRefreshStartAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MoneroLiveRefreshStartAck) Reset() {
	*x = MoneroLiveRefreshStartAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroLiveRefreshStartAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroLiveRefreshStartAck) ProtoMessage() {}

func (x *MoneroLiveRefreshStartAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroLiveRefreshStartAck.ProtoReflect.Descriptor instead.
func (*MoneroLiveRefreshStartAck) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{32}
}

// *
// Request: Request to compute a single key image during live sync
// @next MoneroLiveRefreshStepAck
type MoneroLiveRefreshStepRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutKey       []byte  `protobuf:"bytes,1,req,name=out_key,json=outKey" json:"out_key,omitempty"`
	RecvDeriv    []byte  `protobuf:"bytes,2,req,name=recv_deriv,json=recvDeriv" json:"recv_deriv,omitempty"`
	RealOutIdx   *uint64 `protobuf:"varint,3,req,name=real_out_idx,json=realOutIdx" json:"real_out_idx,omitempty"`
	SubAddrMajor *uint32 `protobuf:"varint,4,req,name=sub_addr_major,json=subAddrMajor" json:"sub_addr_major,omitempty"`
	SubAddrMinor *uint32 `protobuf:"varint,5,req,name=sub_addr_minor,json=subAddrMinor" json:"sub_addr_minor,omitempty"`
}

func (x *MoneroLiveRefreshStepRequest) Reset() {
	*x = MoneroLiveRefreshStepRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroLiveRefreshStepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroLiveRefreshStepRequest) ProtoMessage() {}

func (x *MoneroLiveRefreshStepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroLiveRefreshStepRequest.ProtoReflect.Descriptor instead.
func (*MoneroLiveRefreshStepRequest) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{33}
}

func (x *MoneroLiveRefreshStepRequest) GetOutKey() []byte {
	if x != nil {
		return x.OutKey
	}
	return nil
}

func (x *MoneroLiveRefreshStepRequest) GetRecvDeriv() []byte {
	if x != nil {
		return x.RecvDeriv
	}
	return nil
}

func (x *MoneroLiveRefreshStepRequest) GetRealOutIdx() uint64 {
	if x != nil && x.RealOutIdx != nil {
		return *x.RealOutIdx
	}
	return 0
}

func (x *MoneroLiveRefreshStepRequest) GetSubAddrMajor() uint32 {
	if x != nil && x.SubAddrMajor != nil {
		return *x.SubAddrMajor
	}
	return 0
}

func (x *MoneroLiveRefreshStepRequest) GetSubAddrMinor() uint32 {
	if x != nil && x.SubAddrMinor != nil {
		return *x.SubAddrMinor
	}
	return 0
}

// *
// Response: Response with the encrypted key image + signature
// @next MoneroLiveRefreshStepRequest
// @next MoneroLiveRefreshFinishedRequest
type MoneroLiveRefreshStepAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt     []byte `protobuf:"bytes,1,opt,name=salt" json:"salt,omitempty"`
	KeyImage []byte `protobuf:"bytes,2,opt,name=key_image,json=keyImage" json:"key_image,omitempty"`
}

func (x *MoneroLiveRefreshStepAck) Reset() {
	*x = MoneroLiveRefreshStepAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroLiveRefreshStepAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroLiveRefreshStepAck) ProtoMessage() {}

func (x *MoneroLiveRefreshStepAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroLiveRefreshStepAck.ProtoReflect.Descriptor instead.
func (*MoneroLiveRefreshStepAck) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{34}
}

func (x *MoneroLiveRefreshStepAck) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *MoneroLiveRefreshStepAck) GetKeyImage() []byte {
	if x != nil {
		return x.KeyImage
	}
	return nil
}

// *
// Request: Request terminating live refresh mode.
// @next MoneroLiveRefreshFinishedAck
type MoneroLiveRefreshFinalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MoneroLiveRefreshFinalRequest) Reset() {
	*x = MoneroLiveRefreshFinalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroLiveRefreshFinalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroLiveRefreshFinalRequest) ProtoMessage() {}

func (x *MoneroLiveRefreshFinalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroLiveRefreshFinalRequest.ProtoReflect.Descriptor instead.
func (*MoneroLiveRefreshFinalRequest) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{35}
}

// *
// Response: Response on termination of live refresh mode.
// @end
type MoneroLiveRefreshFinalAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MoneroLiveRefreshFinalAck) Reset() {
	*x = MoneroLiveRefreshFinalAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroLiveRefreshFinalAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroLiveRefreshFinalAck) ProtoMessage() {}

func (x *MoneroLiveRefreshFinalAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroLiveRefreshFinalAck.ProtoReflect.Descriptor instead.
func (*MoneroLiveRefreshFinalAck) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{36}
}

// *
// Request: Universal Monero protocol implementation diagnosis request.
// @start
// @next DebugMoneroDiagAck
type DebugMoneroDiagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ins   *uint64  `protobuf:"varint,1,opt,name=ins" json:"ins,omitempty"`
	P1    *uint64  `protobuf:"varint,2,opt,name=p1" json:"p1,omitempty"`
	P2    *uint64  `protobuf:"varint,3,opt,name=p2" json:"p2,omitempty"`
	Pd    []uint64 `protobuf:"varint,4,rep,name=pd" json:"pd,omitempty"`
	Data1 []byte   `protobuf:"bytes,5,opt,name=data1" json:"data1,omitempty"`
	Data2 []byte   `protobuf:"bytes,6,opt,name=data2" json:"data2,omitempty"`
}

func (x *DebugMoneroDiagRequest) Reset() {
	*x = DebugMoneroDiagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugMoneroDiagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugMoneroDiagRequest) ProtoMessage() {}

func (x *DebugMoneroDiagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugMoneroDiagRequest.ProtoReflect.Descriptor instead.
func (*DebugMoneroDiagRequest) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{37}
}

func (x *DebugMoneroDiagRequest) GetIns() uint64 {
	if x != nil && x.Ins != nil {
		return *x.Ins
	}
	return 0
}

func (x *DebugMoneroDiagRequest) GetP1() uint64 {
	if x != nil && x.P1 != nil {
		return *x.P1
	}
	return 0
}

func (x *DebugMoneroDiagRequest) GetP2() uint64 {
	if x != nil && x.P2 != nil {
		return *x.P2
	}
	return 0
}

func (x *DebugMoneroDiagRequest) GetPd() []uint64 {
	if x != nil {
		return x.Pd
	}
	return nil
}

func (x *DebugMoneroDiagRequest) GetData1() []byte {
	if x != nil {
		return x.Data1
	}
	return nil
}

func (x *DebugMoneroDiagRequest) GetData2() []byte {
	if x != nil {
		return x.Data2
	}
	return nil
}

// *
// Response: Response to Monero diagnosis protocol.
// @end
type DebugMoneroDiagAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ins   *uint64  `protobuf:"varint,1,opt,name=ins" json:"ins,omitempty"`
	P1    *uint64  `protobuf:"varint,2,opt,name=p1" json:"p1,omitempty"`
	P2    *uint64  `protobuf:"varint,3,opt,name=p2" json:"p2,omitempty"`
	Pd    []uint64 `protobuf:"varint,4,rep,name=pd" json:"pd,omitempty"`
	Data1 []byte   `protobuf:"bytes,5,opt,name=data1" json:"data1,omitempty"`
	Data2 []byte   `protobuf:"bytes,6,opt,name=data2" json:"data2,omitempty"`
}

func (x *DebugMoneroDiagAck) Reset() {
	*x = DebugMoneroDiagAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugMoneroDiagAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugMoneroDiagAck) ProtoMessage() {}

func (x *DebugMoneroDiagAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugMoneroDiagAck.ProtoReflect.Descriptor instead.
func (*DebugMoneroDiagAck) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{38}
}

func (x *DebugMoneroDiagAck) GetIns() uint64 {
	if x != nil && x.Ins != nil {
		return *x.Ins
	}
	return 0
}

func (x *DebugMoneroDiagAck) GetP1() uint64 {
	if x != nil && x.P1 != nil {
		return *x.P1
	}
	return 0
}

func (x *DebugMoneroDiagAck) GetP2() uint64 {
	if x != nil && x.P2 != nil {
		return *x.P2
	}
	return 0
}

func (x *DebugMoneroDiagAck) GetPd() []uint64 {
	if x != nil {
		return x.Pd
	}
	return nil
}

func (x *DebugMoneroDiagAck) GetData1() []byte {
	if x != nil {
		return x.Data1
	}
	return nil
}

func (x *DebugMoneroDiagAck) GetData2() []byte {
	if x != nil {
		return x.Data2
	}
	return nil
}

type MoneroTransactionSourceEntry_MoneroOutputEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idx *uint64                                                            `protobuf:"varint,1,opt,name=idx" json:"idx,omitempty"`
	Key *MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (x *MoneroTransactionSourceEntry_MoneroOutputEntry) Reset() {
	*x = MoneroTransactionSourceEntry_MoneroOutputEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroTransactionSourceEntry_MoneroOutputEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroTransactionSourceEntry_MoneroOutputEntry) ProtoMessage() {}

func (x *MoneroTransactionSourceEntry_MoneroOutputEntry) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroTransactionSourceEntry_MoneroOutputEntry.ProtoReflect.Descriptor instead.
func (*MoneroTransactionSourceEntry_MoneroOutputEntry) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MoneroTransactionSourceEntry_MoneroOutputEntry) GetIdx() uint64 {
	if x != nil && x.Idx != nil {
		return *x.Idx
	}
	return 0
}

func (x *MoneroTransactionSourceEntry_MoneroOutputEntry) GetKey() *MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic {
	if x != nil {
		return x.Key
	}
	return nil
}

type MoneroTransactionSourceEntry_MoneroMultisigKLRki struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K  []byte `protobuf:"bytes,1,opt,name=K" json:"K,omitempty"`
	L  []byte `protobuf:"bytes,2,opt,name=L" json:"L,omitempty"`
	R  []byte `protobuf:"bytes,3,opt,name=R" json:"R,omitempty"`
	Ki []byte `protobuf:"bytes,4,opt,name=ki" json:"ki,omitempty"`
}

func (x *MoneroTransactionSourceEntry_MoneroMultisigKLRki) Reset() {
	*x = MoneroTransactionSourceEntry_MoneroMultisigKLRki{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroTransactionSourceEntry_MoneroMultisigKLRki) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroTransactionSourceEntry_MoneroMultisigKLRki) ProtoMessage() {}

func (x *MoneroTransactionSourceEntry_MoneroMultisigKLRki) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroTransactionSourceEntry_MoneroMultisigKLRki.ProtoReflect.Descriptor instead.
func (*MoneroTransactionSourceEntry_MoneroMultisigKLRki) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{0, 1}
}

func (x *MoneroTransactionSourceEntry_MoneroMultisigKLRki) GetK() []byte {
	if x != nil {
		return x.K
	}
	return nil
}

func (x *MoneroTransactionSourceEntry_MoneroMultisigKLRki) GetL() []byte {
	if x != nil {
		return x.L
	}
	return nil
}

func (x *MoneroTransactionSourceEntry_MoneroMultisigKLRki) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *MoneroTransactionSourceEntry_MoneroMultisigKLRki) GetKi() []byte {
	if x != nil {
		return x.Ki
	}
	return nil
}

type MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dest       []byte `protobuf:"bytes,1,req,name=dest" json:"dest,omitempty"`
	Commitment []byte `protobuf:"bytes,2,req,name=commitment" json:"commitment,omitempty"`
}

func (x *MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic) Reset() {
	*x = MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic) ProtoMessage() {}

func (x *MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic.ProtoReflect.Descriptor instead.
func (*MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic) GetDest() []byte {
	if x != nil {
		return x.Dest
	}
	return nil
}

func (x *MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic) GetCommitment() []byte {
	if x != nil {
		return x.Commitment
	}
	return nil
}

// *
// Structure representing Monero public address
type MoneroTransactionDestinationEntry_MoneroAccountPublicAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpendPublicKey []byte `protobuf:"bytes,1,opt,name=spend_public_key,json=spendPublicKey" json:"spend_public_key,omitempty"`
	ViewPublicKey  []byte `protobuf:"bytes,2,opt,name=view_public_key,json=viewPublicKey" json:"view_public_key,omitempty"`
}

func (x *MoneroTransactionDestinationEntry_MoneroAccountPublicAddress) Reset() {
	*x = MoneroTransactionDestinationEntry_MoneroAccountPublicAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroTransactionDestinationEntry_MoneroAccountPublicAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroTransactionDestinationEntry_MoneroAccountPublicAddress) ProtoMessage() {}

func (x *MoneroTransactionDestinationEntry_MoneroAccountPublicAddress) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroTransactionDestinationEntry_MoneroAccountPublicAddress.ProtoReflect.Descriptor instead.
func (*MoneroTransactionDestinationEntry_MoneroAccountPublicAddress) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{1, 0}
}

func (x *MoneroTransactionDestinationEntry_MoneroAccountPublicAddress) GetSpendPublicKey() []byte {
	if x != nil {
		return x.SpendPublicKey
	}
	return nil
}

func (x *MoneroTransactionDestinationEntry_MoneroAccountPublicAddress) GetViewPublicKey() []byte {
	if x != nil {
		return x.ViewPublicKey
	}
	return nil
}

// *
// Structure representing Monero initial transaction information
type MoneroTransactionInitRequest_MoneroTransactionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version           *uint32                              `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	PaymentId         []byte                               `protobuf:"bytes,2,opt,name=payment_id,json=paymentId" json:"payment_id,omitempty"`
	UnlockTime        *uint64                              `protobuf:"varint,3,opt,name=unlock_time,json=unlockTime" json:"unlock_time,omitempty"`
	Outputs           []*MoneroTransactionDestinationEntry `protobuf:"bytes,4,rep,name=outputs" json:"outputs,omitempty"`
	ChangeDts         *MoneroTransactionDestinationEntry   `protobuf:"bytes,5,opt,name=change_dts,json=changeDts" json:"change_dts,omitempty"`
	NumInputs         *uint32                              `protobuf:"varint,6,opt,name=num_inputs,json=numInputs" json:"num_inputs,omitempty"`
	Mixin             *uint32                              `protobuf:"varint,7,opt,name=mixin" json:"mixin,omitempty"`
	Fee               *uint64                              `protobuf:"varint,8,opt,name=fee" json:"fee,omitempty"`
	Account           *uint32                              `protobuf:"varint,9,opt,name=account" json:"account,omitempty"`
	MinorIndices      []uint32                             `protobuf:"varint,10,rep,name=minor_indices,json=minorIndices" json:"minor_indices,omitempty"`
	RsigData          *MoneroTransactionRsigData           `protobuf:"bytes,11,opt,name=rsig_data,json=rsigData" json:"rsig_data,omitempty"`
	IntegratedIndices []uint32                             `protobuf:"varint,12,rep,name=integrated_indices,json=integratedIndices" json:"integrated_indices,omitempty"`
	ClientVersion     *uint32                              `protobuf:"varint,13,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"` // connected client version
	HardFork          *uint32                              `protobuf:"varint,14,opt,name=hard_fork,json=hardFork" json:"hard_fork,omitempty"`                // transaction hard fork number
	MoneroVersion     []byte                               `protobuf:"bytes,15,opt,name=monero_version,json=moneroVersion" json:"monero_version,omitempty"`  // monero software version
}

func (x *MoneroTransactionInitRequest_MoneroTransactionData) Reset() {
	*x = MoneroTransactionInitRequest_MoneroTransactionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroTransactionInitRequest_MoneroTransactionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroTransactionInitRequest_MoneroTransactionData) ProtoMessage() {}

func (x *MoneroTransactionInitRequest_MoneroTransactionData) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroTransactionInitRequest_MoneroTransactionData.ProtoReflect.Descriptor instead.
func (*MoneroTransactionInitRequest_MoneroTransactionData) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{7, 0}
}

func (x *MoneroTransactionInitRequest_MoneroTransactionData) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *MoneroTransactionInitRequest_MoneroTransactionData) GetPaymentId() []byte {
	if x != nil {
		return x.PaymentId
	}
	return nil
}

func (x *MoneroTransactionInitRequest_MoneroTransactionData) GetUnlockTime() uint64 {
	if x != nil && x.UnlockTime != nil {
		return *x.UnlockTime
	}
	return 0
}

func (x *MoneroTransactionInitRequest_MoneroTransactionData) GetOutputs() []*MoneroTransactionDestinationEntry {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *MoneroTransactionInitRequest_MoneroTransactionData) GetChangeDts() *MoneroTransactionDestinationEntry {
	if x != nil {
		return x.ChangeDts
	}
	return nil
}

func (x *MoneroTransactionInitRequest_MoneroTransactionData) GetNumInputs() uint32 {
	if x != nil && x.NumInputs != nil {
		return *x.NumInputs
	}
	return 0
}

func (x *MoneroTransactionInitRequest_MoneroTransactionData) GetMixin() uint32 {
	if x != nil && x.Mixin != nil {
		return *x.Mixin
	}
	return 0
}

func (x *MoneroTransactionInitRequest_MoneroTransactionData) GetFee() uint64 {
	if x != nil && x.Fee != nil {
		return *x.Fee
	}
	return 0
}

func (x *MoneroTransactionInitRequest_MoneroTransactionData) GetAccount() uint32 {
	if x != nil && x.Account != nil {
		return *x.Account
	}
	return 0
}

func (x *MoneroTransactionInitRequest_MoneroTransactionData) GetMinorIndices() []uint32 {
	if x != nil {
		return x.MinorIndices
	}
	return nil
}

func (x *MoneroTransactionInitRequest_MoneroTransactionData) GetRsigData() *MoneroTransactionRsigData {
	if x != nil {
		return x.RsigData
	}
	return nil
}

func (x *MoneroTransactionInitRequest_MoneroTransactionData) GetIntegratedIndices() []uint32 {
	if x != nil {
		return x.IntegratedIndices
	}
	return nil
}

func (x *MoneroTransactionInitRequest_MoneroTransactionData) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *MoneroTransactionInitRequest_MoneroTransactionData) GetHardFork() uint32 {
	if x != nil && x.HardFork != nil {
		return *x.HardFork
	}
	return 0
}

func (x *MoneroTransactionInitRequest_MoneroTransactionData) GetMoneroVersion() []byte {
	if x != nil {
		return x.MoneroVersion
	}
	return nil
}

// Structure represents initial fields of the Monero RCT signature
type MoneroTransactionAllOutSetAck_MoneroRingCtSig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxnFee  *uint64 `protobuf:"varint,1,opt,name=txn_fee,json=txnFee" json:"txn_fee,omitempty"`
	Message []byte  `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	RvType  *uint32 `protobuf:"varint,3,opt,name=rv_type,json=rvType" json:"rv_type,omitempty"`
}

func (x *MoneroTransactionAllOutSetAck_MoneroRingCtSig) Reset() {
	*x = MoneroTransactionAllOutSetAck_MoneroRingCtSig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroTransactionAllOutSetAck_MoneroRingCtSig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroTransactionAllOutSetAck_MoneroRingCtSig) ProtoMessage() {}

func (x *MoneroTransactionAllOutSetAck_MoneroRingCtSig) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroTransactionAllOutSetAck_MoneroRingCtSig.ProtoReflect.Descriptor instead.
func (*MoneroTransactionAllOutSetAck_MoneroRingCtSig) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{18, 0}
}

func (x *MoneroTransactionAllOutSetAck_MoneroRingCtSig) GetTxnFee() uint64 {
	if x != nil && x.TxnFee != nil {
		return *x.TxnFee
	}
	return 0
}

func (x *MoneroTransactionAllOutSetAck_MoneroRingCtSig) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *MoneroTransactionAllOutSetAck_MoneroRingCtSig) GetRvType() uint32 {
	if x != nil && x.RvType != nil {
		return *x.RvType
	}
	return 0
}

// *
// Structure representing Monero list of sub-addresses
type MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account      *uint32  `protobuf:"varint,1,req,name=account" json:"account,omitempty"`
	MinorIndices []uint32 `protobuf:"varint,2,rep,name=minor_indices,json=minorIndices" json:"minor_indices,omitempty"`
}

func (x *MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList) Reset() {
	*x = MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList) ProtoMessage() {}

func (x *MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList.ProtoReflect.Descriptor instead.
func (*MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{23, 0}
}

func (x *MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList) GetAccount() uint32 {
	if x != nil && x.Account != nil {
		return *x.Account
	}
	return 0
}

func (x *MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList) GetMinorIndices() []uint32 {
	if x != nil {
		return x.MinorIndices
	}
	return nil
}

// *
// Structure representing Monero UTXO for key image sync
type MoneroKeyImageSyncStepRequest_MoneroTransferDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutKey              []byte   `protobuf:"bytes,1,req,name=out_key,json=outKey" json:"out_key,omitempty"`
	TxPubKey            []byte   `protobuf:"bytes,2,req,name=tx_pub_key,json=txPubKey" json:"tx_pub_key,omitempty"`
	AdditionalTxPubKeys [][]byte `protobuf:"bytes,3,rep,name=additional_tx_pub_keys,json=additionalTxPubKeys" json:"additional_tx_pub_keys,omitempty"`
	InternalOutputIndex *uint64  `protobuf:"varint,4,req,name=internal_output_index,json=internalOutputIndex" json:"internal_output_index,omitempty"`
	SubAddrMajor        *uint32  `protobuf:"varint,5,opt,name=sub_addr_major,json=subAddrMajor" json:"sub_addr_major,omitempty"`
	SubAddrMinor        *uint32  `protobuf:"varint,6,opt,name=sub_addr_minor,json=subAddrMinor" json:"sub_addr_minor,omitempty"`
}

func (x *MoneroKeyImageSyncStepRequest_MoneroTransferDetails) Reset() {
	*x = MoneroKeyImageSyncStepRequest_MoneroTransferDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroKeyImageSyncStepRequest_MoneroTransferDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroKeyImageSyncStepRequest_MoneroTransferDetails) ProtoMessage() {}

func (x *MoneroKeyImageSyncStepRequest_MoneroTransferDetails) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroKeyImageSyncStepRequest_MoneroTransferDetails.ProtoReflect.Descriptor instead.
func (*MoneroKeyImageSyncStepRequest_MoneroTransferDetails) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{25, 0}
}

func (x *MoneroKeyImageSyncStepRequest_MoneroTransferDetails) GetOutKey() []byte {
	if x != nil {
		return x.OutKey
	}
	return nil
}

func (x *MoneroKeyImageSyncStepRequest_MoneroTransferDetails) GetTxPubKey() []byte {
	if x != nil {
		return x.TxPubKey
	}
	return nil
}

func (x *MoneroKeyImageSyncStepRequest_MoneroTransferDetails) GetAdditionalTxPubKeys() [][]byte {
	if x != nil {
		return x.AdditionalTxPubKeys
	}
	return nil
}

func (x *MoneroKeyImageSyncStepRequest_MoneroTransferDetails) GetInternalOutputIndex() uint64 {
	if x != nil && x.InternalOutputIndex != nil {
		return *x.InternalOutputIndex
	}
	return 0
}

func (x *MoneroKeyImageSyncStepRequest_MoneroTransferDetails) GetSubAddrMajor() uint32 {
	if x != nil && x.SubAddrMajor != nil {
		return *x.SubAddrMajor
	}
	return 0
}

func (x *MoneroKeyImageSyncStepRequest_MoneroTransferDetails) GetSubAddrMinor() uint32 {
	if x != nil && x.SubAddrMinor != nil {
		return *x.SubAddrMinor
	}
	return 0
}

// *
// Structure representing Monero encrypted exported key image
type MoneroKeyImageSyncStepAck_MoneroExportedKeyImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iv   []byte `protobuf:"bytes,1,opt,name=iv" json:"iv,omitempty"`
	Blob []byte `protobuf:"bytes,3,opt,name=blob" json:"blob,omitempty"`
}

func (x *MoneroKeyImageSyncStepAck_MoneroExportedKeyImage) Reset() {
	*x = MoneroKeyImageSyncStepAck_MoneroExportedKeyImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_monero_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneroKeyImageSyncStepAck_MoneroExportedKeyImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneroKeyImageSyncStepAck_MoneroExportedKeyImage) ProtoMessage() {}

func (x *MoneroKeyImageSyncStepAck_MoneroExportedKeyImage) ProtoReflect() protoreflect.Message {
	mi := &file_messages_monero_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneroKeyImageSyncStepAck_MoneroExportedKeyImage.ProtoReflect.Descriptor instead.
func (*MoneroKeyImageSyncStepAck_MoneroExportedKeyImage) Descriptor() ([]byte, []int) {
	return file_messages_monero_proto_rawDescGZIP(), []int{26, 0}
}

func (x *MoneroKeyImageSyncStepAck_MoneroExportedKeyImage) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *MoneroKeyImageSyncStepAck_MoneroExportedKeyImage) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

var File_messages_monero_proto protoreflect.FileDescriptor

var file_messages_monero_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2d, 0x6d, 0x6f, 0x6e, 0x65, 0x72,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a,
	0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x65,
	0x72, 0x6f, 0x22, 0xc9, 0x06, 0x0a, 0x1c, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x63, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x72, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x6c,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72,
	0x65, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0f, 0x72, 0x65, 0x61,
	0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x54, 0x78, 0x4b, 0x65, 0x79,
	0x12, 0x3c, 0x0a, 0x1b, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x78, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x17, 0x72, 0x65, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x78, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x34,
	0x0a, 0x17, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e,
	0x5f, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x13, 0x72, 0x65, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x54, 0x78, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x63, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6d, 0x61,
	0x73, 0x6b, 0x12, 0x72, 0x0a, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x6b,
	0x4c, 0x52, 0x6b, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x68, 0x77, 0x2e,
	0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x69, 0x67, 0x4b, 0x4c, 0x52, 0x6b, 0x69, 0x52, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69,
	0x67, 0x4b, 0x4c, 0x52, 0x6b, 0x69, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x61, 0x64, 0x64,
	0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73,
	0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x1a, 0xdf, 0x01, 0x0a, 0x11,
	0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x69, 0x64, 0x78, 0x12, 0x6e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x5c, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x72, 0x6f, 0x52, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x1a, 0x48, 0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x52, 0x63, 0x74,
	0x4b, 0x65, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x4f, 0x0a,
	0x13, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x4b,
	0x4c, 0x52, 0x6b, 0x69, 0x12, 0x0c, 0x0a, 0x01, 0x4b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x01, 0x4b, 0x12, 0x0c, 0x0a, 0x01, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x4c,
	0x12, 0x0c, 0x0a, 0x01, 0x52, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x52, 0x12, 0x0e,
	0x0a, 0x02, 0x6b, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x6b, 0x69, 0x22, 0xfe,
	0x02, 0x0a, 0x21, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x68, 0x77, 0x2e,
	0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f,
	0x73, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x53, 0x75, 0x62, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x1a,
	0x6e, 0x0a, 0x1a, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22,
	0xdd, 0x01, 0x0a, 0x19, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x73, 0x69, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x72, 0x73, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x66,
	0x66, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x73, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x73, 0x69,
	0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x73, 0x69, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x73, 0x69, 0x67, 0x50, 0x61, 0x72, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xfb, 0x01, 0x0a, 0x10, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x12, 0x58, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x68, 0x77, 0x2e,
	0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x07, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45,
	0x54, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x29, 0x0a,
	0x0d, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x11, 0x4d, 0x6f, 0x6e,
	0x65, 0x72, 0x6f, 0x47, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x12, 0x58, 0x0a, 0x0c, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x72, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x07, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x47, 0x0a, 0x0e, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xb5,
	0x07, 0x0a, 0x1c, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x12, 0x58, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x68,
	0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x07, 0x4d, 0x41, 0x49, 0x4e,
	0x4e, 0x45, 0x54, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x68, 0x0a, 0x08, 0x74, 0x73, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x2e, 0x4d,
	0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x07, 0x74, 0x73, 0x78, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x99, 0x05, 0x0a, 0x15, 0x4d,
	0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x56,
	0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x64, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x77, 0x2e,
	0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x44, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x78, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6d, 0x69, 0x78, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x69, 0x6e,
	0x6f, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x09, 0x72, 0x73, 0x69,
	0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68,
	0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x69, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x72, 0x73, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x12,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x6b, 0x12,
	0x25, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x18, 0x4d, 0x6f, 0x6e, 0x65, 0x72,
	0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74,
	0x41, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6d, 0x61, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x05, 0x68, 0x6d, 0x61, 0x63, 0x73, 0x12, 0x51, 0x0a, 0x09, 0x72, 0x73, 0x69,
	0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68,
	0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x69, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x72, 0x73, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0x76, 0x0a, 0x20,
	0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x52, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x2e, 0x4d,
	0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x72, 0x63,
	0x45, 0x6e, 0x74, 0x72, 0x22, 0xdd, 0x01, 0x0a, 0x1c, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x6e, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x76, 0x69, 0x6e, 0x69, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x6e,
	0x69, 0x5f, 0x68, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x76, 0x69,
	0x6e, 0x69, 0x48, 0x6d, 0x61, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f,
	0x5f, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x73, 0x65, 0x75,
	0x64, 0x6f, 0x4f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x5f,
	0x6f, 0x75, 0x74, 0x5f, 0x68, 0x6d, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x4f, 0x75, 0x74, 0x48, 0x6d, 0x61, 0x63, 0x12, 0x28, 0x0a,
	0x10, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x4f,
	0x75, 0x74, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x4b, 0x65, 0x79, 0x22, 0x8a, 0x02, 0x0a, 0x21, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56,
	0x69, 0x6e, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x08, 0x73, 0x72,
	0x63, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68,
	0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x72, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x76, 0x69, 0x6e, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x76, 0x69,
	0x6e, 0x69, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x6e, 0x69, 0x5f, 0x68, 0x6d, 0x61, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x76, 0x69, 0x6e, 0x69, 0x48, 0x6d, 0x61, 0x63, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x4f, 0x75, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x68, 0x6d, 0x61,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x4f,
	0x75, 0x74, 0x48, 0x6d, 0x61, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x69,
	0x64, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x49, 0x64,
	0x78, 0x22, 0x1f, 0x0a, 0x1d, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x69, 0x6e, 0x69, 0x41,
	0x63, 0x6b, 0x22, 0x26, 0x0a, 0x24, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x75, 0x0a, 0x20, 0x4d, 0x6f,
	0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6c, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x65, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x51,
	0x0a, 0x09, 0x72, 0x73, 0x69, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x73, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x73, 0x69, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x9b, 0x02, 0x0a, 0x21, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x77, 0x2e, 0x74,
	0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x6d,
	0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x12, 0x22, 0x0a, 0x0d, 0x64, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x5f, 0x68, 0x6d, 0x61,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x48, 0x6d, 0x61, 0x63, 0x12, 0x51, 0x0a, 0x09, 0x72, 0x73, 0x69, 0x67, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65,
	0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e,
	0x65, 0x72, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72,
	0x73, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6f, 0x66,
	0x66, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x42, 0x70, 0x22,
	0xdc, 0x01, 0x0a, 0x1d, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x63,
	0x6b, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x75, 0x74,
	0x69, 0x5f, 0x68, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x76, 0x6f,
	0x75, 0x74, 0x69, 0x48, 0x6d, 0x61, 0x63, 0x12, 0x51, 0x0a, 0x09, 0x72, 0x73, 0x69, 0x67, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x77, 0x2e,
	0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x72, 0x73, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x75,
	0x74, 0x5f, 0x70, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6f, 0x75, 0x74, 0x50,
	0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x63, 0x64, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x65, 0x63, 0x64, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x76,
	0x0a, 0x21, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x4f, 0x75, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x09, 0x72, 0x73, 0x69, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a,
	0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x65,
	0x72, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x73,
	0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc0, 0x02, 0x0a, 0x1d, 0x4d, 0x6f, 0x6e, 0x65, 0x72,
	0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x4f,
	0x75, 0x74, 0x53, 0x65, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x24,
	0x0a, 0x0e, 0x74, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x74, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x58, 0x0a, 0x02, 0x72, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x48, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c,
	0x6c, 0x4f, 0x75, 0x74, 0x53, 0x65, 0x74, 0x41, 0x63, 0x6b, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x72,
	0x6f, 0x52, 0x69, 0x6e, 0x67, 0x43, 0x74, 0x53, 0x69, 0x67, 0x52, 0x02, 0x72, 0x76, 0x12, 0x2a,
	0x0a, 0x11, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x66, 0x75, 0x6c, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x5d, 0x0a, 0x0f, 0x4d, 0x6f,
	0x6e, 0x65, 0x72, 0x6f, 0x52, 0x69, 0x6e, 0x67, 0x43, 0x74, 0x53, 0x69, 0x67, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x78, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x74, 0x78, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x76, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x72, 0x76, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd1, 0x02, 0x0a, 0x21, 0x4d, 0x6f,
	0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x67, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x52, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x72, 0x63, 0x45,
	0x6e, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x6e, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x76, 0x69, 0x6e, 0x69, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x6e, 0x69, 0x5f,
	0x68, 0x6d, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x76, 0x69, 0x6e, 0x69,
	0x48, 0x6d, 0x61, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x5f, 0x6f,
	0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f,
	0x4f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x5f, 0x6f, 0x75,
	0x74, 0x5f, 0x68, 0x6d, 0x61, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x73,
	0x65, 0x75, 0x64, 0x6f, 0x4f, 0x75, 0x74, 0x48, 0x6d, 0x61, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x70,
	0x73, 0x65, 0x75, 0x64, 0x6f, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x4f, 0x75, 0x74,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x4b,
	0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x49, 0x64, 0x78, 0x22, 0x5c, 0x0a,
	0x1d, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x4f, 0x75, 0x74, 0x22, 0x1f, 0x0a, 0x1d, 0x4d,
	0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa8, 0x01, 0x0a,
	0x19, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f,
	0x75, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e,
	0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x61,
	0x6e, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x65, 0x6e, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x78, 0x45,
	0x6e, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x22, 0x88, 0x03, 0x0a, 0x1f, 0x4d, 0x6f, 0x6e, 0x65,
	0x72, 0x6f, 0x4b, 0x65, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x12, 0x58,
	0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x07, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x52, 0x0b, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6a, 0x0a, 0x04, 0x73, 0x75, 0x62, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a,
	0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x65,
	0x72, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x4b, 0x65, 0x79, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x53, 0x75, 0x62, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04,
	0x73, 0x75, 0x62, 0x73, 0x1a, 0x5c, 0x0a, 0x1b, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x53, 0x75,
	0x62, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x4b, 0x65, 0x79, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x41, 0x63,
	0x6b, 0x22, 0x89, 0x03, 0x0a, 0x1d, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x4b, 0x65, 0x79, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x04, 0x74, 0x64, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4e, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x72, 0x6f, 0x4b, 0x65, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x04, 0x74, 0x64, 0x69, 0x73, 0x1a, 0x83, 0x02, 0x0a, 0x15, 0x4d, 0x6f, 0x6e, 0x65,
	0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x78,
	0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08,
	0x74, 0x78, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x78, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x32, 0x0a,
	0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x52, 0x13, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6d, 0x61,
	0x6a, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x41, 0x64,
	0x64, 0x72, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x73, 0x75, 0x62, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x22, 0xb8, 0x01,
	0x0a, 0x19, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x4b, 0x65, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x65, 0x70, 0x41, 0x63, 0x6b, 0x12, 0x5d, 0x0a, 0x03, 0x6b,
	0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72,
	0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x6d, 0x6f,
	0x6e, 0x65, 0x72, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x4b, 0x65, 0x79, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x65, 0x70, 0x41, 0x63, 0x6b, 0x2e, 0x4d,
	0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x03, 0x6b, 0x69, 0x73, 0x1a, 0x3c, 0x0a, 0x16, 0x4d, 0x6f,
	0x6e, 0x65, 0x72, 0x6f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x69, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x22, 0x20, 0x0a, 0x1e, 0x4d, 0x6f, 0x6e, 0x65,
	0x72, 0x6f, 0x4b, 0x65, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x1a, 0x4d, 0x6f,
	0x6e, 0x65, 0x72, 0x6f, 0x4b, 0x65, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x79, 0x6e, 0x63,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x6e, 0x63, 0x4b, 0x65,
	0x79, 0x22, 0xc0, 0x02, 0x0a, 0x15, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x47, 0x65, 0x74, 0x54,
	0x78, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x12, 0x58, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c,
	0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x72,
	0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x07, 0x4d, 0x41,
	0x49, 0x4e, 0x4e, 0x45, 0x54, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x61, 0x6c, 0x74, 0x31, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x05, 0x73, 0x61, 0x6c, 0x74, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x61, 0x6c, 0x74,
	0x32, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x61, 0x6c, 0x74, 0x32, 0x12, 0x1e,
	0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x65, 0x6e, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x78, 0x45, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x24,
	0x0a, 0x0e, 0x74, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x06, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0c, 0x74, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x22, 0x67, 0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x47, 0x65,
	0x74, 0x54, 0x78, 0x4b, 0x65, 0x79, 0x41, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x78, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x74, 0x78, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x78, 0x5f, 0x64, 0x65, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x74, 0x78, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x96, 0x01,
	0x0a, 0x1d, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x12, 0x58, 0x0a, 0x0c,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x2e, 0x4d,
	0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x07, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f,
	0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x63, 0x6b, 0x22, 0xc4, 0x01, 0x0a, 0x1c, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x4c, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x76, 0x44, 0x65, 0x72, 0x69, 0x76, 0x12, 0x20, 0x0a, 0x0c,
	0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x49, 0x64, 0x78, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x41, 0x64, 0x64, 0x72, 0x4d,
	0x61, 0x6a, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x22, 0x4b, 0x0a, 0x18, 0x4d, 0x6f,
	0x6e, 0x65, 0x72, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53,
	0x74, 0x65, 0x70, 0x41, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6b,
	0x65, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x4d, 0x6f, 0x6e, 0x65, 0x72,
	0x6f, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x4d, 0x6f, 0x6e, 0x65,
	0x72, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x41, 0x63, 0x6b, 0x22, 0x86, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4d,
	0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x44, 0x69, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69,
	0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x70, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x70, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x02,
	0x70, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0x82,
	0x01, 0x0a, 0x12, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x44, 0x69,
	0x61, 0x67, 0x41, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x31, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x70, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x70, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x64, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x02, 0x70, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x2a, 0x4a, 0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x49, 0x4e,
	0x4e, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x47, 0x45, 0x4e, 0x45, 0x54, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x46, 0x41, 0x4b, 0x45, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x10, 0x03, 0x42,
	0x3a, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x6c, 0x61,
	0x62, 0x73, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x42, 0x13, 0x54, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x72, 0x6f,
}

var (
	file_messages_monero_proto_rawDescOnce sync.Once
	file_messages_monero_proto_rawDescData = file_messages_monero_proto_rawDesc
)

func file_messages_monero_proto_rawDescGZIP() []byte {
	file_messages_monero_proto_rawDescOnce.Do(func() {
		file_messages_monero_proto_rawDescData = protoimpl.X.CompressGZIP(file_messages_monero_proto_rawDescData)
	})
	return file_messages_monero_proto_rawDescData
}

var file_messages_monero_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_messages_monero_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_messages_monero_proto_goTypes = []interface{}{
	(MoneroNetworkType)(0),                                                    // 0: hw.trezor.messages.monero.MoneroNetworkType
	(*MoneroTransactionSourceEntry)(nil),                                      // 1: hw.trezor.messages.monero.MoneroTransactionSourceEntry
	(*MoneroTransactionDestinationEntry)(nil),                                 // 2: hw.trezor.messages.monero.MoneroTransactionDestinationEntry
	(*MoneroTransactionRsigData)(nil),                                         // 3: hw.trezor.messages.monero.MoneroTransactionRsigData
	(*MoneroGetAddress)(nil),                                                  // 4: hw.trezor.messages.monero.MoneroGetAddress
	(*MoneroAddress)(nil),                                                     // 5: hw.trezor.messages.monero.MoneroAddress
	(*MoneroGetWatchKey)(nil),                                                 // 6: hw.trezor.messages.monero.MoneroGetWatchKey
	(*MoneroWatchKey)(nil),                                                    // 7: hw.trezor.messages.monero.MoneroWatchKey
	(*MoneroTransactionInitRequest)(nil),                                      // 8: hw.trezor.messages.monero.MoneroTransactionInitRequest
	(*MoneroTransactionInitAck)(nil),                                          // 9: hw.trezor.messages.monero.MoneroTransactionInitAck
	(*MoneroTransactionSetInputRequest)(nil),                                  // 10: hw.trezor.messages.monero.MoneroTransactionSetInputRequest
	(*MoneroTransactionSetInputAck)(nil),                                      // 11: hw.trezor.messages.monero.MoneroTransactionSetInputAck
	(*MoneroTransactionInputViniRequest)(nil),                                 // 12: hw.trezor.messages.monero.MoneroTransactionInputViniRequest
	(*MoneroTransactionInputViniAck)(nil),                                     // 13: hw.trezor.messages.monero.MoneroTransactionInputViniAck
	(*MoneroTransactionAllInputsSetRequest)(nil),                              // 14: hw.trezor.messages.monero.MoneroTransactionAllInputsSetRequest
	(*MoneroTransactionAllInputsSetAck)(nil),                                  // 15: hw.trezor.messages.monero.MoneroTransactionAllInputsSetAck
	(*MoneroTransactionSetOutputRequest)(nil),                                 // 16: hw.trezor.messages.monero.MoneroTransactionSetOutputRequest
	(*MoneroTransactionSetOutputAck)(nil),                                     // 17: hw.trezor.messages.monero.MoneroTransactionSetOutputAck
	(*MoneroTransactionAllOutSetRequest)(nil),                                 // 18: hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest
	(*MoneroTransactionAllOutSetAck)(nil),                                     // 19: hw.trezor.messages.monero.MoneroTransactionAllOutSetAck
	(*MoneroTransactionSignInputRequest)(nil),                                 // 20: hw.trezor.messages.monero.MoneroTransactionSignInputRequest
	(*MoneroTransactionSignInputAck)(nil),                                     // 21: hw.trezor.messages.monero.MoneroTransactionSignInputAck
	(*MoneroTransactionFinalRequest)(nil),                                     // 22: hw.trezor.messages.monero.MoneroTransactionFinalRequest
	(*MoneroTransactionFinalAck)(nil),                                         // 23: hw.trezor.messages.monero.MoneroTransactionFinalAck
	(*MoneroKeyImageExportInitRequest)(nil),                                   // 24: hw.trezor.messages.monero.MoneroKeyImageExportInitRequest
	(*MoneroKeyImageExportInitAck)(nil),                                       // 25: hw.trezor.messages.monero.MoneroKeyImageExportInitAck
	(*MoneroKeyImageSyncStepRequest)(nil),                                     // 26: hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest
	(*MoneroKeyImageSyncStepAck)(nil),                                         // 27: hw.trezor.messages.monero.MoneroKeyImageSyncStepAck
	(*MoneroKeyImageSyncFinalRequest)(nil),                                    // 28: hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest
	(*MoneroKeyImageSyncFinalAck)(nil),                                        // 29: hw.trezor.messages.monero.MoneroKeyImageSyncFinalAck
	(*MoneroGetTxKeyRequest)(nil),                                             // 30: hw.trezor.messages.monero.MoneroGetTxKeyRequest
	(*MoneroGetTxKeyAck)(nil),                                                 // 31: hw.trezor.messages.monero.MoneroGetTxKeyAck
	(*MoneroLiveRefreshStartRequest)(nil),                                     // 32: hw.trezor.messages.monero.MoneroLiveRefreshStartRequest
	(*MoneroLiveRefreshStartAck)(nil),                                         // 33: hw.trezor.messages.monero.MoneroLiveRefreshStartAck
	(*MoneroLiveRefreshStepRequest)(nil),                                      // 34: hw.trezor.messages.monero.MoneroLiveRefreshStepRequest
	(*MoneroLiveRefreshStepAck)(nil),                                          // 35: hw.trezor.messages.monero.MoneroLiveRefreshStepAck
	(*MoneroLiveRefreshFinalRequest)(nil),                                     // 36: hw.trezor.messages.monero.MoneroLiveRefreshFinalRequest
	(*MoneroLiveRefreshFinalAck)(nil),                                         // 37: hw.trezor.messages.monero.MoneroLiveRefreshFinalAck
	(*DebugMoneroDiagRequest)(nil),                                            // 38: hw.trezor.messages.monero.DebugMoneroDiagRequest
	(*DebugMoneroDiagAck)(nil),                                                // 39: hw.trezor.messages.monero.DebugMoneroDiagAck
	(*MoneroTransactionSourceEntry_MoneroOutputEntry)(nil),                    // 40: hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry
	(*MoneroTransactionSourceEntry_MoneroMultisigKLRki)(nil),                  // 41: hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki
	(*MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic)(nil), // 42: hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry.MoneroRctKeyPublic
	(*MoneroTransactionDestinationEntry_MoneroAccountPublicAddress)(nil),      // 43: hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress
	(*MoneroTransactionInitRequest_MoneroTransactionData)(nil),                // 44: hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData
	(*MoneroTransactionAllOutSetAck_MoneroRingCtSig)(nil),                     // 45: hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig
	(*MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList)(nil),       // 46: hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList
	(*MoneroKeyImageSyncStepRequest_MoneroTransferDetails)(nil),               // 47: hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails
	(*MoneroKeyImageSyncStepAck_MoneroExportedKeyImage)(nil),                  // 48: hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage
}
var file_messages_monero_proto_depIdxs = []int32{
	40, // 0: hw.trezor.messages.monero.MoneroTransactionSourceEntry.outputs:type_name -> hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry
	41, // 1: hw.trezor.messages.monero.MoneroTransactionSourceEntry.multisig_kLRki:type_name -> hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki
	43, // 2: hw.trezor.messages.monero.MoneroTransactionDestinationEntry.addr:type_name -> hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress
	0,  // 3: hw.trezor.messages.monero.MoneroGetAddress.network_type:type_name -> hw.trezor.messages.monero.MoneroNetworkType
	0,  // 4: hw.trezor.messages.monero.MoneroGetWatchKey.network_type:type_name -> hw.trezor.messages.monero.MoneroNetworkType
	0,  // 5: hw.trezor.messages.monero.MoneroTransactionInitRequest.network_type:type_name -> hw.trezor.messages.monero.MoneroNetworkType
	44, // 6: hw.trezor.messages.monero.MoneroTransactionInitRequest.tsx_data:type_name -> hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData
	3,  // 7: hw.trezor.messages.monero.MoneroTransactionInitAck.rsig_data:type_name -> hw.trezor.messages.monero.MoneroTransactionRsigData
	1,  // 8: hw.trezor.messages.monero.MoneroTransactionSetInputRequest.src_entr:type_name -> hw.trezor.messages.monero.MoneroTransactionSourceEntry
	1,  // 9: hw.trezor.messages.monero.MoneroTransactionInputViniRequest.src_entr:type_name -> hw.trezor.messages.monero.MoneroTransactionSourceEntry
	3,  // 10: hw.trezor.messages.monero.MoneroTransactionAllInputsSetAck.rsig_data:type_name -> hw.trezor.messages.monero.MoneroTransactionRsigData
	2,  // 11: hw.trezor.messages.monero.MoneroTransactionSetOutputRequest.dst_entr:type_name -> hw.trezor.messages.monero.MoneroTransactionDestinationEntry
	3,  // 12: hw.trezor.messages.monero.MoneroTransactionSetOutputRequest.rsig_data:type_name -> hw.trezor.messages.monero.MoneroTransactionRsigData
	3,  // 13: hw.trezor.messages.monero.MoneroTransactionSetOutputAck.rsig_data:type_name -> hw.trezor.messages.monero.MoneroTransactionRsigData
	3,  // 14: hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest.rsig_data:type_name -> hw.trezor.messages.monero.MoneroTransactionRsigData
	45, // 15: hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.rv:type_name -> hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig
	1,  // 16: hw.trezor.messages.monero.MoneroTransactionSignInputRequest.src_entr:type_name -> hw.trezor.messages.monero.MoneroTransactionSourceEntry
	0,  // 17: hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.network_type:type_name -> hw.trezor.messages.monero.MoneroNetworkType
	46, // 18: hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.subs:type_name -> hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList
	47, // 19: hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.tdis:type_name -> hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails
	48, // 20: hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.kis:type_name -> hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage
	0,  // 21: hw.trezor.messages.monero.MoneroGetTxKeyRequest.network_type:type_name -> hw.trezor.messages.monero.MoneroNetworkType
	0,  // 22: hw.trezor.messages.monero.MoneroLiveRefreshStartRequest.network_type:type_name -> hw.trezor.messages.monero.MoneroNetworkType
	42, // 23: hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry.key:type_name -> hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry.MoneroRctKeyPublic
	2,  // 24: hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData.outputs:type_name -> hw.trezor.messages.monero.MoneroTransactionDestinationEntry
	2,  // 25: hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData.change_dts:type_name -> hw.trezor.messages.monero.MoneroTransactionDestinationEntry
	3,  // 26: hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData.rsig_data:type_name -> hw.trezor.messages.monero.MoneroTransactionRsigData
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_messages_monero_proto_init() }
func file_messages_monero_proto_init() {
	if File_messages_monero_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_messages_monero_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroTransactionSourceEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroTransactionDestinationEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroTransactionRsigData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroGetAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroGetWatchKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroWatchKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroTransactionInitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroTransactionInitAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroTransactionSetInputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroTransactionSetInputAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroTransactionInputViniRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroTransactionInputViniAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroTransactionAllInputsSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroTransactionAllInputsSetAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroTransactionSetOutputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroTransactionSetOutputAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroTransactionAllOutSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroTransactionAllOutSetAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroTransactionSignInputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroTransactionSignInputAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroTransactionFinalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroTransactionFinalAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroKeyImageExportInitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroKeyImageExportInitAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroKeyImageSyncStepRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroKeyImageSyncStepAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroKeyImageSyncFinalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroKeyImageSyncFinalAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroGetTxKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroGetTxKeyAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroLiveRefreshStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroLiveRefreshStartAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroLiveRefreshStepRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroLiveRefreshStepAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroLiveRefreshFinalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroLiveRefreshFinalAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugMoneroDiagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugMoneroDiagAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroTransactionSourceEntry_MoneroOutputEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroTransactionSourceEntry_MoneroMultisigKLRki); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroTransactionDestinationEntry_MoneroAccountPublicAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroTransactionInitRequest_MoneroTransactionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroTransactionAllOutSetAck_MoneroRingCtSig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroKeyImageSyncStepRequest_MoneroTransferDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_monero_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneroKeyImageSyncStepAck_MoneroExportedKeyImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messages_monero_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_monero_proto_goTypes,
		DependencyIndexes: file_messages_monero_proto_depIdxs,
		EnumInfos:         file_messages_monero_proto_enumTypes,
		MessageInfos:      file_messages_monero_proto_msgTypes,
	}.Build()
	File_messages_monero_proto = out.File
	file_messages_monero_proto_rawDesc = nil
	file_messages_monero_proto_goTypes = nil
	file_messages_monero_proto_depIdxs = nil
}

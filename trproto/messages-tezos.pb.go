// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: messages-tezos.proto

package trproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
// Type of Tezos Contract type
type TezosSignTx_TezosContractID_TezosContractType int32

const (
	TezosSignTx_TezosContractID_Implicit   TezosSignTx_TezosContractID_TezosContractType = 0
	TezosSignTx_TezosContractID_Originated TezosSignTx_TezosContractID_TezosContractType = 1
)

// Enum value maps for TezosSignTx_TezosContractID_TezosContractType.
var (
	TezosSignTx_TezosContractID_TezosContractType_name = map[int32]string{
		0: "Implicit",
		1: "Originated",
	}
	TezosSignTx_TezosContractID_TezosContractType_value = map[string]int32{
		"Implicit":   0,
		"Originated": 1,
	}
)

func (x TezosSignTx_TezosContractID_TezosContractType) Enum() *TezosSignTx_TezosContractID_TezosContractType {
	p := new(TezosSignTx_TezosContractID_TezosContractType)
	*p = x
	return p
}

func (x TezosSignTx_TezosContractID_TezosContractType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TezosSignTx_TezosContractID_TezosContractType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_tezos_proto_enumTypes[0].Descriptor()
}

func (TezosSignTx_TezosContractID_TezosContractType) Type() protoreflect.EnumType {
	return &file_messages_tezos_proto_enumTypes[0]
}

func (x TezosSignTx_TezosContractID_TezosContractType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TezosSignTx_TezosContractID_TezosContractType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TezosSignTx_TezosContractID_TezosContractType(num)
	return nil
}

// Deprecated: Use TezosSignTx_TezosContractID_TezosContractType.Descriptor instead.
func (TezosSignTx_TezosContractID_TezosContractType) EnumDescriptor() ([]byte, []int) {
	return file_messages_tezos_proto_rawDescGZIP(), []int{4, 0, 0}
}

type TezosSignTx_TezosBallotOp_TezosBallotType int32

const (
	TezosSignTx_TezosBallotOp_Yay  TezosSignTx_TezosBallotOp_TezosBallotType = 0
	TezosSignTx_TezosBallotOp_Nay  TezosSignTx_TezosBallotOp_TezosBallotType = 1
	TezosSignTx_TezosBallotOp_Pass TezosSignTx_TezosBallotOp_TezosBallotType = 2
)

// Enum value maps for TezosSignTx_TezosBallotOp_TezosBallotType.
var (
	TezosSignTx_TezosBallotOp_TezosBallotType_name = map[int32]string{
		0: "Yay",
		1: "Nay",
		2: "Pass",
	}
	TezosSignTx_TezosBallotOp_TezosBallotType_value = map[string]int32{
		"Yay":  0,
		"Nay":  1,
		"Pass": 2,
	}
)

func (x TezosSignTx_TezosBallotOp_TezosBallotType) Enum() *TezosSignTx_TezosBallotOp_TezosBallotType {
	p := new(TezosSignTx_TezosBallotOp_TezosBallotType)
	*p = x
	return p
}

func (x TezosSignTx_TezosBallotOp_TezosBallotType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TezosSignTx_TezosBallotOp_TezosBallotType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_tezos_proto_enumTypes[1].Descriptor()
}

func (TezosSignTx_TezosBallotOp_TezosBallotType) Type() protoreflect.EnumType {
	return &file_messages_tezos_proto_enumTypes[1]
}

func (x TezosSignTx_TezosBallotOp_TezosBallotType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TezosSignTx_TezosBallotOp_TezosBallotType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TezosSignTx_TezosBallotOp_TezosBallotType(num)
	return nil
}

// Deprecated: Use TezosSignTx_TezosBallotOp_TezosBallotType.Descriptor instead.
func (TezosSignTx_TezosBallotOp_TezosBallotType) EnumDescriptor() ([]byte, []int) {
	return file_messages_tezos_proto_rawDescGZIP(), []int{4, 6, 0}
}

//*
// Request: Ask device for Tezos address corresponding to address_n path
// @start
// @next TezosAddress
// @next Failure
type TezosGetAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressN    []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`          // BIP-32 path to derive the key from master node
	ShowDisplay *bool    `protobuf:"varint,2,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"` // optionally show on display before sending the result
}

func (x *TezosGetAddress) Reset() {
	*x = TezosGetAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_tezos_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TezosGetAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TezosGetAddress) ProtoMessage() {}

func (x *TezosGetAddress) ProtoReflect() protoreflect.Message {
	mi := &file_messages_tezos_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TezosGetAddress.ProtoReflect.Descriptor instead.
func (*TezosGetAddress) Descriptor() ([]byte, []int) {
	return file_messages_tezos_proto_rawDescGZIP(), []int{0}
}

func (x *TezosGetAddress) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *TezosGetAddress) GetShowDisplay() bool {
	if x != nil && x.ShowDisplay != nil {
		return *x.ShowDisplay
	}
	return false
}

//*
// Response: Contains Tezos address derived from device private seed
// @end
type TezosAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *string `protobuf:"bytes,1,req,name=address" json:"address,omitempty"` // Coin address in Base58 encoding
}

func (x *TezosAddress) Reset() {
	*x = TezosAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_tezos_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TezosAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TezosAddress) ProtoMessage() {}

func (x *TezosAddress) ProtoReflect() protoreflect.Message {
	mi := &file_messages_tezos_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TezosAddress.ProtoReflect.Descriptor instead.
func (*TezosAddress) Descriptor() ([]byte, []int) {
	return file_messages_tezos_proto_rawDescGZIP(), []int{1}
}

func (x *TezosAddress) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

//*
// Request: Ask device for Tezos public key corresponding to address_n path
// @start
// @next TezosPublicKey
type TezosGetPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressN    []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`          // BIP-32 path to derive the key from master node
	ShowDisplay *bool    `protobuf:"varint,2,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"` // Optionally show on display before sending the result
}

func (x *TezosGetPublicKey) Reset() {
	*x = TezosGetPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_tezos_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TezosGetPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TezosGetPublicKey) ProtoMessage() {}

func (x *TezosGetPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_messages_tezos_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TezosGetPublicKey.ProtoReflect.Descriptor instead.
func (*TezosGetPublicKey) Descriptor() ([]byte, []int) {
	return file_messages_tezos_proto_rawDescGZIP(), []int{2}
}

func (x *TezosGetPublicKey) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *TezosGetPublicKey) GetShowDisplay() bool {
	if x != nil && x.ShowDisplay != nil {
		return *x.ShowDisplay
	}
	return false
}

//*
// Response: Contains Tezos public key derived from device private seed
// @end
type TezosPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey *string `protobuf:"bytes,1,req,name=public_key,json=publicKey" json:"public_key,omitempty"` // b58 encoded Tezos public key with prefix
}

func (x *TezosPublicKey) Reset() {
	*x = TezosPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_tezos_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TezosPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TezosPublicKey) ProtoMessage() {}

func (x *TezosPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_messages_tezos_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TezosPublicKey.ProtoReflect.Descriptor instead.
func (*TezosPublicKey) Descriptor() ([]byte, []int) {
	return file_messages_tezos_proto_rawDescGZIP(), []int{3}
}

func (x *TezosPublicKey) GetPublicKey() string {
	if x != nil && x.PublicKey != nil {
		return *x.PublicKey
	}
	return ""
}

//*
// Request: Ask device to sign Tezos transaction
// @start
// @next TezosSignedTx
type TezosSignTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressN    []uint32                        `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"` // BIP-32 path to derive the key from master node
	Branch      []byte                          `protobuf:"bytes,2,req,name=branch" json:"branch,omitempty"`
	Reveal      *TezosSignTx_TezosRevealOp      `protobuf:"bytes,3,opt,name=reveal" json:"reveal,omitempty"`           // Tezos reveal operation (may be bundled with other op)
	Transaction *TezosSignTx_TezosTransactionOp `protobuf:"bytes,4,opt,name=transaction" json:"transaction,omitempty"` // Tezos transaction operation
	Origination *TezosSignTx_TezosOriginationOp `protobuf:"bytes,5,opt,name=origination" json:"origination,omitempty"` // Tezos origination operation
	Delegation  *TezosSignTx_TezosDelegationOp  `protobuf:"bytes,6,opt,name=delegation" json:"delegation,omitempty"`   // Tezos delegation operation
	Proposal    *TezosSignTx_TezosProposalOp    `protobuf:"bytes,7,opt,name=proposal" json:"proposal,omitempty"`       // Tezos proposal operation
	Ballot      *TezosSignTx_TezosBallotOp      `protobuf:"bytes,8,opt,name=ballot" json:"ballot,omitempty"`           // Tezos ballot operation
}

func (x *TezosSignTx) Reset() {
	*x = TezosSignTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_tezos_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TezosSignTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TezosSignTx) ProtoMessage() {}

func (x *TezosSignTx) ProtoReflect() protoreflect.Message {
	mi := &file_messages_tezos_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TezosSignTx.ProtoReflect.Descriptor instead.
func (*TezosSignTx) Descriptor() ([]byte, []int) {
	return file_messages_tezos_proto_rawDescGZIP(), []int{4}
}

func (x *TezosSignTx) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *TezosSignTx) GetBranch() []byte {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *TezosSignTx) GetReveal() *TezosSignTx_TezosRevealOp {
	if x != nil {
		return x.Reveal
	}
	return nil
}

func (x *TezosSignTx) GetTransaction() *TezosSignTx_TezosTransactionOp {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *TezosSignTx) GetOrigination() *TezosSignTx_TezosOriginationOp {
	if x != nil {
		return x.Origination
	}
	return nil
}

func (x *TezosSignTx) GetDelegation() *TezosSignTx_TezosDelegationOp {
	if x != nil {
		return x.Delegation
	}
	return nil
}

func (x *TezosSignTx) GetProposal() *TezosSignTx_TezosProposalOp {
	if x != nil {
		return x.Proposal
	}
	return nil
}

func (x *TezosSignTx) GetBallot() *TezosSignTx_TezosBallotOp {
	if x != nil {
		return x.Ballot
	}
	return nil
}

//*
// Response: Contains Tezos transaction signature
// @end
type TezosSignedTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature     *string `protobuf:"bytes,1,req,name=signature" json:"signature,omitempty"`                                // Tezos b58 encoded transaction signature with prefix
	SigOpContents []byte  `protobuf:"bytes,2,req,name=sig_op_contents,json=sigOpContents" json:"sig_op_contents,omitempty"` // operation_bytes + signed operation_bytes
	OperationHash *string `protobuf:"bytes,3,req,name=operation_hash,json=operationHash" json:"operation_hash,omitempty"`   // b58 encoded hashed operation contents with prefix
}

func (x *TezosSignedTx) Reset() {
	*x = TezosSignedTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_tezos_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TezosSignedTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TezosSignedTx) ProtoMessage() {}

func (x *TezosSignedTx) ProtoReflect() protoreflect.Message {
	mi := &file_messages_tezos_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TezosSignedTx.ProtoReflect.Descriptor instead.
func (*TezosSignedTx) Descriptor() ([]byte, []int) {
	return file_messages_tezos_proto_rawDescGZIP(), []int{5}
}

func (x *TezosSignedTx) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *TezosSignedTx) GetSigOpContents() []byte {
	if x != nil {
		return x.SigOpContents
	}
	return nil
}

func (x *TezosSignedTx) GetOperationHash() string {
	if x != nil && x.OperationHash != nil {
		return *x.OperationHash
	}
	return ""
}

//
// Tezos contract ID
type TezosSignTx_TezosContractID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag  *TezosSignTx_TezosContractID_TezosContractType `protobuf:"varint,1,req,name=tag,enum=hw.trezor.messages.tezos.TezosSignTx_TezosContractID_TezosContractType" json:"tag,omitempty"`
	Hash []byte                                         `protobuf:"bytes,2,req,name=hash" json:"hash,omitempty"` // Implicit = 21B, originated = 20B + 1B padding
}

func (x *TezosSignTx_TezosContractID) Reset() {
	*x = TezosSignTx_TezosContractID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_tezos_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TezosSignTx_TezosContractID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TezosSignTx_TezosContractID) ProtoMessage() {}

func (x *TezosSignTx_TezosContractID) ProtoReflect() protoreflect.Message {
	mi := &file_messages_tezos_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TezosSignTx_TezosContractID.ProtoReflect.Descriptor instead.
func (*TezosSignTx_TezosContractID) Descriptor() ([]byte, []int) {
	return file_messages_tezos_proto_rawDescGZIP(), []int{4, 0}
}

func (x *TezosSignTx_TezosContractID) GetTag() TezosSignTx_TezosContractID_TezosContractType {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return TezosSignTx_TezosContractID_Implicit
}

func (x *TezosSignTx_TezosContractID) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

//*
// Structure representing information for reveal
type TezosSignTx_TezosRevealOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source       []byte  `protobuf:"bytes,7,req,name=source" json:"source,omitempty"`
	Fee          *uint64 `protobuf:"varint,2,req,name=fee" json:"fee,omitempty"`
	Counter      *uint64 `protobuf:"varint,3,req,name=counter" json:"counter,omitempty"`
	GasLimit     *uint64 `protobuf:"varint,4,req,name=gas_limit,json=gasLimit" json:"gas_limit,omitempty"`
	StorageLimit *uint64 `protobuf:"varint,5,req,name=storage_limit,json=storageLimit" json:"storage_limit,omitempty"`
	PublicKey    []byte  `protobuf:"bytes,6,req,name=public_key,json=publicKey" json:"public_key,omitempty"`
}

func (x *TezosSignTx_TezosRevealOp) Reset() {
	*x = TezosSignTx_TezosRevealOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_tezos_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TezosSignTx_TezosRevealOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TezosSignTx_TezosRevealOp) ProtoMessage() {}

func (x *TezosSignTx_TezosRevealOp) ProtoReflect() protoreflect.Message {
	mi := &file_messages_tezos_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TezosSignTx_TezosRevealOp.ProtoReflect.Descriptor instead.
func (*TezosSignTx_TezosRevealOp) Descriptor() ([]byte, []int) {
	return file_messages_tezos_proto_rawDescGZIP(), []int{4, 1}
}

func (x *TezosSignTx_TezosRevealOp) GetSource() []byte {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *TezosSignTx_TezosRevealOp) GetFee() uint64 {
	if x != nil && x.Fee != nil {
		return *x.Fee
	}
	return 0
}

func (x *TezosSignTx_TezosRevealOp) GetCounter() uint64 {
	if x != nil && x.Counter != nil {
		return *x.Counter
	}
	return 0
}

func (x *TezosSignTx_TezosRevealOp) GetGasLimit() uint64 {
	if x != nil && x.GasLimit != nil {
		return *x.GasLimit
	}
	return 0
}

func (x *TezosSignTx_TezosRevealOp) GetStorageLimit() uint64 {
	if x != nil && x.StorageLimit != nil {
		return *x.StorageLimit
	}
	return 0
}

func (x *TezosSignTx_TezosRevealOp) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

//*
// Structure representing information for transaction
type TezosSignTx_TezosTransactionOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source            []byte                                                 `protobuf:"bytes,9,req,name=source" json:"source,omitempty"`
	Fee               *uint64                                                `protobuf:"varint,2,req,name=fee" json:"fee,omitempty"`
	Counter           *uint64                                                `protobuf:"varint,3,req,name=counter" json:"counter,omitempty"`
	GasLimit          *uint64                                                `protobuf:"varint,4,req,name=gas_limit,json=gasLimit" json:"gas_limit,omitempty"`
	StorageLimit      *uint64                                                `protobuf:"varint,5,req,name=storage_limit,json=storageLimit" json:"storage_limit,omitempty"`
	Amount            *uint64                                                `protobuf:"varint,6,req,name=amount" json:"amount,omitempty"`
	Destination       *TezosSignTx_TezosContractID                           `protobuf:"bytes,7,req,name=destination" json:"destination,omitempty"`
	Parameters        []byte                                                 `protobuf:"bytes,8,opt,name=parameters" json:"parameters,omitempty"`
	ParametersManager *TezosSignTx_TezosTransactionOp_TezosParametersManager `protobuf:"bytes,10,opt,name=parameters_manager,json=parametersManager" json:"parameters_manager,omitempty"`
}

func (x *TezosSignTx_TezosTransactionOp) Reset() {
	*x = TezosSignTx_TezosTransactionOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_tezos_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TezosSignTx_TezosTransactionOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TezosSignTx_TezosTransactionOp) ProtoMessage() {}

func (x *TezosSignTx_TezosTransactionOp) ProtoReflect() protoreflect.Message {
	mi := &file_messages_tezos_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TezosSignTx_TezosTransactionOp.ProtoReflect.Descriptor instead.
func (*TezosSignTx_TezosTransactionOp) Descriptor() ([]byte, []int) {
	return file_messages_tezos_proto_rawDescGZIP(), []int{4, 2}
}

func (x *TezosSignTx_TezosTransactionOp) GetSource() []byte {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *TezosSignTx_TezosTransactionOp) GetFee() uint64 {
	if x != nil && x.Fee != nil {
		return *x.Fee
	}
	return 0
}

func (x *TezosSignTx_TezosTransactionOp) GetCounter() uint64 {
	if x != nil && x.Counter != nil {
		return *x.Counter
	}
	return 0
}

func (x *TezosSignTx_TezosTransactionOp) GetGasLimit() uint64 {
	if x != nil && x.GasLimit != nil {
		return *x.GasLimit
	}
	return 0
}

func (x *TezosSignTx_TezosTransactionOp) GetStorageLimit() uint64 {
	if x != nil && x.StorageLimit != nil {
		return *x.StorageLimit
	}
	return 0
}

func (x *TezosSignTx_TezosTransactionOp) GetAmount() uint64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *TezosSignTx_TezosTransactionOp) GetDestination() *TezosSignTx_TezosContractID {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *TezosSignTx_TezosTransactionOp) GetParameters() []byte {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *TezosSignTx_TezosTransactionOp) GetParametersManager() *TezosSignTx_TezosTransactionOp_TezosParametersManager {
	if x != nil {
		return x.ParametersManager
	}
	return nil
}

//*
// Structure representing information for origination
type TezosSignTx_TezosOriginationOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source        []byte  `protobuf:"bytes,12,req,name=source" json:"source,omitempty"`
	Fee           *uint64 `protobuf:"varint,2,req,name=fee" json:"fee,omitempty"`
	Counter       *uint64 `protobuf:"varint,3,req,name=counter" json:"counter,omitempty"`
	GasLimit      *uint64 `protobuf:"varint,4,req,name=gas_limit,json=gasLimit" json:"gas_limit,omitempty"`
	StorageLimit  *uint64 `protobuf:"varint,5,req,name=storage_limit,json=storageLimit" json:"storage_limit,omitempty"`
	ManagerPubkey []byte  `protobuf:"bytes,6,opt,name=manager_pubkey,json=managerPubkey" json:"manager_pubkey,omitempty"`
	Balance       *uint64 `protobuf:"varint,7,req,name=balance" json:"balance,omitempty"`
	Spendable     *bool   `protobuf:"varint,8,opt,name=spendable" json:"spendable,omitempty"`
	Delegatable   *bool   `protobuf:"varint,9,opt,name=delegatable" json:"delegatable,omitempty"`
	Delegate      []byte  `protobuf:"bytes,10,opt,name=delegate" json:"delegate,omitempty"`
	Script        []byte  `protobuf:"bytes,11,req,name=script" json:"script,omitempty"`
}

func (x *TezosSignTx_TezosOriginationOp) Reset() {
	*x = TezosSignTx_TezosOriginationOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_tezos_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TezosSignTx_TezosOriginationOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TezosSignTx_TezosOriginationOp) ProtoMessage() {}

func (x *TezosSignTx_TezosOriginationOp) ProtoReflect() protoreflect.Message {
	mi := &file_messages_tezos_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TezosSignTx_TezosOriginationOp.ProtoReflect.Descriptor instead.
func (*TezosSignTx_TezosOriginationOp) Descriptor() ([]byte, []int) {
	return file_messages_tezos_proto_rawDescGZIP(), []int{4, 3}
}

func (x *TezosSignTx_TezosOriginationOp) GetSource() []byte {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *TezosSignTx_TezosOriginationOp) GetFee() uint64 {
	if x != nil && x.Fee != nil {
		return *x.Fee
	}
	return 0
}

func (x *TezosSignTx_TezosOriginationOp) GetCounter() uint64 {
	if x != nil && x.Counter != nil {
		return *x.Counter
	}
	return 0
}

func (x *TezosSignTx_TezosOriginationOp) GetGasLimit() uint64 {
	if x != nil && x.GasLimit != nil {
		return *x.GasLimit
	}
	return 0
}

func (x *TezosSignTx_TezosOriginationOp) GetStorageLimit() uint64 {
	if x != nil && x.StorageLimit != nil {
		return *x.StorageLimit
	}
	return 0
}

func (x *TezosSignTx_TezosOriginationOp) GetManagerPubkey() []byte {
	if x != nil {
		return x.ManagerPubkey
	}
	return nil
}

func (x *TezosSignTx_TezosOriginationOp) GetBalance() uint64 {
	if x != nil && x.Balance != nil {
		return *x.Balance
	}
	return 0
}

func (x *TezosSignTx_TezosOriginationOp) GetSpendable() bool {
	if x != nil && x.Spendable != nil {
		return *x.Spendable
	}
	return false
}

func (x *TezosSignTx_TezosOriginationOp) GetDelegatable() bool {
	if x != nil && x.Delegatable != nil {
		return *x.Delegatable
	}
	return false
}

func (x *TezosSignTx_TezosOriginationOp) GetDelegate() []byte {
	if x != nil {
		return x.Delegate
	}
	return nil
}

func (x *TezosSignTx_TezosOriginationOp) GetScript() []byte {
	if x != nil {
		return x.Script
	}
	return nil
}

//*
// Structure representing information for delegation
type TezosSignTx_TezosDelegationOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source       []byte  `protobuf:"bytes,7,req,name=source" json:"source,omitempty"`
	Fee          *uint64 `protobuf:"varint,2,req,name=fee" json:"fee,omitempty"`
	Counter      *uint64 `protobuf:"varint,3,req,name=counter" json:"counter,omitempty"`
	GasLimit     *uint64 `protobuf:"varint,4,req,name=gas_limit,json=gasLimit" json:"gas_limit,omitempty"`
	StorageLimit *uint64 `protobuf:"varint,5,req,name=storage_limit,json=storageLimit" json:"storage_limit,omitempty"`
	Delegate     []byte  `protobuf:"bytes,6,req,name=delegate" json:"delegate,omitempty"`
}

func (x *TezosSignTx_TezosDelegationOp) Reset() {
	*x = TezosSignTx_TezosDelegationOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_tezos_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TezosSignTx_TezosDelegationOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TezosSignTx_TezosDelegationOp) ProtoMessage() {}

func (x *TezosSignTx_TezosDelegationOp) ProtoReflect() protoreflect.Message {
	mi := &file_messages_tezos_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TezosSignTx_TezosDelegationOp.ProtoReflect.Descriptor instead.
func (*TezosSignTx_TezosDelegationOp) Descriptor() ([]byte, []int) {
	return file_messages_tezos_proto_rawDescGZIP(), []int{4, 4}
}

func (x *TezosSignTx_TezosDelegationOp) GetSource() []byte {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *TezosSignTx_TezosDelegationOp) GetFee() uint64 {
	if x != nil && x.Fee != nil {
		return *x.Fee
	}
	return 0
}

func (x *TezosSignTx_TezosDelegationOp) GetCounter() uint64 {
	if x != nil && x.Counter != nil {
		return *x.Counter
	}
	return 0
}

func (x *TezosSignTx_TezosDelegationOp) GetGasLimit() uint64 {
	if x != nil && x.GasLimit != nil {
		return *x.GasLimit
	}
	return 0
}

func (x *TezosSignTx_TezosDelegationOp) GetStorageLimit() uint64 {
	if x != nil && x.StorageLimit != nil {
		return *x.StorageLimit
	}
	return 0
}

func (x *TezosSignTx_TezosDelegationOp) GetDelegate() []byte {
	if x != nil {
		return x.Delegate
	}
	return nil
}

//*
// Structure representing information for proposal
type TezosSignTx_TezosProposalOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source    []byte   `protobuf:"bytes,1,req,name=source" json:"source,omitempty"` //Contains only public_key_hash, not to be confused with TezosContractID
	Period    *uint64  `protobuf:"varint,2,req,name=period" json:"period,omitempty"`
	Proposals [][]byte `protobuf:"bytes,4,rep,name=proposals" json:"proposals,omitempty"`
}

func (x *TezosSignTx_TezosProposalOp) Reset() {
	*x = TezosSignTx_TezosProposalOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_tezos_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TezosSignTx_TezosProposalOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TezosSignTx_TezosProposalOp) ProtoMessage() {}

func (x *TezosSignTx_TezosProposalOp) ProtoReflect() protoreflect.Message {
	mi := &file_messages_tezos_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TezosSignTx_TezosProposalOp.ProtoReflect.Descriptor instead.
func (*TezosSignTx_TezosProposalOp) Descriptor() ([]byte, []int) {
	return file_messages_tezos_proto_rawDescGZIP(), []int{4, 5}
}

func (x *TezosSignTx_TezosProposalOp) GetSource() []byte {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *TezosSignTx_TezosProposalOp) GetPeriod() uint64 {
	if x != nil && x.Period != nil {
		return *x.Period
	}
	return 0
}

func (x *TezosSignTx_TezosProposalOp) GetProposals() [][]byte {
	if x != nil {
		return x.Proposals
	}
	return nil
}

//*
// Structure representing information for ballot
type TezosSignTx_TezosBallotOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source   []byte                                     `protobuf:"bytes,1,req,name=source" json:"source,omitempty"` //Contains only public_key_hash, not to be confused with TezosContractID
	Period   *uint64                                    `protobuf:"varint,2,req,name=period" json:"period,omitempty"`
	Proposal []byte                                     `protobuf:"bytes,3,req,name=proposal" json:"proposal,omitempty"`
	Ballot   *TezosSignTx_TezosBallotOp_TezosBallotType `protobuf:"varint,4,req,name=ballot,enum=hw.trezor.messages.tezos.TezosSignTx_TezosBallotOp_TezosBallotType" json:"ballot,omitempty"`
}

func (x *TezosSignTx_TezosBallotOp) Reset() {
	*x = TezosSignTx_TezosBallotOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_tezos_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TezosSignTx_TezosBallotOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TezosSignTx_TezosBallotOp) ProtoMessage() {}

func (x *TezosSignTx_TezosBallotOp) ProtoReflect() protoreflect.Message {
	mi := &file_messages_tezos_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TezosSignTx_TezosBallotOp.ProtoReflect.Descriptor instead.
func (*TezosSignTx_TezosBallotOp) Descriptor() ([]byte, []int) {
	return file_messages_tezos_proto_rawDescGZIP(), []int{4, 6}
}

func (x *TezosSignTx_TezosBallotOp) GetSource() []byte {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *TezosSignTx_TezosBallotOp) GetPeriod() uint64 {
	if x != nil && x.Period != nil {
		return *x.Period
	}
	return 0
}

func (x *TezosSignTx_TezosBallotOp) GetProposal() []byte {
	if x != nil {
		return x.Proposal
	}
	return nil
}

func (x *TezosSignTx_TezosBallotOp) GetBallot() TezosSignTx_TezosBallotOp_TezosBallotType {
	if x != nil && x.Ballot != nil {
		return *x.Ballot
	}
	return TezosSignTx_TezosBallotOp_Yay
}

type TezosSignTx_TezosTransactionOp_TezosParametersManager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetDelegate    []byte                                                                      `protobuf:"bytes,1,opt,name=set_delegate,json=setDelegate" json:"set_delegate,omitempty"`
	CancelDelegate *bool                                                                       `protobuf:"varint,2,opt,name=cancel_delegate,json=cancelDelegate" json:"cancel_delegate,omitempty"`
	Transfer       *TezosSignTx_TezosTransactionOp_TezosParametersManager_TezosManagerTransfer `protobuf:"bytes,3,opt,name=transfer" json:"transfer,omitempty"`
}

func (x *TezosSignTx_TezosTransactionOp_TezosParametersManager) Reset() {
	*x = TezosSignTx_TezosTransactionOp_TezosParametersManager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_tezos_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TezosSignTx_TezosTransactionOp_TezosParametersManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TezosSignTx_TezosTransactionOp_TezosParametersManager) ProtoMessage() {}

func (x *TezosSignTx_TezosTransactionOp_TezosParametersManager) ProtoReflect() protoreflect.Message {
	mi := &file_messages_tezos_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TezosSignTx_TezosTransactionOp_TezosParametersManager.ProtoReflect.Descriptor instead.
func (*TezosSignTx_TezosTransactionOp_TezosParametersManager) Descriptor() ([]byte, []int) {
	return file_messages_tezos_proto_rawDescGZIP(), []int{4, 2, 0}
}

func (x *TezosSignTx_TezosTransactionOp_TezosParametersManager) GetSetDelegate() []byte {
	if x != nil {
		return x.SetDelegate
	}
	return nil
}

func (x *TezosSignTx_TezosTransactionOp_TezosParametersManager) GetCancelDelegate() bool {
	if x != nil && x.CancelDelegate != nil {
		return *x.CancelDelegate
	}
	return false
}

func (x *TezosSignTx_TezosTransactionOp_TezosParametersManager) GetTransfer() *TezosSignTx_TezosTransactionOp_TezosParametersManager_TezosManagerTransfer {
	if x != nil {
		return x.Transfer
	}
	return nil
}

type TezosSignTx_TezosTransactionOp_TezosParametersManager_TezosManagerTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination *TezosSignTx_TezosContractID `protobuf:"bytes,1,req,name=destination" json:"destination,omitempty"`
	Amount      *uint64                      `protobuf:"varint,2,req,name=amount" json:"amount,omitempty"`
}

func (x *TezosSignTx_TezosTransactionOp_TezosParametersManager_TezosManagerTransfer) Reset() {
	*x = TezosSignTx_TezosTransactionOp_TezosParametersManager_TezosManagerTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_tezos_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TezosSignTx_TezosTransactionOp_TezosParametersManager_TezosManagerTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TezosSignTx_TezosTransactionOp_TezosParametersManager_TezosManagerTransfer) ProtoMessage() {}

func (x *TezosSignTx_TezosTransactionOp_TezosParametersManager_TezosManagerTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_messages_tezos_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TezosSignTx_TezosTransactionOp_TezosParametersManager_TezosManagerTransfer.ProtoReflect.Descriptor instead.
func (*TezosSignTx_TezosTransactionOp_TezosParametersManager_TezosManagerTransfer) Descriptor() ([]byte, []int) {
	return file_messages_tezos_proto_rawDescGZIP(), []int{4, 2, 0, 0}
}

func (x *TezosSignTx_TezosTransactionOp_TezosParametersManager_TezosManagerTransfer) GetDestination() *TezosSignTx_TezosContractID {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *TezosSignTx_TezosTransactionOp_TezosParametersManager_TezosManagerTransfer) GetAmount() uint64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

var File_messages_tezos_proto protoreflect.FileDescriptor

var file_messages_tezos_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2d, 0x74, 0x65, 0x7a, 0x6f, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f,
	0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x7a, 0x6f, 0x73,
	0x22, 0x51, 0x0a, 0x0f, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x22, 0x28, 0x0a, 0x0c, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x53, 0x0a,
	0x11, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x22, 0x2f, 0x0a, 0x0e, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x22, 0xa4, 0x14, 0x0a, 0x0b, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x53, 0x69, 0x67,
	0x6e, 0x54, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c,
	0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x4b, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x65,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72,
	0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x74, 0x65,
	0x7a, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x78, 0x2e,
	0x54, 0x65, 0x7a, 0x6f, 0x73, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x4f, 0x70, 0x52, 0x06, 0x72,
	0x65, 0x76, 0x65, 0x61, 0x6c, 0x12, 0x5a, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x77, 0x2e,
	0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x74, 0x65, 0x7a, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x54,
	0x78, 0x2e, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5a, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a,
	0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x7a, 0x6f,
	0x73, 0x2e, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x78, 0x2e, 0x54, 0x65,
	0x7a, 0x6f, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x7a, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x7a,
	0x6f, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x78, 0x2e, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72,
	0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x74, 0x65,
	0x7a, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x78, 0x2e,
	0x54, 0x65, 0x7a, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4f, 0x70, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x06, 0x62, 0x61, 0x6c,
	0x6c, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x77, 0x2e, 0x74,
	0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x74,
	0x65, 0x7a, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x78,
	0x2e, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x4f, 0x70, 0x52, 0x06,
	0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x1a, 0xb3, 0x01, 0x0a, 0x0f, 0x54, 0x65, 0x7a, 0x6f, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x59, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65,
	0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x7a,
	0x6f, 0x73, 0x2e, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x78, 0x2e, 0x54,
	0x65, 0x7a, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x2e, 0x54,
	0x65, 0x7a, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x31, 0x0a, 0x11, 0x54, 0x65, 0x7a,
	0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c,
	0x0a, 0x08, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01, 0x1a, 0xb4, 0x01, 0x0a,
	0x0d, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x4f, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x1a, 0x9f, 0x06, 0x0a, 0x12, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52,
	0x03, 0x66, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x74, 0x65, 0x7a, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x53, 0x69,
	0x67, 0x6e, 0x54, 0x78, 0x2e, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x44, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x7e, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e,
	0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x74, 0x65, 0x7a, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x53, 0x69,
	0x67, 0x6e, 0x54, 0x78, 0x2e, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x2e, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x11,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x1a, 0xf1, 0x02, 0x0a, 0x16, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x68, 0x77,
	0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x74, 0x65, 0x7a, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x53, 0x69, 0x67, 0x6e,
	0x54, 0x78, 0x2e, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x2e, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x7a,
	0x6f, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x1a, 0x87, 0x01, 0x0a, 0x14,
	0x54, 0x65, 0x7a, 0x6f, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x77, 0x2e, 0x74,
	0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x74,
	0x65, 0x7a, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x78,
	0x2e, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xcf, 0x02, 0x0a, 0x12, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x1a, 0xb5, 0x01, 0x0a, 0x11, 0x54, 0x65, 0x7a, 0x6f,
	0x73, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x1a,
	0x5f, 0x0a, 0x0f, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x4f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73,
	0x1a, 0xe7, 0x01, 0x0a, 0x0d, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74,
	0x4f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x5b,
	0x0a, 0x06, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x43,
	0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x7a, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x53,
	0x69, 0x67, 0x6e, 0x54, 0x78, 0x2e, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x42, 0x61, 0x6c, 0x6c, 0x6f,
	0x74, 0x4f, 0x70, 0x2e, 0x54, 0x65, 0x7a, 0x6f, 0x73, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x22, 0x2d, 0x0a, 0x0f, 0x54,
	0x65, 0x7a, 0x6f, 0x73, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07,
	0x0a, 0x03, 0x59, 0x61, 0x79, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x61, 0x79, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x50, 0x61, 0x73, 0x73, 0x10, 0x02, 0x22, 0x7c, 0x0a, 0x0d, 0x54, 0x65,
	0x7a, 0x6f, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x69, 0x67,
	0x5f, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x4f, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x42, 0x44, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x74, 0x72, 0x65, 0x7a,
	0x6f, 0x72, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x42,
	0x12, 0x54, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65,
	0x7a, 0x6f, 0x73, 0x5a, 0x09, 0x2e, 0x2f, 0x74, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_messages_tezos_proto_rawDescOnce sync.Once
	file_messages_tezos_proto_rawDescData = file_messages_tezos_proto_rawDesc
)

func file_messages_tezos_proto_rawDescGZIP() []byte {
	file_messages_tezos_proto_rawDescOnce.Do(func() {
		file_messages_tezos_proto_rawDescData = protoimpl.X.CompressGZIP(file_messages_tezos_proto_rawDescData)
	})
	return file_messages_tezos_proto_rawDescData
}

var file_messages_tezos_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_messages_tezos_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_messages_tezos_proto_goTypes = []interface{}{
	(TezosSignTx_TezosContractID_TezosContractType)(0),            // 0: hw.trezor.messages.tezos.TezosSignTx.TezosContractID.TezosContractType
	(TezosSignTx_TezosBallotOp_TezosBallotType)(0),                // 1: hw.trezor.messages.tezos.TezosSignTx.TezosBallotOp.TezosBallotType
	(*TezosGetAddress)(nil),                                       // 2: hw.trezor.messages.tezos.TezosGetAddress
	(*TezosAddress)(nil),                                          // 3: hw.trezor.messages.tezos.TezosAddress
	(*TezosGetPublicKey)(nil),                                     // 4: hw.trezor.messages.tezos.TezosGetPublicKey
	(*TezosPublicKey)(nil),                                        // 5: hw.trezor.messages.tezos.TezosPublicKey
	(*TezosSignTx)(nil),                                           // 6: hw.trezor.messages.tezos.TezosSignTx
	(*TezosSignedTx)(nil),                                         // 7: hw.trezor.messages.tezos.TezosSignedTx
	(*TezosSignTx_TezosContractID)(nil),                           // 8: hw.trezor.messages.tezos.TezosSignTx.TezosContractID
	(*TezosSignTx_TezosRevealOp)(nil),                             // 9: hw.trezor.messages.tezos.TezosSignTx.TezosRevealOp
	(*TezosSignTx_TezosTransactionOp)(nil),                        // 10: hw.trezor.messages.tezos.TezosSignTx.TezosTransactionOp
	(*TezosSignTx_TezosOriginationOp)(nil),                        // 11: hw.trezor.messages.tezos.TezosSignTx.TezosOriginationOp
	(*TezosSignTx_TezosDelegationOp)(nil),                         // 12: hw.trezor.messages.tezos.TezosSignTx.TezosDelegationOp
	(*TezosSignTx_TezosProposalOp)(nil),                           // 13: hw.trezor.messages.tezos.TezosSignTx.TezosProposalOp
	(*TezosSignTx_TezosBallotOp)(nil),                             // 14: hw.trezor.messages.tezos.TezosSignTx.TezosBallotOp
	(*TezosSignTx_TezosTransactionOp_TezosParametersManager)(nil), // 15: hw.trezor.messages.tezos.TezosSignTx.TezosTransactionOp.TezosParametersManager
	(*TezosSignTx_TezosTransactionOp_TezosParametersManager_TezosManagerTransfer)(nil), // 16: hw.trezor.messages.tezos.TezosSignTx.TezosTransactionOp.TezosParametersManager.TezosManagerTransfer
}
var file_messages_tezos_proto_depIdxs = []int32{
	9,  // 0: hw.trezor.messages.tezos.TezosSignTx.reveal:type_name -> hw.trezor.messages.tezos.TezosSignTx.TezosRevealOp
	10, // 1: hw.trezor.messages.tezos.TezosSignTx.transaction:type_name -> hw.trezor.messages.tezos.TezosSignTx.TezosTransactionOp
	11, // 2: hw.trezor.messages.tezos.TezosSignTx.origination:type_name -> hw.trezor.messages.tezos.TezosSignTx.TezosOriginationOp
	12, // 3: hw.trezor.messages.tezos.TezosSignTx.delegation:type_name -> hw.trezor.messages.tezos.TezosSignTx.TezosDelegationOp
	13, // 4: hw.trezor.messages.tezos.TezosSignTx.proposal:type_name -> hw.trezor.messages.tezos.TezosSignTx.TezosProposalOp
	14, // 5: hw.trezor.messages.tezos.TezosSignTx.ballot:type_name -> hw.trezor.messages.tezos.TezosSignTx.TezosBallotOp
	0,  // 6: hw.trezor.messages.tezos.TezosSignTx.TezosContractID.tag:type_name -> hw.trezor.messages.tezos.TezosSignTx.TezosContractID.TezosContractType
	8,  // 7: hw.trezor.messages.tezos.TezosSignTx.TezosTransactionOp.destination:type_name -> hw.trezor.messages.tezos.TezosSignTx.TezosContractID
	15, // 8: hw.trezor.messages.tezos.TezosSignTx.TezosTransactionOp.parameters_manager:type_name -> hw.trezor.messages.tezos.TezosSignTx.TezosTransactionOp.TezosParametersManager
	1,  // 9: hw.trezor.messages.tezos.TezosSignTx.TezosBallotOp.ballot:type_name -> hw.trezor.messages.tezos.TezosSignTx.TezosBallotOp.TezosBallotType
	16, // 10: hw.trezor.messages.tezos.TezosSignTx.TezosTransactionOp.TezosParametersManager.transfer:type_name -> hw.trezor.messages.tezos.TezosSignTx.TezosTransactionOp.TezosParametersManager.TezosManagerTransfer
	8,  // 11: hw.trezor.messages.tezos.TezosSignTx.TezosTransactionOp.TezosParametersManager.TezosManagerTransfer.destination:type_name -> hw.trezor.messages.tezos.TezosSignTx.TezosContractID
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_messages_tezos_proto_init() }
func file_messages_tezos_proto_init() {
	if File_messages_tezos_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_messages_tezos_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TezosGetAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_tezos_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TezosAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_tezos_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TezosGetPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_tezos_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TezosPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_tezos_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TezosSignTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_tezos_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TezosSignedTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_tezos_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TezosSignTx_TezosContractID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_tezos_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TezosSignTx_TezosRevealOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_tezos_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TezosSignTx_TezosTransactionOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_tezos_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TezosSignTx_TezosOriginationOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_tezos_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TezosSignTx_TezosDelegationOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_tezos_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TezosSignTx_TezosProposalOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_tezos_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TezosSignTx_TezosBallotOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_tezos_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TezosSignTx_TezosTransactionOp_TezosParametersManager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_tezos_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TezosSignTx_TezosTransactionOp_TezosParametersManager_TezosManagerTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messages_tezos_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_tezos_proto_goTypes,
		DependencyIndexes: file_messages_tezos_proto_depIdxs,
		EnumInfos:         file_messages_tezos_proto_enumTypes,
		MessageInfos:      file_messages_tezos_proto_msgTypes,
	}.Build()
	File_messages_tezos_proto = out.File
	file_messages_tezos_proto_rawDesc = nil
	file_messages_tezos_proto_goTypes = nil
	file_messages_tezos_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: messages-bitcoin.proto

package trproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Type of script which will be used for transaction input
type InputScriptType int32

const (
	InputScriptType_SPENDADDRESS     InputScriptType = 0 // standard P2PKH address
	InputScriptType_SPENDMULTISIG    InputScriptType = 1 // P2SH multisig address
	InputScriptType_EXTERNAL         InputScriptType = 2 // reserved for external inputs (coinjoin)
	InputScriptType_SPENDWITNESS     InputScriptType = 3 // native SegWit
	InputScriptType_SPENDP2SHWITNESS InputScriptType = 4 // SegWit over P2SH (backward compatible)
	InputScriptType_SPENDTAPROOT     InputScriptType = 5 // Taproot
)

// Enum value maps for InputScriptType.
var (
	InputScriptType_name = map[int32]string{
		0: "SPENDADDRESS",
		1: "SPENDMULTISIG",
		2: "EXTERNAL",
		3: "SPENDWITNESS",
		4: "SPENDP2SHWITNESS",
		5: "SPENDTAPROOT",
	}
	InputScriptType_value = map[string]int32{
		"SPENDADDRESS":     0,
		"SPENDMULTISIG":    1,
		"EXTERNAL":         2,
		"SPENDWITNESS":     3,
		"SPENDP2SHWITNESS": 4,
		"SPENDTAPROOT":     5,
	}
)

func (x InputScriptType) Enum() *InputScriptType {
	p := new(InputScriptType)
	*p = x
	return p
}

func (x InputScriptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InputScriptType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_bitcoin_proto_enumTypes[0].Descriptor()
}

func (InputScriptType) Type() protoreflect.EnumType {
	return &file_messages_bitcoin_proto_enumTypes[0]
}

func (x InputScriptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *InputScriptType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = InputScriptType(num)
	return nil
}

// Deprecated: Use InputScriptType.Descriptor instead.
func (InputScriptType) EnumDescriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{0}
}

// *
// Type of script which will be used for transaction output
type OutputScriptType int32

const (
	OutputScriptType_PAYTOADDRESS     OutputScriptType = 0 // used for all addresses (bitcoin, p2sh, witness)
	OutputScriptType_PAYTOSCRIPTHASH  OutputScriptType = 1 // p2sh address (deprecated; use PAYTOADDRESS)
	OutputScriptType_PAYTOMULTISIG    OutputScriptType = 2 // only for change output
	OutputScriptType_PAYTOOPRETURN    OutputScriptType = 3 // op_return
	OutputScriptType_PAYTOWITNESS     OutputScriptType = 4 // only for change output
	OutputScriptType_PAYTOP2SHWITNESS OutputScriptType = 5 // only for change output
	OutputScriptType_PAYTOTAPROOT     OutputScriptType = 6 // only for change output
)

// Enum value maps for OutputScriptType.
var (
	OutputScriptType_name = map[int32]string{
		0: "PAYTOADDRESS",
		1: "PAYTOSCRIPTHASH",
		2: "PAYTOMULTISIG",
		3: "PAYTOOPRETURN",
		4: "PAYTOWITNESS",
		5: "PAYTOP2SHWITNESS",
		6: "PAYTOTAPROOT",
	}
	OutputScriptType_value = map[string]int32{
		"PAYTOADDRESS":     0,
		"PAYTOSCRIPTHASH":  1,
		"PAYTOMULTISIG":    2,
		"PAYTOOPRETURN":    3,
		"PAYTOWITNESS":     4,
		"PAYTOP2SHWITNESS": 5,
		"PAYTOTAPROOT":     6,
	}
)

func (x OutputScriptType) Enum() *OutputScriptType {
	p := new(OutputScriptType)
	*p = x
	return p
}

func (x OutputScriptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutputScriptType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_bitcoin_proto_enumTypes[1].Descriptor()
}

func (OutputScriptType) Type() protoreflect.EnumType {
	return &file_messages_bitcoin_proto_enumTypes[1]
}

func (x OutputScriptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OutputScriptType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OutputScriptType(num)
	return nil
}

// Deprecated: Use OutputScriptType.Descriptor instead.
func (OutputScriptType) EnumDescriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{1}
}

// *
// Type of script which will be used for decred stake transaction input
type DecredStakingSpendType int32

const (
	DecredStakingSpendType_SSGen DecredStakingSpendType = 0
	DecredStakingSpendType_SSRTX DecredStakingSpendType = 1
)

// Enum value maps for DecredStakingSpendType.
var (
	DecredStakingSpendType_name = map[int32]string{
		0: "SSGen",
		1: "SSRTX",
	}
	DecredStakingSpendType_value = map[string]int32{
		"SSGen": 0,
		"SSRTX": 1,
	}
)

func (x DecredStakingSpendType) Enum() *DecredStakingSpendType {
	p := new(DecredStakingSpendType)
	*p = x
	return p
}

func (x DecredStakingSpendType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DecredStakingSpendType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_bitcoin_proto_enumTypes[2].Descriptor()
}

func (DecredStakingSpendType) Type() protoreflect.EnumType {
	return &file_messages_bitcoin_proto_enumTypes[2]
}

func (x DecredStakingSpendType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DecredStakingSpendType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DecredStakingSpendType(num)
	return nil
}

// Deprecated: Use DecredStakingSpendType.Descriptor instead.
func (DecredStakingSpendType) EnumDescriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{2}
}

// *
// Unit to be used when showing amounts on the display
type AmountUnit int32

const (
	AmountUnit_BITCOIN      AmountUnit = 0 // BTC
	AmountUnit_MILLIBITCOIN AmountUnit = 1 // mBTC
	AmountUnit_MICROBITCOIN AmountUnit = 2 // uBTC
	AmountUnit_SATOSHI      AmountUnit = 3 // sat
)

// Enum value maps for AmountUnit.
var (
	AmountUnit_name = map[int32]string{
		0: "BITCOIN",
		1: "MILLIBITCOIN",
		2: "MICROBITCOIN",
		3: "SATOSHI",
	}
	AmountUnit_value = map[string]int32{
		"BITCOIN":      0,
		"MILLIBITCOIN": 1,
		"MICROBITCOIN": 2,
		"SATOSHI":      3,
	}
)

func (x AmountUnit) Enum() *AmountUnit {
	p := new(AmountUnit)
	*p = x
	return p
}

func (x AmountUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AmountUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_bitcoin_proto_enumTypes[3].Descriptor()
}

func (AmountUnit) Type() protoreflect.EnumType {
	return &file_messages_bitcoin_proto_enumTypes[3]
}

func (x AmountUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AmountUnit) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AmountUnit(num)
	return nil
}

// Deprecated: Use AmountUnit.Descriptor instead.
func (AmountUnit) EnumDescriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{3}
}

// *
// Type of information required by transaction signing process
type TxRequest_RequestType int32

const (
	TxRequest_TXINPUT      TxRequest_RequestType = 0
	TxRequest_TXOUTPUT     TxRequest_RequestType = 1
	TxRequest_TXMETA       TxRequest_RequestType = 2
	TxRequest_TXFINISHED   TxRequest_RequestType = 3
	TxRequest_TXEXTRADATA  TxRequest_RequestType = 4
	TxRequest_TXORIGINPUT  TxRequest_RequestType = 5
	TxRequest_TXORIGOUTPUT TxRequest_RequestType = 6
	TxRequest_TXPAYMENTREQ TxRequest_RequestType = 7
)

// Enum value maps for TxRequest_RequestType.
var (
	TxRequest_RequestType_name = map[int32]string{
		0: "TXINPUT",
		1: "TXOUTPUT",
		2: "TXMETA",
		3: "TXFINISHED",
		4: "TXEXTRADATA",
		5: "TXORIGINPUT",
		6: "TXORIGOUTPUT",
		7: "TXPAYMENTREQ",
	}
	TxRequest_RequestType_value = map[string]int32{
		"TXINPUT":      0,
		"TXOUTPUT":     1,
		"TXMETA":       2,
		"TXFINISHED":   3,
		"TXEXTRADATA":  4,
		"TXORIGINPUT":  5,
		"TXORIGOUTPUT": 6,
		"TXPAYMENTREQ": 7,
	}
)

func (x TxRequest_RequestType) Enum() *TxRequest_RequestType {
	p := new(TxRequest_RequestType)
	*p = x
	return p
}

func (x TxRequest_RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxRequest_RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_bitcoin_proto_enumTypes[4].Descriptor()
}

func (TxRequest_RequestType) Type() protoreflect.EnumType {
	return &file_messages_bitcoin_proto_enumTypes[4]
}

func (x TxRequest_RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TxRequest_RequestType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TxRequest_RequestType(num)
	return nil
}

// Deprecated: Use TxRequest_RequestType.Descriptor instead.
func (TxRequest_RequestType) EnumDescriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{11, 0}
}

// *
// Type of redeem script used in input
// @embed
type MultisigRedeemScriptType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkeys    []*MultisigRedeemScriptType_HDNodePathType `protobuf:"bytes,1,rep,name=pubkeys" json:"pubkeys,omitempty"`                    // pubkeys from multisig address (sorted lexicographically)
	Signatures [][]byte                                   `protobuf:"bytes,2,rep,name=signatures" json:"signatures,omitempty"`              // existing signatures for partially signed input
	M          *uint32                                    `protobuf:"varint,3,req,name=m" json:"m,omitempty"`                               // "m" from n, how many valid signatures is necessary for spending
	Nodes      []*HDNodeType                              `protobuf:"bytes,4,rep,name=nodes" json:"nodes,omitempty"`                        // simplified way how to specify pubkeys if they share the same address_n path
	AddressN   []uint32                                   `protobuf:"varint,5,rep,name=address_n,json=addressN" json:"address_n,omitempty"` // use only field 1 or fields 4+5, if fields 4+5 are used, field 1 is ignored
}

func (x *MultisigRedeemScriptType) Reset() {
	*x = MultisigRedeemScriptType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultisigRedeemScriptType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultisigRedeemScriptType) ProtoMessage() {}

func (x *MultisigRedeemScriptType) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultisigRedeemScriptType.ProtoReflect.Descriptor instead.
func (*MultisigRedeemScriptType) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{0}
}

func (x *MultisigRedeemScriptType) GetPubkeys() []*MultisigRedeemScriptType_HDNodePathType {
	if x != nil {
		return x.Pubkeys
	}
	return nil
}

func (x *MultisigRedeemScriptType) GetSignatures() [][]byte {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *MultisigRedeemScriptType) GetM() uint32 {
	if x != nil && x.M != nil {
		return *x.M
	}
	return 0
}

func (x *MultisigRedeemScriptType) GetNodes() []*HDNodeType {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *MultisigRedeemScriptType) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

// *
// Request: Ask device for public key corresponding to address_n path
// @start
// @next PublicKey
// @next Failure
type GetPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressN        []uint32         `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                                                             // BIP-32 path to derive the key from master node
	EcdsaCurveName  *string          `protobuf:"bytes,2,opt,name=ecdsa_curve_name,json=ecdsaCurveName" json:"ecdsa_curve_name,omitempty"`                                          // ECDSA curve name to use
	ShowDisplay     *bool            `protobuf:"varint,3,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"`                                                    // optionally show on display before sending the result
	CoinName        *string          `protobuf:"bytes,4,opt,name=coin_name,json=coinName,def=Bitcoin" json:"coin_name,omitempty"`                                                  // coin to use for verifying
	ScriptType      *InputScriptType `protobuf:"varint,5,opt,name=script_type,json=scriptType,enum=hw.trezor.messages.bitcoin.InputScriptType,def=0" json:"script_type,omitempty"` // used to distinguish between various address formats (non-segwit, segwit, etc.)
	IgnoreXpubMagic *bool            `protobuf:"varint,6,opt,name=ignore_xpub_magic,json=ignoreXpubMagic" json:"ignore_xpub_magic,omitempty"`                                      // ignore SLIP-0132 XPUB magic, use xpub/tpub prefix for all account types
}

// Default values for GetPublicKey fields.
const (
	Default_GetPublicKey_CoinName   = string("Bitcoin")
	Default_GetPublicKey_ScriptType = InputScriptType_SPENDADDRESS
)

func (x *GetPublicKey) Reset() {
	*x = GetPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicKey) ProtoMessage() {}

func (x *GetPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicKey.ProtoReflect.Descriptor instead.
func (*GetPublicKey) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{1}
}

func (x *GetPublicKey) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *GetPublicKey) GetEcdsaCurveName() string {
	if x != nil && x.EcdsaCurveName != nil {
		return *x.EcdsaCurveName
	}
	return ""
}

func (x *GetPublicKey) GetShowDisplay() bool {
	if x != nil && x.ShowDisplay != nil {
		return *x.ShowDisplay
	}
	return false
}

func (x *GetPublicKey) GetCoinName() string {
	if x != nil && x.CoinName != nil {
		return *x.CoinName
	}
	return Default_GetPublicKey_CoinName
}

func (x *GetPublicKey) GetScriptType() InputScriptType {
	if x != nil && x.ScriptType != nil {
		return *x.ScriptType
	}
	return Default_GetPublicKey_ScriptType
}

func (x *GetPublicKey) GetIgnoreXpubMagic() bool {
	if x != nil && x.IgnoreXpubMagic != nil {
		return *x.IgnoreXpubMagic
	}
	return false
}

// *
// Response: Contains public key derived from device private seed
// @end
type PublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node            *HDNodeType `protobuf:"bytes,1,req,name=node" json:"node,omitempty"`                                               // BIP32 public node
	Xpub            *string     `protobuf:"bytes,2,req,name=xpub" json:"xpub,omitempty"`                                               // serialized form of public node
	RootFingerprint *uint32     `protobuf:"varint,3,opt,name=root_fingerprint,json=rootFingerprint" json:"root_fingerprint,omitempty"` // master root node fingerprint
}

func (x *PublicKey) Reset() {
	*x = PublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKey) ProtoMessage() {}

func (x *PublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKey.ProtoReflect.Descriptor instead.
func (*PublicKey) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{2}
}

func (x *PublicKey) GetNode() *HDNodeType {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *PublicKey) GetXpub() string {
	if x != nil && x.Xpub != nil {
		return *x.Xpub
	}
	return ""
}

func (x *PublicKey) GetRootFingerprint() uint32 {
	if x != nil && x.RootFingerprint != nil {
		return *x.RootFingerprint
	}
	return 0
}

// *
// Request: Ask device for address corresponding to address_n path
// @start
// @next Address
// @next Failure
type GetAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressN        []uint32                  `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                                                             // BIP-32 path to derive the key from master node
	CoinName        *string                   `protobuf:"bytes,2,opt,name=coin_name,json=coinName,def=Bitcoin" json:"coin_name,omitempty"`                                                  // coin to use
	ShowDisplay     *bool                     `protobuf:"varint,3,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"`                                                    // optionally show on display before sending the result
	Multisig        *MultisigRedeemScriptType `protobuf:"bytes,4,opt,name=multisig" json:"multisig,omitempty"`                                                                              // filled if we are showing a multisig address
	ScriptType      *InputScriptType          `protobuf:"varint,5,opt,name=script_type,json=scriptType,enum=hw.trezor.messages.bitcoin.InputScriptType,def=0" json:"script_type,omitempty"` // used to distinguish between various address formats (non-segwit, segwit, etc.)
	IgnoreXpubMagic *bool                     `protobuf:"varint,6,opt,name=ignore_xpub_magic,json=ignoreXpubMagic" json:"ignore_xpub_magic,omitempty"`                                      // ignore SLIP-0132 XPUB magic, use xpub/tpub prefix for all account types
}

// Default values for GetAddress fields.
const (
	Default_GetAddress_CoinName   = string("Bitcoin")
	Default_GetAddress_ScriptType = InputScriptType_SPENDADDRESS
)

func (x *GetAddress) Reset() {
	*x = GetAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddress) ProtoMessage() {}

func (x *GetAddress) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddress.ProtoReflect.Descriptor instead.
func (*GetAddress) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{3}
}

func (x *GetAddress) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *GetAddress) GetCoinName() string {
	if x != nil && x.CoinName != nil {
		return *x.CoinName
	}
	return Default_GetAddress_CoinName
}

func (x *GetAddress) GetShowDisplay() bool {
	if x != nil && x.ShowDisplay != nil {
		return *x.ShowDisplay
	}
	return false
}

func (x *GetAddress) GetMultisig() *MultisigRedeemScriptType {
	if x != nil {
		return x.Multisig
	}
	return nil
}

func (x *GetAddress) GetScriptType() InputScriptType {
	if x != nil && x.ScriptType != nil {
		return *x.ScriptType
	}
	return Default_GetAddress_ScriptType
}

func (x *GetAddress) GetIgnoreXpubMagic() bool {
	if x != nil && x.IgnoreXpubMagic != nil {
		return *x.IgnoreXpubMagic
	}
	return false
}

// *
// Response: Contains address derived from device private seed
// @end
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *string `protobuf:"bytes,1,req,name=address" json:"address,omitempty"` // Coin address in Base58 encoding
	Mac     []byte  `protobuf:"bytes,2,opt,name=mac" json:"mac,omitempty"`         // Address authentication code
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{4}
}

func (x *Address) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *Address) GetMac() []byte {
	if x != nil {
		return x.Mac
	}
	return nil
}

// *
// Request: Ask device for ownership identifier corresponding to scriptPubKey for address_n path
// @start
// @next OwnershipId
// @next Failure
type GetOwnershipId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressN   []uint32                  `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                                                             // BIP-32 path to derive the key from master node
	CoinName   *string                   `protobuf:"bytes,2,opt,name=coin_name,json=coinName,def=Bitcoin" json:"coin_name,omitempty"`                                                  // coin to use
	Multisig   *MultisigRedeemScriptType `protobuf:"bytes,3,opt,name=multisig" json:"multisig,omitempty"`                                                                              // filled if we are dealing with a multisig scriptPubKey
	ScriptType *InputScriptType          `protobuf:"varint,4,opt,name=script_type,json=scriptType,enum=hw.trezor.messages.bitcoin.InputScriptType,def=0" json:"script_type,omitempty"` // used to distinguish between various address formats (non-segwit, segwit, etc.)
}

// Default values for GetOwnershipId fields.
const (
	Default_GetOwnershipId_CoinName   = string("Bitcoin")
	Default_GetOwnershipId_ScriptType = InputScriptType_SPENDADDRESS
)

func (x *GetOwnershipId) Reset() {
	*x = GetOwnershipId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOwnershipId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOwnershipId) ProtoMessage() {}

func (x *GetOwnershipId) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOwnershipId.ProtoReflect.Descriptor instead.
func (*GetOwnershipId) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{5}
}

func (x *GetOwnershipId) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *GetOwnershipId) GetCoinName() string {
	if x != nil && x.CoinName != nil {
		return *x.CoinName
	}
	return Default_GetOwnershipId_CoinName
}

func (x *GetOwnershipId) GetMultisig() *MultisigRedeemScriptType {
	if x != nil {
		return x.Multisig
	}
	return nil
}

func (x *GetOwnershipId) GetScriptType() InputScriptType {
	if x != nil && x.ScriptType != nil {
		return *x.ScriptType
	}
	return Default_GetOwnershipId_ScriptType
}

// *
// Response: Contains the ownership identifier for the scriptPubKey and device private seed
// @end
type OwnershipId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnershipId []byte `protobuf:"bytes,1,req,name=ownership_id,json=ownershipId" json:"ownership_id,omitempty"` // ownership identifier
}

func (x *OwnershipId) Reset() {
	*x = OwnershipId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OwnershipId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnershipId) ProtoMessage() {}

func (x *OwnershipId) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnershipId.ProtoReflect.Descriptor instead.
func (*OwnershipId) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{6}
}

func (x *OwnershipId) GetOwnershipId() []byte {
	if x != nil {
		return x.OwnershipId
	}
	return nil
}

// *
// Request: Ask device to sign message
// @start
// @next MessageSignature
// @next Failure
type SignMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressN     []uint32         `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                                                             // BIP-32 path to derive the key from master node
	Message      []byte           `protobuf:"bytes,2,req,name=message" json:"message,omitempty"`                                                                                // message to be signed
	CoinName     *string          `protobuf:"bytes,3,opt,name=coin_name,json=coinName,def=Bitcoin" json:"coin_name,omitempty"`                                                  // coin to use for signing
	ScriptType   *InputScriptType `protobuf:"varint,4,opt,name=script_type,json=scriptType,enum=hw.trezor.messages.bitcoin.InputScriptType,def=0" json:"script_type,omitempty"` // used to distinguish between various address formats (non-segwit, segwit, etc.)
	NoScriptType *bool            `protobuf:"varint,5,opt,name=no_script_type,json=noScriptType" json:"no_script_type,omitempty"`                                               // don't include script type information in the recovery byte of the signature, same as in Bitcoin Core
}

// Default values for SignMessage fields.
const (
	Default_SignMessage_CoinName   = string("Bitcoin")
	Default_SignMessage_ScriptType = InputScriptType_SPENDADDRESS
)

func (x *SignMessage) Reset() {
	*x = SignMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignMessage) ProtoMessage() {}

func (x *SignMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignMessage.ProtoReflect.Descriptor instead.
func (*SignMessage) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{7}
}

func (x *SignMessage) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *SignMessage) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SignMessage) GetCoinName() string {
	if x != nil && x.CoinName != nil {
		return *x.CoinName
	}
	return Default_SignMessage_CoinName
}

func (x *SignMessage) GetScriptType() InputScriptType {
	if x != nil && x.ScriptType != nil {
		return *x.ScriptType
	}
	return Default_SignMessage_ScriptType
}

func (x *SignMessage) GetNoScriptType() bool {
	if x != nil && x.NoScriptType != nil {
		return *x.NoScriptType
	}
	return false
}

// *
// Response: Signed message
// @end
type MessageSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   *string `protobuf:"bytes,1,req,name=address" json:"address,omitempty"`     // address used to sign the message
	Signature []byte  `protobuf:"bytes,2,req,name=signature" json:"signature,omitempty"` // signature of the message
}

func (x *MessageSignature) Reset() {
	*x = MessageSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSignature) ProtoMessage() {}

func (x *MessageSignature) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSignature.ProtoReflect.Descriptor instead.
func (*MessageSignature) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{8}
}

func (x *MessageSignature) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *MessageSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// *
// Request: Ask device to verify message
// @start
// @next Success
// @next Failure
type VerifyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   *string `protobuf:"bytes,1,req,name=address" json:"address,omitempty"`                               // address to verify
	Signature []byte  `protobuf:"bytes,2,req,name=signature" json:"signature,omitempty"`                           // signature to verify
	Message   []byte  `protobuf:"bytes,3,req,name=message" json:"message,omitempty"`                               // message to verify
	CoinName  *string `protobuf:"bytes,4,opt,name=coin_name,json=coinName,def=Bitcoin" json:"coin_name,omitempty"` // coin to use for verifying
}

// Default values for VerifyMessage fields.
const (
	Default_VerifyMessage_CoinName = string("Bitcoin")
)

func (x *VerifyMessage) Reset() {
	*x = VerifyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyMessage) ProtoMessage() {}

func (x *VerifyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyMessage.ProtoReflect.Descriptor instead.
func (*VerifyMessage) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{9}
}

func (x *VerifyMessage) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *VerifyMessage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *VerifyMessage) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *VerifyMessage) GetCoinName() string {
	if x != nil && x.CoinName != nil {
		return *x.CoinName
	}
	return Default_VerifyMessage_CoinName
}

// *
// Request: Ask device to sign transaction
// @start
// @next TxRequest
// @next Failure
type SignTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputsCount *uint32 `protobuf:"varint,1,req,name=outputs_count,json=outputsCount" json:"outputs_count,omitempty"` // number of transaction outputs
	InputsCount  *uint32 `protobuf:"varint,2,req,name=inputs_count,json=inputsCount" json:"inputs_count,omitempty"`    // number of transaction inputs
	CoinName     *string `protobuf:"bytes,3,opt,name=coin_name,json=coinName,def=Bitcoin" json:"coin_name,omitempty"`  // coin to use
	Version      *uint32 `protobuf:"varint,4,opt,name=version,def=1" json:"version,omitempty"`                         // transaction version
	LockTime     *uint32 `protobuf:"varint,5,opt,name=lock_time,json=lockTime,def=0" json:"lock_time,omitempty"`       // transaction lock_time
	Expiry       *uint32 `protobuf:"varint,6,opt,name=expiry" json:"expiry,omitempty"`                                 // only for Decred and Zcash
	// Deprecated: Do not use.
	Overwintered        *bool                   `protobuf:"varint,7,opt,name=overwintered" json:"overwintered,omitempty"`                                                                 // deprecated in 2.3.2, the field is not needed as it can be derived from `version`
	VersionGroupId      *uint32                 `protobuf:"varint,8,opt,name=version_group_id,json=versionGroupId" json:"version_group_id,omitempty"`                                     // only for Zcash, nVersionGroupId
	Timestamp           *uint32                 `protobuf:"varint,9,opt,name=timestamp" json:"timestamp,omitempty"`                                                                       // only for Peercoin
	BranchId            *uint32                 `protobuf:"varint,10,opt,name=branch_id,json=branchId" json:"branch_id,omitempty"`                                                        // only for Zcash, BRANCH_ID
	AmountUnit          *AmountUnit             `protobuf:"varint,11,opt,name=amount_unit,json=amountUnit,enum=hw.trezor.messages.bitcoin.AmountUnit,def=0" json:"amount_unit,omitempty"` // show amounts in
	DecredStakingTicket *bool                   `protobuf:"varint,12,opt,name=decred_staking_ticket,json=decredStakingTicket,def=0" json:"decred_staking_ticket,omitempty"`               // only for Decred, this is signing a ticket purchase
	Serialize           *bool                   `protobuf:"varint,13,opt,name=serialize,def=1" json:"serialize,omitempty"`                                                                // serialize the full transaction, as opposed to only outputting the signatures
	CoinjoinRequest     *SignTx_CoinJoinRequest `protobuf:"bytes,14,opt,name=coinjoin_request,json=coinjoinRequest" json:"coinjoin_request,omitempty"`                                    // only for preauthorized CoinJoins
}

// Default values for SignTx fields.
const (
	Default_SignTx_CoinName            = string("Bitcoin")
	Default_SignTx_Version             = uint32(1)
	Default_SignTx_LockTime            = uint32(0)
	Default_SignTx_AmountUnit          = AmountUnit_BITCOIN
	Default_SignTx_DecredStakingTicket = bool(false)
	Default_SignTx_Serialize           = bool(true)
)

func (x *SignTx) Reset() {
	*x = SignTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignTx) ProtoMessage() {}

func (x *SignTx) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignTx.ProtoReflect.Descriptor instead.
func (*SignTx) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{10}
}

func (x *SignTx) GetOutputsCount() uint32 {
	if x != nil && x.OutputsCount != nil {
		return *x.OutputsCount
	}
	return 0
}

func (x *SignTx) GetInputsCount() uint32 {
	if x != nil && x.InputsCount != nil {
		return *x.InputsCount
	}
	return 0
}

func (x *SignTx) GetCoinName() string {
	if x != nil && x.CoinName != nil {
		return *x.CoinName
	}
	return Default_SignTx_CoinName
}

func (x *SignTx) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return Default_SignTx_Version
}

func (x *SignTx) GetLockTime() uint32 {
	if x != nil && x.LockTime != nil {
		return *x.LockTime
	}
	return Default_SignTx_LockTime
}

func (x *SignTx) GetExpiry() uint32 {
	if x != nil && x.Expiry != nil {
		return *x.Expiry
	}
	return 0
}

// Deprecated: Do not use.
func (x *SignTx) GetOverwintered() bool {
	if x != nil && x.Overwintered != nil {
		return *x.Overwintered
	}
	return false
}

func (x *SignTx) GetVersionGroupId() uint32 {
	if x != nil && x.VersionGroupId != nil {
		return *x.VersionGroupId
	}
	return 0
}

func (x *SignTx) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *SignTx) GetBranchId() uint32 {
	if x != nil && x.BranchId != nil {
		return *x.BranchId
	}
	return 0
}

func (x *SignTx) GetAmountUnit() AmountUnit {
	if x != nil && x.AmountUnit != nil {
		return *x.AmountUnit
	}
	return Default_SignTx_AmountUnit
}

func (x *SignTx) GetDecredStakingTicket() bool {
	if x != nil && x.DecredStakingTicket != nil {
		return *x.DecredStakingTicket
	}
	return Default_SignTx_DecredStakingTicket
}

func (x *SignTx) GetSerialize() bool {
	if x != nil && x.Serialize != nil {
		return *x.Serialize
	}
	return Default_SignTx_Serialize
}

func (x *SignTx) GetCoinjoinRequest() *SignTx_CoinJoinRequest {
	if x != nil {
		return x.CoinjoinRequest
	}
	return nil
}

// *
// Response: Device asks for information for signing transaction or returns the last result
// If request_index is set, device awaits TxAck<any> matching the request type.
// If signature_index is set, 'signature' contains signed input of signature_index's input
// @end
// @next TxAckInput
// @next TxAckOutput
// @next TxAckPrevMeta
// @next TxAckPrevInput
// @next TxAckPrevOutput
// @next TxAckPrevExtraData
// @next TxAckPaymentRequest
type TxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestType *TxRequest_RequestType             `protobuf:"varint,1,opt,name=request_type,json=requestType,enum=hw.trezor.messages.bitcoin.TxRequest_RequestType" json:"request_type,omitempty"` // what should be filled in TxAck message?
	Details     *TxRequest_TxRequestDetailsType    `protobuf:"bytes,2,opt,name=details" json:"details,omitempty"`                                                                                   // request for tx details
	Serialized  *TxRequest_TxRequestSerializedType `protobuf:"bytes,3,opt,name=serialized" json:"serialized,omitempty"`                                                                             // serialized data and request for next
}

func (x *TxRequest) Reset() {
	*x = TxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxRequest) ProtoMessage() {}

func (x *TxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxRequest.ProtoReflect.Descriptor instead.
func (*TxRequest) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{11}
}

func (x *TxRequest) GetRequestType() TxRequest_RequestType {
	if x != nil && x.RequestType != nil {
		return *x.RequestType
	}
	return TxRequest_TXINPUT
}

func (x *TxRequest) GetDetails() *TxRequest_TxRequestDetailsType {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *TxRequest) GetSerialized() *TxRequest_TxRequestSerializedType {
	if x != nil {
		return x.Serialized
	}
	return nil
}

// *
// Request: Reported transaction data (legacy)
//
// This message contains all possible field that can be sent in response to a TxRequest.
// Depending on the request_type, the host is supposed to fill some of these fields.
//
// The interface is wire-compatible with the new method of specialized TxAck subtypes,
// so it can be used in the old way. However, it is now recommended to use more
// specialized messages, which have better-configured constraints on field values.
//
// @next TxRequest
//
// Deprecated: Do not use.
type TxAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx *TxAck_TransactionType `protobuf:"bytes,1,opt,name=tx" json:"tx,omitempty"`
}

func (x *TxAck) Reset() {
	*x = TxAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxAck) ProtoMessage() {}

func (x *TxAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxAck.ProtoReflect.Descriptor instead.
func (*TxAck) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{12}
}

func (x *TxAck) GetTx() *TxAck_TransactionType {
	if x != nil {
		return x.Tx
	}
	return nil
}

// * Data type for transaction input to be signed.
//
// # When adding fields, take care to not conflict with PrevInput
//
// @embed
type TxInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressN           []uint32                  `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                                                                                         // BIP-32 path to derive the key from master node
	PrevHash           []byte                    `protobuf:"bytes,2,req,name=prev_hash,json=prevHash" json:"prev_hash,omitempty"`                                                                                          // hash of previous transaction output to spend by this input
	PrevIndex          *uint32                   `protobuf:"varint,3,req,name=prev_index,json=prevIndex" json:"prev_index,omitempty"`                                                                                      // index of previous output to spend
	ScriptSig          []byte                    `protobuf:"bytes,4,opt,name=script_sig,json=scriptSig" json:"script_sig,omitempty"`                                                                                       // script signature, only set for EXTERNAL inputs
	Sequence           *uint32                   `protobuf:"varint,5,opt,name=sequence,def=4294967295" json:"sequence,omitempty"`                                                                                          // sequence
	ScriptType         *InputScriptType          `protobuf:"varint,6,opt,name=script_type,json=scriptType,enum=hw.trezor.messages.bitcoin.InputScriptType,def=0" json:"script_type,omitempty"`                             // defines template of input script
	Multisig           *MultisigRedeemScriptType `protobuf:"bytes,7,opt,name=multisig" json:"multisig,omitempty"`                                                                                                          // Filled if input is going to spend multisig tx
	Amount             *uint64                   `protobuf:"varint,8,req,name=amount" json:"amount,omitempty"`                                                                                                             // amount of previous transaction output
	DecredTree         *uint32                   `protobuf:"varint,9,opt,name=decred_tree,json=decredTree" json:"decred_tree,omitempty"`                                                                                   // only for Decred, 0 is a normal transaction while 1 is a stake transaction
	Witness            []byte                    `protobuf:"bytes,13,opt,name=witness" json:"witness,omitempty"`                                                                                                           // witness data, only set for EXTERNAL inputs
	OwnershipProof     []byte                    `protobuf:"bytes,14,opt,name=ownership_proof,json=ownershipProof" json:"ownership_proof,omitempty"`                                                                       // SLIP-0019 proof of ownership, only set for EXTERNAL inputs
	CommitmentData     []byte                    `protobuf:"bytes,15,opt,name=commitment_data,json=commitmentData" json:"commitment_data,omitempty"`                                                                       // optional commitment data for the SLIP-0019 proof of ownership
	OrigHash           []byte                    `protobuf:"bytes,16,opt,name=orig_hash,json=origHash" json:"orig_hash,omitempty"`                                                                                         // tx_hash of the original transaction where this input was spent (used when creating a replacement transaction)
	OrigIndex          *uint32                   `protobuf:"varint,17,opt,name=orig_index,json=origIndex" json:"orig_index,omitempty"`                                                                                     // index of the input in the original transaction (used when creating a replacement transaction)
	DecredStakingSpend *DecredStakingSpendType   `protobuf:"varint,18,opt,name=decred_staking_spend,json=decredStakingSpend,enum=hw.trezor.messages.bitcoin.DecredStakingSpendType" json:"decred_staking_spend,omitempty"` // if not None this holds the type of stake spend: revocation or stake generation
	ScriptPubkey       []byte                    `protobuf:"bytes,19,opt,name=script_pubkey,json=scriptPubkey" json:"script_pubkey,omitempty"`                                                                             // scriptPubKey of the previous output spent by this input, only set of EXTERNAL inputs
	CoinjoinFlags      *uint32                   `protobuf:"varint,20,opt,name=coinjoin_flags,json=coinjoinFlags,def=0" json:"coinjoin_flags,omitempty"`                                                                   // bit field of CoinJoin-specific flags
}

// Default values for TxInput fields.
const (
	Default_TxInput_Sequence      = uint32(4294967295)
	Default_TxInput_ScriptType    = InputScriptType_SPENDADDRESS
	Default_TxInput_CoinjoinFlags = uint32(0)
)

func (x *TxInput) Reset() {
	*x = TxInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxInput) ProtoMessage() {}

func (x *TxInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxInput.ProtoReflect.Descriptor instead.
func (*TxInput) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{13}
}

func (x *TxInput) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *TxInput) GetPrevHash() []byte {
	if x != nil {
		return x.PrevHash
	}
	return nil
}

func (x *TxInput) GetPrevIndex() uint32 {
	if x != nil && x.PrevIndex != nil {
		return *x.PrevIndex
	}
	return 0
}

func (x *TxInput) GetScriptSig() []byte {
	if x != nil {
		return x.ScriptSig
	}
	return nil
}

func (x *TxInput) GetSequence() uint32 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return Default_TxInput_Sequence
}

func (x *TxInput) GetScriptType() InputScriptType {
	if x != nil && x.ScriptType != nil {
		return *x.ScriptType
	}
	return Default_TxInput_ScriptType
}

func (x *TxInput) GetMultisig() *MultisigRedeemScriptType {
	if x != nil {
		return x.Multisig
	}
	return nil
}

func (x *TxInput) GetAmount() uint64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *TxInput) GetDecredTree() uint32 {
	if x != nil && x.DecredTree != nil {
		return *x.DecredTree
	}
	return 0
}

func (x *TxInput) GetWitness() []byte {
	if x != nil {
		return x.Witness
	}
	return nil
}

func (x *TxInput) GetOwnershipProof() []byte {
	if x != nil {
		return x.OwnershipProof
	}
	return nil
}

func (x *TxInput) GetCommitmentData() []byte {
	if x != nil {
		return x.CommitmentData
	}
	return nil
}

func (x *TxInput) GetOrigHash() []byte {
	if x != nil {
		return x.OrigHash
	}
	return nil
}

func (x *TxInput) GetOrigIndex() uint32 {
	if x != nil && x.OrigIndex != nil {
		return *x.OrigIndex
	}
	return 0
}

func (x *TxInput) GetDecredStakingSpend() DecredStakingSpendType {
	if x != nil && x.DecredStakingSpend != nil {
		return *x.DecredStakingSpend
	}
	return DecredStakingSpendType_SSGen
}

func (x *TxInput) GetScriptPubkey() []byte {
	if x != nil {
		return x.ScriptPubkey
	}
	return nil
}

func (x *TxInput) GetCoinjoinFlags() uint32 {
	if x != nil && x.CoinjoinFlags != nil {
		return *x.CoinjoinFlags
	}
	return Default_TxInput_CoinjoinFlags
}

// * Data type for transaction output to be signed.
// @embed
type TxOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address         *string                   `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`                                                                                 // destination address in Base58 encoding; script_type must be PAYTOADDRESS
	AddressN        []uint32                  `protobuf:"varint,2,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                                                              // BIP-32 path to derive the destination (used for change addresses)
	Amount          *uint64                   `protobuf:"varint,3,req,name=amount" json:"amount,omitempty"`                                                                                  // amount to spend in satoshis
	ScriptType      *OutputScriptType         `protobuf:"varint,4,opt,name=script_type,json=scriptType,enum=hw.trezor.messages.bitcoin.OutputScriptType,def=0" json:"script_type,omitempty"` // output script type
	Multisig        *MultisigRedeemScriptType `protobuf:"bytes,5,opt,name=multisig" json:"multisig,omitempty"`                                                                               // defines multisig address; script_type must be PAYTOMULTISIG
	OpReturnData    []byte                    `protobuf:"bytes,6,opt,name=op_return_data,json=opReturnData" json:"op_return_data,omitempty"`                                                 // defines op_return data; script_type must be PAYTOOPRETURN, amount must be 0
	OrigHash        []byte                    `protobuf:"bytes,10,opt,name=orig_hash,json=origHash" json:"orig_hash,omitempty"`                                                              // tx_hash of the original transaction where this output was present (used when creating a replacement transaction)
	OrigIndex       *uint32                   `protobuf:"varint,11,opt,name=orig_index,json=origIndex" json:"orig_index,omitempty"`                                                          // index of the output in the original transaction (used when creating a replacement transaction)
	PaymentReqIndex *uint32                   `protobuf:"varint,12,opt,name=payment_req_index,json=paymentReqIndex" json:"payment_req_index,omitempty"`                                      // index of the PaymentRequest containing this output
}

// Default values for TxOutput fields.
const (
	Default_TxOutput_ScriptType = OutputScriptType_PAYTOADDRESS
)

func (x *TxOutput) Reset() {
	*x = TxOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOutput) ProtoMessage() {}

func (x *TxOutput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOutput.ProtoReflect.Descriptor instead.
func (*TxOutput) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{14}
}

func (x *TxOutput) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *TxOutput) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *TxOutput) GetAmount() uint64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *TxOutput) GetScriptType() OutputScriptType {
	if x != nil && x.ScriptType != nil {
		return *x.ScriptType
	}
	return Default_TxOutput_ScriptType
}

func (x *TxOutput) GetMultisig() *MultisigRedeemScriptType {
	if x != nil {
		return x.Multisig
	}
	return nil
}

func (x *TxOutput) GetOpReturnData() []byte {
	if x != nil {
		return x.OpReturnData
	}
	return nil
}

func (x *TxOutput) GetOrigHash() []byte {
	if x != nil {
		return x.OrigHash
	}
	return nil
}

func (x *TxOutput) GetOrigIndex() uint32 {
	if x != nil && x.OrigIndex != nil {
		return *x.OrigIndex
	}
	return 0
}

func (x *TxOutput) GetPaymentReqIndex() uint32 {
	if x != nil && x.PaymentReqIndex != nil {
		return *x.PaymentReqIndex
	}
	return 0
}

// * Data type for metadata about previous transaction which contains the UTXO being spent.
// @embed
type PrevTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        *uint32 `protobuf:"varint,1,req,name=version" json:"version,omitempty"`
	LockTime       *uint32 `protobuf:"varint,4,req,name=lock_time,json=lockTime" json:"lock_time,omitempty"`
	InputsCount    *uint32 `protobuf:"varint,6,req,name=inputs_count,json=inputsCount" json:"inputs_count,omitempty"`
	OutputsCount   *uint32 `protobuf:"varint,7,req,name=outputs_count,json=outputsCount" json:"outputs_count,omitempty"`
	ExtraDataLen   *uint32 `protobuf:"varint,9,opt,name=extra_data_len,json=extraDataLen,def=0" json:"extra_data_len,omitempty"`  // only for Dash, Zcash
	Expiry         *uint32 `protobuf:"varint,10,opt,name=expiry" json:"expiry,omitempty"`                                         // only for Decred and Zcash
	VersionGroupId *uint32 `protobuf:"varint,12,opt,name=version_group_id,json=versionGroupId" json:"version_group_id,omitempty"` // only for Zcash, nVersionGroupId
	Timestamp      *uint32 `protobuf:"varint,13,opt,name=timestamp" json:"timestamp,omitempty"`                                   // only for Peercoin
	BranchId       *uint32 `protobuf:"varint,14,opt,name=branch_id,json=branchId" json:"branch_id,omitempty"`                     // only for Zcash, BRANCH_ID
}

// Default values for PrevTx fields.
const (
	Default_PrevTx_ExtraDataLen = uint32(0)
)

func (x *PrevTx) Reset() {
	*x = PrevTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrevTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrevTx) ProtoMessage() {}

func (x *PrevTx) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrevTx.ProtoReflect.Descriptor instead.
func (*PrevTx) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{15}
}

func (x *PrevTx) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *PrevTx) GetLockTime() uint32 {
	if x != nil && x.LockTime != nil {
		return *x.LockTime
	}
	return 0
}

func (x *PrevTx) GetInputsCount() uint32 {
	if x != nil && x.InputsCount != nil {
		return *x.InputsCount
	}
	return 0
}

func (x *PrevTx) GetOutputsCount() uint32 {
	if x != nil && x.OutputsCount != nil {
		return *x.OutputsCount
	}
	return 0
}

func (x *PrevTx) GetExtraDataLen() uint32 {
	if x != nil && x.ExtraDataLen != nil {
		return *x.ExtraDataLen
	}
	return Default_PrevTx_ExtraDataLen
}

func (x *PrevTx) GetExpiry() uint32 {
	if x != nil && x.Expiry != nil {
		return *x.Expiry
	}
	return 0
}

func (x *PrevTx) GetVersionGroupId() uint32 {
	if x != nil && x.VersionGroupId != nil {
		return *x.VersionGroupId
	}
	return 0
}

func (x *PrevTx) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *PrevTx) GetBranchId() uint32 {
	if x != nil && x.BranchId != nil {
		return *x.BranchId
	}
	return 0
}

// * Data type for inputs of previous transactions.
//
// When adding fields, take care to not conflict with TxInput
// @embed
type PrevInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrevHash   []byte  `protobuf:"bytes,2,req,name=prev_hash,json=prevHash" json:"prev_hash,omitempty"`        // hash of previous transaction output to spend by this input
	PrevIndex  *uint32 `protobuf:"varint,3,req,name=prev_index,json=prevIndex" json:"prev_index,omitempty"`    // index of previous output to spend
	ScriptSig  []byte  `protobuf:"bytes,4,req,name=script_sig,json=scriptSig" json:"script_sig,omitempty"`     // script signature
	Sequence   *uint32 `protobuf:"varint,5,req,name=sequence" json:"sequence,omitempty"`                       // sequence
	DecredTree *uint32 `protobuf:"varint,9,opt,name=decred_tree,json=decredTree" json:"decred_tree,omitempty"` // only for Decred
}

func (x *PrevInput) Reset() {
	*x = PrevInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrevInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrevInput) ProtoMessage() {}

func (x *PrevInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrevInput.ProtoReflect.Descriptor instead.
func (*PrevInput) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{16}
}

func (x *PrevInput) GetPrevHash() []byte {
	if x != nil {
		return x.PrevHash
	}
	return nil
}

func (x *PrevInput) GetPrevIndex() uint32 {
	if x != nil && x.PrevIndex != nil {
		return *x.PrevIndex
	}
	return 0
}

func (x *PrevInput) GetScriptSig() []byte {
	if x != nil {
		return x.ScriptSig
	}
	return nil
}

func (x *PrevInput) GetSequence() uint32 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return 0
}

func (x *PrevInput) GetDecredTree() uint32 {
	if x != nil && x.DecredTree != nil {
		return *x.DecredTree
	}
	return 0
}

// * Data type for outputs of previous transactions.
// @embed
type PrevOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount              *uint64 `protobuf:"varint,1,req,name=amount" json:"amount,omitempty"`                                                        // amount sent to this output
	ScriptPubkey        []byte  `protobuf:"bytes,2,req,name=script_pubkey,json=scriptPubkey" json:"script_pubkey,omitempty"`                         // scriptPubkey of this output
	DecredScriptVersion *uint32 `protobuf:"varint,3,opt,name=decred_script_version,json=decredScriptVersion" json:"decred_script_version,omitempty"` // only for Decred
}

func (x *PrevOutput) Reset() {
	*x = PrevOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrevOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrevOutput) ProtoMessage() {}

func (x *PrevOutput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrevOutput.ProtoReflect.Descriptor instead.
func (*PrevOutput) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{17}
}

func (x *PrevOutput) GetAmount() uint64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *PrevOutput) GetScriptPubkey() []byte {
	if x != nil {
		return x.ScriptPubkey
	}
	return nil
}

func (x *PrevOutput) GetDecredScriptVersion() uint32 {
	if x != nil && x.DecredScriptVersion != nil {
		return *x.DecredScriptVersion
	}
	return 0
}

// * Data type of a payment request for a set of outputs.
// @next TxRequest
type TxAckPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce         []byte                                    `protobuf:"bytes,1,opt,name=nonce" json:"nonce,omitempty"`                                      // the nonce used in the signature computation
	RecipientName *string                                   `protobuf:"bytes,2,req,name=recipient_name,json=recipientName" json:"recipient_name,omitempty"` // merchant's name
	Memos         []*TxAckPaymentRequest_PaymentRequestMemo `protobuf:"bytes,3,rep,name=memos" json:"memos,omitempty"`                                      // any memos that were signed as part of the request
	Amount        *uint64                                   `protobuf:"varint,4,opt,name=amount" json:"amount,omitempty"`                                   // the sum of the external output amounts requested, required for non-CoinJoin
	Signature     []byte                                    `protobuf:"bytes,5,req,name=signature" json:"signature,omitempty"`                              // the trusted party's signature of the paymentRequestDigest
}

func (x *TxAckPaymentRequest) Reset() {
	*x = TxAckPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxAckPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxAckPaymentRequest) ProtoMessage() {}

func (x *TxAckPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxAckPaymentRequest.ProtoReflect.Descriptor instead.
func (*TxAckPaymentRequest) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{18}
}

func (x *TxAckPaymentRequest) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *TxAckPaymentRequest) GetRecipientName() string {
	if x != nil && x.RecipientName != nil {
		return *x.RecipientName
	}
	return ""
}

func (x *TxAckPaymentRequest) GetMemos() []*TxAckPaymentRequest_PaymentRequestMemo {
	if x != nil {
		return x.Memos
	}
	return nil
}

func (x *TxAckPaymentRequest) GetAmount() uint64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *TxAckPaymentRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// *
// Request: Data about input to be signed.
// Wire-alias of TxAck.
//
// Do not edit this type without considering compatibility with TxAck.
// Prefer to modify the inner TxInput type.
//
// @next TxRequest
type TxAckInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx *TxAckInput_TxAckInputWrapper `protobuf:"bytes,1,req,name=tx" json:"tx,omitempty"`
}

func (x *TxAckInput) Reset() {
	*x = TxAckInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxAckInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxAckInput) ProtoMessage() {}

func (x *TxAckInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxAckInput.ProtoReflect.Descriptor instead.
func (*TxAckInput) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{19}
}

func (x *TxAckInput) GetTx() *TxAckInput_TxAckInputWrapper {
	if x != nil {
		return x.Tx
	}
	return nil
}

// *
// Request: Data about output to be signed.
// Wire-alias of TxAck.
//
// Do not edit this type without considering compatibility with TxAck.
// Prefer to modify the inner TxOutput type.
//
// @next TxRequest
type TxAckOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx *TxAckOutput_TxAckOutputWrapper `protobuf:"bytes,1,req,name=tx" json:"tx,omitempty"`
}

func (x *TxAckOutput) Reset() {
	*x = TxAckOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxAckOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxAckOutput) ProtoMessage() {}

func (x *TxAckOutput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxAckOutput.ProtoReflect.Descriptor instead.
func (*TxAckOutput) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{20}
}

func (x *TxAckOutput) GetTx() *TxAckOutput_TxAckOutputWrapper {
	if x != nil {
		return x.Tx
	}
	return nil
}

// *
// Request: Data about previous transaction metadata
// Wire-alias of TxAck.
//
// Do not edit this type without considering compatibility with TxAck.
// Prefer to modify the inner PrevTx type.
//
// @next TxRequest
type TxAckPrevMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx *PrevTx `protobuf:"bytes,1,req,name=tx" json:"tx,omitempty"`
}

func (x *TxAckPrevMeta) Reset() {
	*x = TxAckPrevMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxAckPrevMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxAckPrevMeta) ProtoMessage() {}

func (x *TxAckPrevMeta) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxAckPrevMeta.ProtoReflect.Descriptor instead.
func (*TxAckPrevMeta) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{21}
}

func (x *TxAckPrevMeta) GetTx() *PrevTx {
	if x != nil {
		return x.Tx
	}
	return nil
}

// *
// Request: Data about previous transaction input
// Wire-alias of TxAck.
//
// Do not edit this type without considering compatibility with TxAck.
// Prefer to modify the inner PrevInput type.
//
// @next TxRequest
type TxAckPrevInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx *TxAckPrevInput_TxAckPrevInputWrapper `protobuf:"bytes,1,req,name=tx" json:"tx,omitempty"`
}

func (x *TxAckPrevInput) Reset() {
	*x = TxAckPrevInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxAckPrevInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxAckPrevInput) ProtoMessage() {}

func (x *TxAckPrevInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxAckPrevInput.ProtoReflect.Descriptor instead.
func (*TxAckPrevInput) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{22}
}

func (x *TxAckPrevInput) GetTx() *TxAckPrevInput_TxAckPrevInputWrapper {
	if x != nil {
		return x.Tx
	}
	return nil
}

// *
// Request: Data about previous transaction output
// Wire-alias of TxAck.
//
// Do not edit this type without considering compatibility with TxAck.
// Prefer to modify the inner PrevOutput type.
//
// @next TxRequest
type TxAckPrevOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx *TxAckPrevOutput_TxAckPrevOutputWrapper `protobuf:"bytes,1,req,name=tx" json:"tx,omitempty"`
}

func (x *TxAckPrevOutput) Reset() {
	*x = TxAckPrevOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxAckPrevOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxAckPrevOutput) ProtoMessage() {}

func (x *TxAckPrevOutput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxAckPrevOutput.ProtoReflect.Descriptor instead.
func (*TxAckPrevOutput) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{23}
}

func (x *TxAckPrevOutput) GetTx() *TxAckPrevOutput_TxAckPrevOutputWrapper {
	if x != nil {
		return x.Tx
	}
	return nil
}

// *
// Request: Content of the extra data of a previous transaction
// Wire-alias of TxAck.
//
// Do not edit this type without considering compatibility with TxAck.
//
// @next TxRequest
type TxAckPrevExtraData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx *TxAckPrevExtraData_TxAckPrevExtraDataWrapper `protobuf:"bytes,1,req,name=tx" json:"tx,omitempty"`
}

func (x *TxAckPrevExtraData) Reset() {
	*x = TxAckPrevExtraData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxAckPrevExtraData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxAckPrevExtraData) ProtoMessage() {}

func (x *TxAckPrevExtraData) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxAckPrevExtraData.ProtoReflect.Descriptor instead.
func (*TxAckPrevExtraData) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{24}
}

func (x *TxAckPrevExtraData) GetTx() *TxAckPrevExtraData_TxAckPrevExtraDataWrapper {
	if x != nil {
		return x.Tx
	}
	return nil
}

// *
// Request: Ask device for a proof of ownership corresponding to address_n path
// @start
// @next OwnershipProof
// @next Failure
type GetOwnershipProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressN         []uint32                  `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                                                             // BIP-32 path to derive the key from master node
	CoinName         *string                   `protobuf:"bytes,2,opt,name=coin_name,json=coinName,def=Bitcoin" json:"coin_name,omitempty"`                                                  // coin to use
	ScriptType       *InputScriptType          `protobuf:"varint,3,opt,name=script_type,json=scriptType,enum=hw.trezor.messages.bitcoin.InputScriptType,def=3" json:"script_type,omitempty"` // used to distinguish between various scriptPubKey types
	Multisig         *MultisigRedeemScriptType `protobuf:"bytes,4,opt,name=multisig" json:"multisig,omitempty"`                                                                              // filled if proof is for a multisig address
	UserConfirmation *bool                     `protobuf:"varint,5,opt,name=user_confirmation,json=userConfirmation,def=0" json:"user_confirmation,omitempty"`                               // show a confirmation dialog and set the "user confirmation" bit in the proof
	OwnershipIds     [][]byte                  `protobuf:"bytes,6,rep,name=ownership_ids,json=ownershipIds" json:"ownership_ids,omitempty"`                                                  // list of ownership identifiers in case of multisig
	CommitmentData   []byte                    `protobuf:"bytes,7,opt,name=commitment_data,json=commitmentData,def=" json:"commitment_data,omitempty"`                                       // additional data to which the proof should commit
}

// Default values for GetOwnershipProof fields.
const (
	Default_GetOwnershipProof_CoinName         = string("Bitcoin")
	Default_GetOwnershipProof_ScriptType       = InputScriptType_SPENDWITNESS
	Default_GetOwnershipProof_UserConfirmation = bool(false)
)

// Default values for GetOwnershipProof fields.
var (
	Default_GetOwnershipProof_CommitmentData = []byte("")
)

func (x *GetOwnershipProof) Reset() {
	*x = GetOwnershipProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOwnershipProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOwnershipProof) ProtoMessage() {}

func (x *GetOwnershipProof) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOwnershipProof.ProtoReflect.Descriptor instead.
func (*GetOwnershipProof) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{25}
}

func (x *GetOwnershipProof) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *GetOwnershipProof) GetCoinName() string {
	if x != nil && x.CoinName != nil {
		return *x.CoinName
	}
	return Default_GetOwnershipProof_CoinName
}

func (x *GetOwnershipProof) GetScriptType() InputScriptType {
	if x != nil && x.ScriptType != nil {
		return *x.ScriptType
	}
	return Default_GetOwnershipProof_ScriptType
}

func (x *GetOwnershipProof) GetMultisig() *MultisigRedeemScriptType {
	if x != nil {
		return x.Multisig
	}
	return nil
}

func (x *GetOwnershipProof) GetUserConfirmation() bool {
	if x != nil && x.UserConfirmation != nil {
		return *x.UserConfirmation
	}
	return Default_GetOwnershipProof_UserConfirmation
}

func (x *GetOwnershipProof) GetOwnershipIds() [][]byte {
	if x != nil {
		return x.OwnershipIds
	}
	return nil
}

func (x *GetOwnershipProof) GetCommitmentData() []byte {
	if x != nil && x.CommitmentData != nil {
		return x.CommitmentData
	}
	return append([]byte(nil), Default_GetOwnershipProof_CommitmentData...)
}

// *
// Response: Contains the proof of ownership
// @end
type OwnershipProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnershipProof []byte `protobuf:"bytes,1,req,name=ownership_proof,json=ownershipProof" json:"ownership_proof,omitempty"` // SLIP-0019 proof of ownership
	Signature      []byte `protobuf:"bytes,2,req,name=signature" json:"signature,omitempty"`                                 // signature of the proof
}

func (x *OwnershipProof) Reset() {
	*x = OwnershipProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OwnershipProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnershipProof) ProtoMessage() {}

func (x *OwnershipProof) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnershipProof.ProtoReflect.Descriptor instead.
func (*OwnershipProof) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{26}
}

func (x *OwnershipProof) GetOwnershipProof() []byte {
	if x != nil {
		return x.OwnershipProof
	}
	return nil
}

func (x *OwnershipProof) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// *
// Request: Ask device to prompt the user to authorize a CoinJoin transaction
// @start
// @next Success
// @next Failure
type AuthorizeCoinJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coordinator           *string          `protobuf:"bytes,1,req,name=coordinator" json:"coordinator,omitempty"`                                                                        // coordinator identifier to approve as a prefix in commitment data (max. 36 ASCII characters)
	MaxRounds             *uint64          `protobuf:"varint,2,req,name=max_rounds,json=maxRounds" json:"max_rounds,omitempty"`                                                          // maximum number of rounds that Trezor is authorized to take part in
	MaxCoordinatorFeeRate *uint32          `protobuf:"varint,3,req,name=max_coordinator_fee_rate,json=maxCoordinatorFeeRate" json:"max_coordinator_fee_rate,omitempty"`                  // maximum coordination fee rate in units of 10^-6 percent
	MaxFeePerKvbyte       *uint32          `protobuf:"varint,4,req,name=max_fee_per_kvbyte,json=maxFeePerKvbyte" json:"max_fee_per_kvbyte,omitempty"`                                    // maximum mining fee rate in units of satoshis per 1000 vbytes
	AddressN              []uint32         `protobuf:"varint,5,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                                                             // prefix of the BIP-32 path leading to the account (m / purpose' / coin_type' / account')
	CoinName              *string          `protobuf:"bytes,6,opt,name=coin_name,json=coinName,def=Bitcoin" json:"coin_name,omitempty"`                                                  // coin to use
	ScriptType            *InputScriptType `protobuf:"varint,7,opt,name=script_type,json=scriptType,enum=hw.trezor.messages.bitcoin.InputScriptType,def=0" json:"script_type,omitempty"` // used to distinguish between various address formats (non-segwit, segwit, etc.)
	AmountUnit            *AmountUnit      `protobuf:"varint,8,opt,name=amount_unit,json=amountUnit,enum=hw.trezor.messages.bitcoin.AmountUnit,def=0" json:"amount_unit,omitempty"`      // show amounts in
}

// Default values for AuthorizeCoinJoin fields.
const (
	Default_AuthorizeCoinJoin_CoinName   = string("Bitcoin")
	Default_AuthorizeCoinJoin_ScriptType = InputScriptType_SPENDADDRESS
	Default_AuthorizeCoinJoin_AmountUnit = AmountUnit_BITCOIN
)

func (x *AuthorizeCoinJoin) Reset() {
	*x = AuthorizeCoinJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeCoinJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeCoinJoin) ProtoMessage() {}

func (x *AuthorizeCoinJoin) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeCoinJoin.ProtoReflect.Descriptor instead.
func (*AuthorizeCoinJoin) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{27}
}

func (x *AuthorizeCoinJoin) GetCoordinator() string {
	if x != nil && x.Coordinator != nil {
		return *x.Coordinator
	}
	return ""
}

func (x *AuthorizeCoinJoin) GetMaxRounds() uint64 {
	if x != nil && x.MaxRounds != nil {
		return *x.MaxRounds
	}
	return 0
}

func (x *AuthorizeCoinJoin) GetMaxCoordinatorFeeRate() uint32 {
	if x != nil && x.MaxCoordinatorFeeRate != nil {
		return *x.MaxCoordinatorFeeRate
	}
	return 0
}

func (x *AuthorizeCoinJoin) GetMaxFeePerKvbyte() uint32 {
	if x != nil && x.MaxFeePerKvbyte != nil {
		return *x.MaxFeePerKvbyte
	}
	return 0
}

func (x *AuthorizeCoinJoin) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *AuthorizeCoinJoin) GetCoinName() string {
	if x != nil && x.CoinName != nil {
		return *x.CoinName
	}
	return Default_AuthorizeCoinJoin_CoinName
}

func (x *AuthorizeCoinJoin) GetScriptType() InputScriptType {
	if x != nil && x.ScriptType != nil {
		return *x.ScriptType
	}
	return Default_AuthorizeCoinJoin_ScriptType
}

func (x *AuthorizeCoinJoin) GetAmountUnit() AmountUnit {
	if x != nil && x.AmountUnit != nil {
		return *x.AmountUnit
	}
	return Default_AuthorizeCoinJoin_AmountUnit
}

// *
// Structure representing HDNode + Path
type MultisigRedeemScriptType_HDNodePathType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node     *HDNodeType `protobuf:"bytes,1,req,name=node" json:"node,omitempty"`                          // BIP-32 node in deserialized form
	AddressN []uint32    `protobuf:"varint,2,rep,name=address_n,json=addressN" json:"address_n,omitempty"` // BIP-32 path to derive the key from node
}

func (x *MultisigRedeemScriptType_HDNodePathType) Reset() {
	*x = MultisigRedeemScriptType_HDNodePathType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultisigRedeemScriptType_HDNodePathType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultisigRedeemScriptType_HDNodePathType) ProtoMessage() {}

func (x *MultisigRedeemScriptType_HDNodePathType) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultisigRedeemScriptType_HDNodePathType.ProtoReflect.Descriptor instead.
func (*MultisigRedeemScriptType_HDNodePathType) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MultisigRedeemScriptType_HDNodePathType) GetNode() *HDNodeType {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *MultisigRedeemScriptType_HDNodePathType) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

// *
// Signing request for a CoinJoin transaction.
type SignTx_CoinJoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeeRate              *uint32 `protobuf:"varint,1,req,name=fee_rate,json=feeRate" json:"fee_rate,omitempty"`                                          // coordination fee rate in units of 10^-6 percent
	NoFeeThreshold       *uint64 `protobuf:"varint,2,req,name=no_fee_threshold,json=noFeeThreshold" json:"no_fee_threshold,omitempty"`                   // PlebsDontPayThreshold in Wasabi, the input amount above which the fee rate applies
	MinRegistrableAmount *uint64 `protobuf:"varint,3,req,name=min_registrable_amount,json=minRegistrableAmount" json:"min_registrable_amount,omitempty"` // minimum registrable output amount
	MaskPublicKey        []byte  `protobuf:"bytes,4,req,name=mask_public_key,json=maskPublicKey" json:"mask_public_key,omitempty"`                       // ephemeral secp256k1 public key used for masking coinjoin_flags, 33 bytes in compressed form
	Signature            []byte  `protobuf:"bytes,5,req,name=signature" json:"signature,omitempty"`                                                      // the trusted party's signature of the CoinJoin request digest
}

func (x *SignTx_CoinJoinRequest) Reset() {
	*x = SignTx_CoinJoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignTx_CoinJoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignTx_CoinJoinRequest) ProtoMessage() {}

func (x *SignTx_CoinJoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignTx_CoinJoinRequest.ProtoReflect.Descriptor instead.
func (*SignTx_CoinJoinRequest) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{10, 0}
}

func (x *SignTx_CoinJoinRequest) GetFeeRate() uint32 {
	if x != nil && x.FeeRate != nil {
		return *x.FeeRate
	}
	return 0
}

func (x *SignTx_CoinJoinRequest) GetNoFeeThreshold() uint64 {
	if x != nil && x.NoFeeThreshold != nil {
		return *x.NoFeeThreshold
	}
	return 0
}

func (x *SignTx_CoinJoinRequest) GetMinRegistrableAmount() uint64 {
	if x != nil && x.MinRegistrableAmount != nil {
		return *x.MinRegistrableAmount
	}
	return 0
}

func (x *SignTx_CoinJoinRequest) GetMaskPublicKey() []byte {
	if x != nil {
		return x.MaskPublicKey
	}
	return nil
}

func (x *SignTx_CoinJoinRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// *
// Structure representing request details
type TxRequest_TxRequestDetailsType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestIndex    *uint32 `protobuf:"varint,1,opt,name=request_index,json=requestIndex" json:"request_index,omitempty"`            // device expects TxAck message from the computer
	TxHash          []byte  `protobuf:"bytes,2,opt,name=tx_hash,json=txHash" json:"tx_hash,omitempty"`                               // tx_hash of requested transaction
	ExtraDataLen    *uint32 `protobuf:"varint,3,opt,name=extra_data_len,json=extraDataLen" json:"extra_data_len,omitempty"`          // length of requested extra data (only for Dash, Zcash)
	ExtraDataOffset *uint32 `protobuf:"varint,4,opt,name=extra_data_offset,json=extraDataOffset" json:"extra_data_offset,omitempty"` // offset of requested extra data (only for Dash, Zcash)
}

func (x *TxRequest_TxRequestDetailsType) Reset() {
	*x = TxRequest_TxRequestDetailsType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxRequest_TxRequestDetailsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxRequest_TxRequestDetailsType) ProtoMessage() {}

func (x *TxRequest_TxRequestDetailsType) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxRequest_TxRequestDetailsType.ProtoReflect.Descriptor instead.
func (*TxRequest_TxRequestDetailsType) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{11, 0}
}

func (x *TxRequest_TxRequestDetailsType) GetRequestIndex() uint32 {
	if x != nil && x.RequestIndex != nil {
		return *x.RequestIndex
	}
	return 0
}

func (x *TxRequest_TxRequestDetailsType) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *TxRequest_TxRequestDetailsType) GetExtraDataLen() uint32 {
	if x != nil && x.ExtraDataLen != nil {
		return *x.ExtraDataLen
	}
	return 0
}

func (x *TxRequest_TxRequestDetailsType) GetExtraDataOffset() uint32 {
	if x != nil && x.ExtraDataOffset != nil {
		return *x.ExtraDataOffset
	}
	return 0
}

// *
// Structure representing serialized data
type TxRequest_TxRequestSerializedType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignatureIndex *uint32 `protobuf:"varint,1,opt,name=signature_index,json=signatureIndex" json:"signature_index,omitempty"` // 'signature' field contains signed input of this index
	Signature      []byte  `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`                                  // signature of the signature_index input
	SerializedTx   []byte  `protobuf:"bytes,3,opt,name=serialized_tx,json=serializedTx" json:"serialized_tx,omitempty"`        // part of serialized and signed transaction
}

func (x *TxRequest_TxRequestSerializedType) Reset() {
	*x = TxRequest_TxRequestSerializedType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxRequest_TxRequestSerializedType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxRequest_TxRequestSerializedType) ProtoMessage() {}

func (x *TxRequest_TxRequestSerializedType) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxRequest_TxRequestSerializedType.ProtoReflect.Descriptor instead.
func (*TxRequest_TxRequestSerializedType) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{11, 1}
}

func (x *TxRequest_TxRequestSerializedType) GetSignatureIndex() uint32 {
	if x != nil && x.SignatureIndex != nil {
		return *x.SignatureIndex
	}
	return 0
}

func (x *TxRequest_TxRequestSerializedType) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *TxRequest_TxRequestSerializedType) GetSerializedTx() []byte {
	if x != nil {
		return x.SerializedTx
	}
	return nil
}

// *
// Structure representing transaction
type TxAck_TransactionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version      *uint32                                  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Inputs       []*TxAck_TransactionType_TxInputType     `protobuf:"bytes,2,rep,name=inputs" json:"inputs,omitempty"`
	BinOutputs   []*TxAck_TransactionType_TxOutputBinType `protobuf:"bytes,3,rep,name=bin_outputs,json=binOutputs" json:"bin_outputs,omitempty"`
	LockTime     *uint32                                  `protobuf:"varint,4,opt,name=lock_time,json=lockTime" json:"lock_time,omitempty"`
	Outputs      []*TxAck_TransactionType_TxOutputType    `protobuf:"bytes,5,rep,name=outputs" json:"outputs,omitempty"`
	InputsCnt    *uint32                                  `protobuf:"varint,6,opt,name=inputs_cnt,json=inputsCnt" json:"inputs_cnt,omitempty"`
	OutputsCnt   *uint32                                  `protobuf:"varint,7,opt,name=outputs_cnt,json=outputsCnt" json:"outputs_cnt,omitempty"`
	ExtraData    []byte                                   `protobuf:"bytes,8,opt,name=extra_data,json=extraData" json:"extra_data,omitempty"`             // only for Dash, Zcash
	ExtraDataLen *uint32                                  `protobuf:"varint,9,opt,name=extra_data_len,json=extraDataLen" json:"extra_data_len,omitempty"` // only for Dash, Zcash
	Expiry       *uint32                                  `protobuf:"varint,10,opt,name=expiry" json:"expiry,omitempty"`                                  // only for Decred and Zcash
	// Deprecated: Do not use.
	Overwintered   *bool   `protobuf:"varint,11,opt,name=overwintered" json:"overwintered,omitempty"`                             // Zcash only; deprecated in 2.3.2, the field is not needed, it can be derived from `version`
	VersionGroupId *uint32 `protobuf:"varint,12,opt,name=version_group_id,json=versionGroupId" json:"version_group_id,omitempty"` // only for Zcash, nVersionGroupId
	Timestamp      *uint32 `protobuf:"varint,13,opt,name=timestamp" json:"timestamp,omitempty"`                                   // only for Peercoin
	BranchId       *uint32 `protobuf:"varint,14,opt,name=branch_id,json=branchId" json:"branch_id,omitempty"`                     // only for Zcash, BRANCH_ID
}

func (x *TxAck_TransactionType) Reset() {
	*x = TxAck_TransactionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxAck_TransactionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxAck_TransactionType) ProtoMessage() {}

func (x *TxAck_TransactionType) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxAck_TransactionType.ProtoReflect.Descriptor instead.
func (*TxAck_TransactionType) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{12, 0}
}

func (x *TxAck_TransactionType) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *TxAck_TransactionType) GetInputs() []*TxAck_TransactionType_TxInputType {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TxAck_TransactionType) GetBinOutputs() []*TxAck_TransactionType_TxOutputBinType {
	if x != nil {
		return x.BinOutputs
	}
	return nil
}

func (x *TxAck_TransactionType) GetLockTime() uint32 {
	if x != nil && x.LockTime != nil {
		return *x.LockTime
	}
	return 0
}

func (x *TxAck_TransactionType) GetOutputs() []*TxAck_TransactionType_TxOutputType {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TxAck_TransactionType) GetInputsCnt() uint32 {
	if x != nil && x.InputsCnt != nil {
		return *x.InputsCnt
	}
	return 0
}

func (x *TxAck_TransactionType) GetOutputsCnt() uint32 {
	if x != nil && x.OutputsCnt != nil {
		return *x.OutputsCnt
	}
	return 0
}

func (x *TxAck_TransactionType) GetExtraData() []byte {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

func (x *TxAck_TransactionType) GetExtraDataLen() uint32 {
	if x != nil && x.ExtraDataLen != nil {
		return *x.ExtraDataLen
	}
	return 0
}

func (x *TxAck_TransactionType) GetExpiry() uint32 {
	if x != nil && x.Expiry != nil {
		return *x.Expiry
	}
	return 0
}

// Deprecated: Do not use.
func (x *TxAck_TransactionType) GetOverwintered() bool {
	if x != nil && x.Overwintered != nil {
		return *x.Overwintered
	}
	return false
}

func (x *TxAck_TransactionType) GetVersionGroupId() uint32 {
	if x != nil && x.VersionGroupId != nil {
		return *x.VersionGroupId
	}
	return 0
}

func (x *TxAck_TransactionType) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *TxAck_TransactionType) GetBranchId() uint32 {
	if x != nil && x.BranchId != nil {
		return *x.BranchId
	}
	return 0
}

// *
// Structure representing transaction input
type TxAck_TransactionType_TxInputType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressN   []uint32                  `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                                                             // BIP-32 path to derive the key from master node
	PrevHash   []byte                    `protobuf:"bytes,2,req,name=prev_hash,json=prevHash" json:"prev_hash,omitempty"`                                                              // hash of previous transaction output to spend by this input
	PrevIndex  *uint32                   `protobuf:"varint,3,req,name=prev_index,json=prevIndex" json:"prev_index,omitempty"`                                                          // index of previous output to spend
	ScriptSig  []byte                    `protobuf:"bytes,4,opt,name=script_sig,json=scriptSig" json:"script_sig,omitempty"`                                                           // script signature, unset for tx to sign
	Sequence   *uint32                   `protobuf:"varint,5,opt,name=sequence,def=4294967295" json:"sequence,omitempty"`                                                              // sequence (default=0xffffffff)
	ScriptType *InputScriptType          `protobuf:"varint,6,opt,name=script_type,json=scriptType,enum=hw.trezor.messages.bitcoin.InputScriptType,def=0" json:"script_type,omitempty"` // defines template of input script
	Multisig   *MultisigRedeemScriptType `protobuf:"bytes,7,opt,name=multisig" json:"multisig,omitempty"`                                                                              // Filled if input is going to spend multisig tx
	Amount     *uint64                   `protobuf:"varint,8,opt,name=amount" json:"amount,omitempty"`                                                                                 // amount of previous transaction output (for segwit only)
	DecredTree *uint32                   `protobuf:"varint,9,opt,name=decred_tree,json=decredTree" json:"decred_tree,omitempty"`                                                       // only for Decred, 0 is a normal transaction while 1 is a stake transaction
	// optional uint32 decred_script_version = 10;                         // only for Decred  // deprecated -> only 0 is supported
	// optional bytes prev_block_hash_bip115 = 11;     // BIP-115 support dropped
	// optional uint32 prev_block_height_bip115 = 12;  // BIP-115 support dropped
	Witness            []byte                  `protobuf:"bytes,13,opt,name=witness" json:"witness,omitempty"`                                                                                                           // witness data, only set for EXTERNAL inputs
	OwnershipProof     []byte                  `protobuf:"bytes,14,opt,name=ownership_proof,json=ownershipProof" json:"ownership_proof,omitempty"`                                                                       // SLIP-0019 proof of ownership, only set for EXTERNAL inputs
	CommitmentData     []byte                  `protobuf:"bytes,15,opt,name=commitment_data,json=commitmentData" json:"commitment_data,omitempty"`                                                                       // optional commitment data for the SLIP-0019 proof of ownership
	OrigHash           []byte                  `protobuf:"bytes,16,opt,name=orig_hash,json=origHash" json:"orig_hash,omitempty"`                                                                                         // tx_hash of the original transaction where this input was spent (used when creating a replacement transaction)
	OrigIndex          *uint32                 `protobuf:"varint,17,opt,name=orig_index,json=origIndex" json:"orig_index,omitempty"`                                                                                     // index of the input in the original transaction (used when creating a replacement transaction)
	DecredStakingSpend *DecredStakingSpendType `protobuf:"varint,18,opt,name=decred_staking_spend,json=decredStakingSpend,enum=hw.trezor.messages.bitcoin.DecredStakingSpendType" json:"decred_staking_spend,omitempty"` // if not None this holds the type of stake spend: revocation or stake generation
	ScriptPubkey       []byte                  `protobuf:"bytes,19,opt,name=script_pubkey,json=scriptPubkey" json:"script_pubkey,omitempty"`                                                                             // scriptPubKey of the previous output spent by this input, only set of EXTERNAL inputs
	CoinjoinFlags      *uint32                 `protobuf:"varint,20,opt,name=coinjoin_flags,json=coinjoinFlags,def=0" json:"coinjoin_flags,omitempty"`                                                                   // bit field of CoinJoin-specific flags
}

// Default values for TxAck_TransactionType_TxInputType fields.
const (
	Default_TxAck_TransactionType_TxInputType_Sequence      = uint32(4294967295)
	Default_TxAck_TransactionType_TxInputType_ScriptType    = InputScriptType_SPENDADDRESS
	Default_TxAck_TransactionType_TxInputType_CoinjoinFlags = uint32(0)
)

func (x *TxAck_TransactionType_TxInputType) Reset() {
	*x = TxAck_TransactionType_TxInputType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxAck_TransactionType_TxInputType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxAck_TransactionType_TxInputType) ProtoMessage() {}

func (x *TxAck_TransactionType_TxInputType) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxAck_TransactionType_TxInputType.ProtoReflect.Descriptor instead.
func (*TxAck_TransactionType_TxInputType) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{12, 0, 0}
}

func (x *TxAck_TransactionType_TxInputType) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *TxAck_TransactionType_TxInputType) GetPrevHash() []byte {
	if x != nil {
		return x.PrevHash
	}
	return nil
}

func (x *TxAck_TransactionType_TxInputType) GetPrevIndex() uint32 {
	if x != nil && x.PrevIndex != nil {
		return *x.PrevIndex
	}
	return 0
}

func (x *TxAck_TransactionType_TxInputType) GetScriptSig() []byte {
	if x != nil {
		return x.ScriptSig
	}
	return nil
}

func (x *TxAck_TransactionType_TxInputType) GetSequence() uint32 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return Default_TxAck_TransactionType_TxInputType_Sequence
}

func (x *TxAck_TransactionType_TxInputType) GetScriptType() InputScriptType {
	if x != nil && x.ScriptType != nil {
		return *x.ScriptType
	}
	return Default_TxAck_TransactionType_TxInputType_ScriptType
}

func (x *TxAck_TransactionType_TxInputType) GetMultisig() *MultisigRedeemScriptType {
	if x != nil {
		return x.Multisig
	}
	return nil
}

func (x *TxAck_TransactionType_TxInputType) GetAmount() uint64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *TxAck_TransactionType_TxInputType) GetDecredTree() uint32 {
	if x != nil && x.DecredTree != nil {
		return *x.DecredTree
	}
	return 0
}

func (x *TxAck_TransactionType_TxInputType) GetWitness() []byte {
	if x != nil {
		return x.Witness
	}
	return nil
}

func (x *TxAck_TransactionType_TxInputType) GetOwnershipProof() []byte {
	if x != nil {
		return x.OwnershipProof
	}
	return nil
}

func (x *TxAck_TransactionType_TxInputType) GetCommitmentData() []byte {
	if x != nil {
		return x.CommitmentData
	}
	return nil
}

func (x *TxAck_TransactionType_TxInputType) GetOrigHash() []byte {
	if x != nil {
		return x.OrigHash
	}
	return nil
}

func (x *TxAck_TransactionType_TxInputType) GetOrigIndex() uint32 {
	if x != nil && x.OrigIndex != nil {
		return *x.OrigIndex
	}
	return 0
}

func (x *TxAck_TransactionType_TxInputType) GetDecredStakingSpend() DecredStakingSpendType {
	if x != nil && x.DecredStakingSpend != nil {
		return *x.DecredStakingSpend
	}
	return DecredStakingSpendType_SSGen
}

func (x *TxAck_TransactionType_TxInputType) GetScriptPubkey() []byte {
	if x != nil {
		return x.ScriptPubkey
	}
	return nil
}

func (x *TxAck_TransactionType_TxInputType) GetCoinjoinFlags() uint32 {
	if x != nil && x.CoinjoinFlags != nil {
		return *x.CoinjoinFlags
	}
	return Default_TxAck_TransactionType_TxInputType_CoinjoinFlags
}

// *
// Structure representing compiled transaction output
type TxAck_TransactionType_TxOutputBinType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount              *uint64 `protobuf:"varint,1,req,name=amount" json:"amount,omitempty"`
	ScriptPubkey        []byte  `protobuf:"bytes,2,req,name=script_pubkey,json=scriptPubkey" json:"script_pubkey,omitempty"`
	DecredScriptVersion *uint32 `protobuf:"varint,3,opt,name=decred_script_version,json=decredScriptVersion" json:"decred_script_version,omitempty"` // only for Decred, currently only 0 is supported
}

func (x *TxAck_TransactionType_TxOutputBinType) Reset() {
	*x = TxAck_TransactionType_TxOutputBinType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxAck_TransactionType_TxOutputBinType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxAck_TransactionType_TxOutputBinType) ProtoMessage() {}

func (x *TxAck_TransactionType_TxOutputBinType) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxAck_TransactionType_TxOutputBinType.ProtoReflect.Descriptor instead.
func (*TxAck_TransactionType_TxOutputBinType) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{12, 0, 1}
}

func (x *TxAck_TransactionType_TxOutputBinType) GetAmount() uint64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *TxAck_TransactionType_TxOutputBinType) GetScriptPubkey() []byte {
	if x != nil {
		return x.ScriptPubkey
	}
	return nil
}

func (x *TxAck_TransactionType_TxOutputBinType) GetDecredScriptVersion() uint32 {
	if x != nil && x.DecredScriptVersion != nil {
		return *x.DecredScriptVersion
	}
	return 0
}

// *
// Structure representing transaction output
type TxAck_TransactionType_TxOutputType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address      *string                   `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`                                                                                 // target coin address in Base58 encoding
	AddressN     []uint32                  `protobuf:"varint,2,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                                                              // BIP-32 path to derive the key from master node; has higher priority than "address"
	Amount       *uint64                   `protobuf:"varint,3,req,name=amount" json:"amount,omitempty"`                                                                                  // amount to spend in satoshis
	ScriptType   *OutputScriptType         `protobuf:"varint,4,opt,name=script_type,json=scriptType,enum=hw.trezor.messages.bitcoin.OutputScriptType,def=0" json:"script_type,omitempty"` // output script type
	Multisig     *MultisigRedeemScriptType `protobuf:"bytes,5,opt,name=multisig" json:"multisig,omitempty"`                                                                               // defines multisig address; script_type must be PAYTOMULTISIG
	OpReturnData []byte                    `protobuf:"bytes,6,opt,name=op_return_data,json=opReturnData" json:"op_return_data,omitempty"`                                                 // defines op_return data; script_type must be PAYTOOPRETURN, amount must be 0
	// optional uint32 decred_script_version = 7;      // only for Decred  // deprecated -> only 0 is supported
	// optional bytes block_hash_bip115 = 8;        // BIP-115 support dropped
	// optional uint32 block_height_bip115 = 9;     // BIP-115 support dropped
	OrigHash        []byte  `protobuf:"bytes,10,opt,name=orig_hash,json=origHash" json:"orig_hash,omitempty"`                         // tx_hash of the original transaction where this output was present (used when creating a replacement transaction)
	OrigIndex       *uint32 `protobuf:"varint,11,opt,name=orig_index,json=origIndex" json:"orig_index,omitempty"`                     // index of the output in the original transaction (used when creating a replacement transaction)
	PaymentReqIndex *uint32 `protobuf:"varint,12,opt,name=payment_req_index,json=paymentReqIndex" json:"payment_req_index,omitempty"` // index of the PaymentRequest containing this output
}

// Default values for TxAck_TransactionType_TxOutputType fields.
const (
	Default_TxAck_TransactionType_TxOutputType_ScriptType = OutputScriptType_PAYTOADDRESS
)

func (x *TxAck_TransactionType_TxOutputType) Reset() {
	*x = TxAck_TransactionType_TxOutputType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxAck_TransactionType_TxOutputType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxAck_TransactionType_TxOutputType) ProtoMessage() {}

func (x *TxAck_TransactionType_TxOutputType) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxAck_TransactionType_TxOutputType.ProtoReflect.Descriptor instead.
func (*TxAck_TransactionType_TxOutputType) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{12, 0, 2}
}

func (x *TxAck_TransactionType_TxOutputType) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *TxAck_TransactionType_TxOutputType) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *TxAck_TransactionType_TxOutputType) GetAmount() uint64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *TxAck_TransactionType_TxOutputType) GetScriptType() OutputScriptType {
	if x != nil && x.ScriptType != nil {
		return *x.ScriptType
	}
	return Default_TxAck_TransactionType_TxOutputType_ScriptType
}

func (x *TxAck_TransactionType_TxOutputType) GetMultisig() *MultisigRedeemScriptType {
	if x != nil {
		return x.Multisig
	}
	return nil
}

func (x *TxAck_TransactionType_TxOutputType) GetOpReturnData() []byte {
	if x != nil {
		return x.OpReturnData
	}
	return nil
}

func (x *TxAck_TransactionType_TxOutputType) GetOrigHash() []byte {
	if x != nil {
		return x.OrigHash
	}
	return nil
}

func (x *TxAck_TransactionType_TxOutputType) GetOrigIndex() uint32 {
	if x != nil && x.OrigIndex != nil {
		return *x.OrigIndex
	}
	return 0
}

func (x *TxAck_TransactionType_TxOutputType) GetPaymentReqIndex() uint32 {
	if x != nil && x.PaymentReqIndex != nil {
		return *x.PaymentReqIndex
	}
	return 0
}

type TxAckPaymentRequest_PaymentRequestMemo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TextMemo         *TxAckPaymentRequest_TextMemo         `protobuf:"bytes,1,opt,name=text_memo,json=textMemo" json:"text_memo,omitempty"`
	RefundMemo       *TxAckPaymentRequest_RefundMemo       `protobuf:"bytes,2,opt,name=refund_memo,json=refundMemo" json:"refund_memo,omitempty"`
	CoinPurchaseMemo *TxAckPaymentRequest_CoinPurchaseMemo `protobuf:"bytes,3,opt,name=coin_purchase_memo,json=coinPurchaseMemo" json:"coin_purchase_memo,omitempty"`
}

func (x *TxAckPaymentRequest_PaymentRequestMemo) Reset() {
	*x = TxAckPaymentRequest_PaymentRequestMemo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxAckPaymentRequest_PaymentRequestMemo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxAckPaymentRequest_PaymentRequestMemo) ProtoMessage() {}

func (x *TxAckPaymentRequest_PaymentRequestMemo) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxAckPaymentRequest_PaymentRequestMemo.ProtoReflect.Descriptor instead.
func (*TxAckPaymentRequest_PaymentRequestMemo) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{18, 0}
}

func (x *TxAckPaymentRequest_PaymentRequestMemo) GetTextMemo() *TxAckPaymentRequest_TextMemo {
	if x != nil {
		return x.TextMemo
	}
	return nil
}

func (x *TxAckPaymentRequest_PaymentRequestMemo) GetRefundMemo() *TxAckPaymentRequest_RefundMemo {
	if x != nil {
		return x.RefundMemo
	}
	return nil
}

func (x *TxAckPaymentRequest_PaymentRequestMemo) GetCoinPurchaseMemo() *TxAckPaymentRequest_CoinPurchaseMemo {
	if x != nil {
		return x.CoinPurchaseMemo
	}
	return nil
}

type TxAckPaymentRequest_TextMemo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *string `protobuf:"bytes,1,req,name=text" json:"text,omitempty"` // plain-text note explaining the purpose of the payment request
}

func (x *TxAckPaymentRequest_TextMemo) Reset() {
	*x = TxAckPaymentRequest_TextMemo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxAckPaymentRequest_TextMemo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxAckPaymentRequest_TextMemo) ProtoMessage() {}

func (x *TxAckPaymentRequest_TextMemo) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxAckPaymentRequest_TextMemo.ProtoReflect.Descriptor instead.
func (*TxAckPaymentRequest_TextMemo) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{18, 1}
}

func (x *TxAckPaymentRequest_TextMemo) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type TxAckPaymentRequest_RefundMemo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *string `protobuf:"bytes,1,req,name=address" json:"address,omitempty"` // the address where the payment should be refunded if necessary
	Mac     []byte  `protobuf:"bytes,2,req,name=mac" json:"mac,omitempty"`         // the MAC returned by GetAddress
}

func (x *TxAckPaymentRequest_RefundMemo) Reset() {
	*x = TxAckPaymentRequest_RefundMemo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxAckPaymentRequest_RefundMemo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxAckPaymentRequest_RefundMemo) ProtoMessage() {}

func (x *TxAckPaymentRequest_RefundMemo) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxAckPaymentRequest_RefundMemo.ProtoReflect.Descriptor instead.
func (*TxAckPaymentRequest_RefundMemo) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{18, 2}
}

func (x *TxAckPaymentRequest_RefundMemo) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *TxAckPaymentRequest_RefundMemo) GetMac() []byte {
	if x != nil {
		return x.Mac
	}
	return nil
}

type TxAckPaymentRequest_CoinPurchaseMemo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinType *uint32 `protobuf:"varint,1,req,name=coin_type,json=coinType" json:"coin_type,omitempty"` // the SLIP-0044 coin type of the address
	Amount   *string `protobuf:"bytes,2,req,name=amount" json:"amount,omitempty"`                      // the amount the address will receive as a human-readable string including units, e.g. "0.025 BTC"
	Address  *string `protobuf:"bytes,3,req,name=address" json:"address,omitempty"`                    // the address where the coin purchase will be delivered
	Mac      []byte  `protobuf:"bytes,4,req,name=mac" json:"mac,omitempty"`                            // the MAC returned by GetAddress
}

func (x *TxAckPaymentRequest_CoinPurchaseMemo) Reset() {
	*x = TxAckPaymentRequest_CoinPurchaseMemo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxAckPaymentRequest_CoinPurchaseMemo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxAckPaymentRequest_CoinPurchaseMemo) ProtoMessage() {}

func (x *TxAckPaymentRequest_CoinPurchaseMemo) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxAckPaymentRequest_CoinPurchaseMemo.ProtoReflect.Descriptor instead.
func (*TxAckPaymentRequest_CoinPurchaseMemo) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{18, 3}
}

func (x *TxAckPaymentRequest_CoinPurchaseMemo) GetCoinType() uint32 {
	if x != nil && x.CoinType != nil {
		return *x.CoinType
	}
	return 0
}

func (x *TxAckPaymentRequest_CoinPurchaseMemo) GetAmount() string {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return ""
}

func (x *TxAckPaymentRequest_CoinPurchaseMemo) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *TxAckPaymentRequest_CoinPurchaseMemo) GetMac() []byte {
	if x != nil {
		return x.Mac
	}
	return nil
}

type TxAckInput_TxAckInputWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input *TxInput `protobuf:"bytes,2,req,name=input" json:"input,omitempty"`
}

func (x *TxAckInput_TxAckInputWrapper) Reset() {
	*x = TxAckInput_TxAckInputWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxAckInput_TxAckInputWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxAckInput_TxAckInputWrapper) ProtoMessage() {}

func (x *TxAckInput_TxAckInputWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxAckInput_TxAckInputWrapper.ProtoReflect.Descriptor instead.
func (*TxAckInput_TxAckInputWrapper) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{19, 0}
}

func (x *TxAckInput_TxAckInputWrapper) GetInput() *TxInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type TxAckOutput_TxAckOutputWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output *TxOutput `protobuf:"bytes,5,req,name=output" json:"output,omitempty"`
}

func (x *TxAckOutput_TxAckOutputWrapper) Reset() {
	*x = TxAckOutput_TxAckOutputWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxAckOutput_TxAckOutputWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxAckOutput_TxAckOutputWrapper) ProtoMessage() {}

func (x *TxAckOutput_TxAckOutputWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxAckOutput_TxAckOutputWrapper.ProtoReflect.Descriptor instead.
func (*TxAckOutput_TxAckOutputWrapper) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{20, 0}
}

func (x *TxAckOutput_TxAckOutputWrapper) GetOutput() *TxOutput {
	if x != nil {
		return x.Output
	}
	return nil
}

type TxAckPrevInput_TxAckPrevInputWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input *PrevInput `protobuf:"bytes,2,req,name=input" json:"input,omitempty"`
}

func (x *TxAckPrevInput_TxAckPrevInputWrapper) Reset() {
	*x = TxAckPrevInput_TxAckPrevInputWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxAckPrevInput_TxAckPrevInputWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxAckPrevInput_TxAckPrevInputWrapper) ProtoMessage() {}

func (x *TxAckPrevInput_TxAckPrevInputWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxAckPrevInput_TxAckPrevInputWrapper.ProtoReflect.Descriptor instead.
func (*TxAckPrevInput_TxAckPrevInputWrapper) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{22, 0}
}

func (x *TxAckPrevInput_TxAckPrevInputWrapper) GetInput() *PrevInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type TxAckPrevOutput_TxAckPrevOutputWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output *PrevOutput `protobuf:"bytes,3,req,name=output" json:"output,omitempty"`
}

func (x *TxAckPrevOutput_TxAckPrevOutputWrapper) Reset() {
	*x = TxAckPrevOutput_TxAckPrevOutputWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxAckPrevOutput_TxAckPrevOutputWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxAckPrevOutput_TxAckPrevOutputWrapper) ProtoMessage() {}

func (x *TxAckPrevOutput_TxAckPrevOutputWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxAckPrevOutput_TxAckPrevOutputWrapper.ProtoReflect.Descriptor instead.
func (*TxAckPrevOutput_TxAckPrevOutputWrapper) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{23, 0}
}

func (x *TxAckPrevOutput_TxAckPrevOutputWrapper) GetOutput() *PrevOutput {
	if x != nil {
		return x.Output
	}
	return nil
}

type TxAckPrevExtraData_TxAckPrevExtraDataWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtraDataChunk []byte `protobuf:"bytes,8,req,name=extra_data_chunk,json=extraDataChunk" json:"extra_data_chunk,omitempty"`
}

func (x *TxAckPrevExtraData_TxAckPrevExtraDataWrapper) Reset() {
	*x = TxAckPrevExtraData_TxAckPrevExtraDataWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_bitcoin_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxAckPrevExtraData_TxAckPrevExtraDataWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxAckPrevExtraData_TxAckPrevExtraDataWrapper) ProtoMessage() {}

func (x *TxAckPrevExtraData_TxAckPrevExtraDataWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_messages_bitcoin_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxAckPrevExtraData_TxAckPrevExtraDataWrapper.ProtoReflect.Descriptor instead.
func (*TxAckPrevExtraData_TxAckPrevExtraDataWrapper) Descriptor() ([]byte, []int) {
	return file_messages_bitcoin_proto_rawDescGZIP(), []int{24, 0}
}

func (x *TxAckPrevExtraData_TxAckPrevExtraDataWrapper) GetExtraDataChunk() []byte {
	if x != nil {
		return x.ExtraDataChunk
	}
	return nil
}

var File_messages_bitcoin_proto protoreflect.FileDescriptor

var file_messages_bitcoin_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2d, 0x62, 0x69, 0x74, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65,
	0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74,
	0x63, 0x6f, 0x69, 0x6e, 0x1a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2d, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xeb, 0x02, 0x0a, 0x18,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x77, 0x2e, 0x74,
	0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62,
	0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x52,
	0x65, 0x64, 0x65, 0x65, 0x6d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x48, 0x44, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x6d, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x01, 0x6d, 0x12, 0x3b, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x48, 0x44, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x1a,
	0x68, 0x0a, 0x0e, 0x48, 0x44, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x44, 0x4e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x22, 0xa6, 0x02, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x63, 0x64, 0x73, 0x61,
	0x5f, 0x63, 0x75, 0x72, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x65, 0x63, 0x64, 0x73, 0x61, 0x43, 0x75, 0x72, 0x76, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x07, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e,
	0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x53, 0x50,
	0x45, 0x4e, 0x44, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x5f, 0x78, 0x70, 0x75, 0x62, 0x5f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x58, 0x70, 0x75, 0x62, 0x4d, 0x61, 0x67,
	0x69, 0x63, 0x22, 0x85, 0x01, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x12, 0x39, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x44, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x78,
	0x70, 0x75, 0x62, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x78, 0x70, 0x75, 0x62, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x6f, 0x6f, 0x74, 0x46,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0xcc, 0x02, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x12, 0x24, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x07, 0x42, 0x69, 0x74, 0x63, 0x6f,
	0x69, 0x6e, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12,
	0x50, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69,
	0x67, 0x12, 0x5a, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a,
	0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x0c, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x78, 0x70, 0x75, 0x62, 0x5f, 0x6d, 0x61, 0x67,
	0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x58, 0x70, 0x75, 0x62, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x22, 0x35, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x61, 0x63,
	0x22, 0x81, 0x02, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e,
	0x12, 0x24, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x3a, 0x07, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x52, 0x08, 0x63, 0x6f,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72,
	0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69,
	0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x52, 0x65,
	0x64, 0x65, 0x65, 0x6d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x12, 0x5a, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x53, 0x50, 0x45, 0x4e,
	0x44, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x30, 0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x49, 0x64, 0x22, 0xec, 0x01, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a,
	0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x3a, 0x07, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72,
	0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69,
	0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x6e, 0x6f, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x6f, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4a, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0x87, 0x01, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x07, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69,
	0x6e, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbd, 0x06, 0x0a, 0x06,
	0x53, 0x69, 0x67, 0x6e, 0x54, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x3a, 0x07, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x76, 0x65,
	0x72, 0x77, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x68, 0x77,
	0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x3a, 0x07, 0x42, 0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x52, 0x0a, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x15, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x13,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x09, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x63, 0x6f, 0x69, 0x6e, 0x6a,
	0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x54, 0x78, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x63, 0x6f, 0x69, 0x6e, 0x6a, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0xd2, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x4a,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x65,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x6f, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52,
	0x0e, 0x6e, 0x6f, 0x46, 0x65, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x34, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52,
	0x14, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0d,
	0x6d, 0x61, 0x73, 0x6b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xd4, 0x05, 0x0a, 0x09,
	0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x31, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x54, 0x78, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x54, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x54, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x5d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x77, 0x2e, 0x74,
	0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62,
	0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x1a, 0xa6, 0x01, 0x0a, 0x14, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65,
	0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x85, 0x01,
	0x0a, 0x17, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x74,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x54, 0x78, 0x22, 0x8a, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x58, 0x49, 0x4e, 0x50, 0x55, 0x54,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x58, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x54, 0x58, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x54, 0x58, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x58, 0x45, 0x58, 0x54, 0x52, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x04, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x58, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x05, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x58, 0x4f, 0x52, 0x49, 0x47, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x06,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x58, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x45, 0x51,
	0x10, 0x07, 0x22, 0xf4, 0x0f, 0x0a, 0x05, 0x54, 0x78, 0x41, 0x63, 0x6b, 0x12, 0x41, 0x0a, 0x02,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72,
	0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69,
	0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x54, 0x78, 0x41, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x74, 0x78, 0x1a,
	0xa3, 0x0f, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a,
	0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x54, 0x78, 0x41, 0x63, 0x6b,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x12, 0x62, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x77, 0x2e, 0x74,
	0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62,
	0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x54, 0x78, 0x41, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x78, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x69,
	0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a,
	0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x54, 0x78, 0x41, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24,
	0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0c,
	0x6f, 0x76, 0x65, 0x72, 0x77, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x1a, 0xf1, 0x05, 0x0a, 0x0b, 0x54, 0x78,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x76, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x69,
	0x67, 0x12, 0x26, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x0a, 0x34, 0x32, 0x39, 0x34, 0x39, 0x36, 0x37, 0x32, 0x39, 0x35, 0x52,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x53, 0x50, 0x45,
	0x4e, 0x44, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65,
	0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x52, 0x65, 0x64,
	0x65, 0x65, 0x6d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x72, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x72, 0x69, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x6f, 0x72, 0x69, 0x67, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x69,
	0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f,
	0x72, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x64, 0x0a, 0x14, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a,
	0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0e, 0x63, 0x6f, 0x69, 0x6e, 0x6a, 0x6f, 0x69, 0x6e, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d,
	0x63, 0x6f, 0x69, 0x6e, 0x6a, 0x6f, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x1a, 0x82, 0x01,
	0x0a, 0x0f, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c,
	0x52, 0x0c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x32,
	0x0a, 0x15, 0x64, 0x65, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x1a, 0xa0, 0x03, 0x0a, 0x0c, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65,
	0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x50, 0x41, 0x59, 0x54, 0x4f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x50, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69,
	0x67, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6f, 0x70, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0xc8, 0xf0, 0x19, 0x01, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xff, 0x05, 0x0a, 0x07, 0x54, 0x78,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x76, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x69, 0x67, 0x12, 0x26, 0x0a,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x0a, 0x34, 0x32, 0x39, 0x34, 0x39, 0x36, 0x37, 0x32, 0x39, 0x35, 0x52, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x68, 0x77, 0x2e,
	0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x50, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x02, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x64, 0x65, 0x63, 0x72, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x77,
	0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x69, 0x67,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f, 0x72, 0x69,
	0x67, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x64, 0x0a, 0x14, 0x64, 0x65, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x44, 0x65, 0x63, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x64, 0x65, 0x63, 0x72, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12,
	0x28, 0x0a, 0x0e, 0x63, 0x6f, 0x69, 0x6e, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x63, 0x6f, 0x69, 0x6e,
	0x6a, 0x6f, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a,
	0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x22, 0xae, 0x03, 0x0a, 0x08,
	0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x68,
	0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x50, 0x41, 0x59, 0x54,
	0x4f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a,
	0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x52, 0x65, 0x64, 0x65,
	0x65, 0x6d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x6f, 0x70, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x72, 0x69, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x6f, 0x72, 0x69, 0x67, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x69,
	0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f,
	0x72, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0xc8, 0xf0, 0x19, 0x01, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08,
	0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x22, 0xcb, 0x02, 0x0a,
	0x06, 0x50, 0x72, 0x65, 0x76, 0x54, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x02,
	0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04,
	0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22, 0xf7, 0x01, 0x0a, 0x09, 0x50,
	0x72, 0x65, 0x76, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x65,
	0x76, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x76, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73,
	0x69, 0x67, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x53, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x72, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65,
	0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07,
	0x10, 0x08, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04,
	0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e,
	0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x4a, 0x04, 0x08, 0x0f, 0x10, 0x10, 0x4a, 0x04, 0x08, 0x10,
	0x10, 0x11, 0x4a, 0x04, 0x08, 0x11, 0x10, 0x12, 0x4a, 0x04, 0x08, 0x12, 0x10, 0x13, 0x4a, 0x04,
	0x08, 0x13, 0x10, 0x14, 0x22, 0x7d, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x76, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12,
	0x32, 0x0a, 0x15, 0x64, 0x65, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xf2, 0x05, 0x0a, 0x13, 0x54, 0x78, 0x41, 0x63, 0x6b, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x05, 0x6d, 0x65, 0x6d, 0x6f,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65,
	0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x54, 0x78, 0x41, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x52, 0x05, 0x6d, 0x65, 0x6d,
	0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0xb8, 0x02, 0x0a, 0x12, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x12,
	0x55, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x54, 0x78, 0x41, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x52, 0x08, 0x74, 0x65,
	0x78, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x12, 0x5b, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x77,
	0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x54, 0x78, 0x41, 0x63, 0x6b, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4d,
	0x65, 0x6d, 0x6f, 0x12, 0x6e, 0x0a, 0x12, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x54, 0x78, 0x41,
	0x63, 0x6b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x6d,
	0x6f, 0x52, 0x10, 0x63, 0x6f, 0x69, 0x6e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4d,
	0x65, 0x6d, 0x6f, 0x1a, 0x1e, 0x0a, 0x08, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x1a, 0x38, 0x0a, 0x0a, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x6d,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x61, 0x63, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x1a, 0x73, 0x0a,
	0x10, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x6d,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x03, 0x6d,
	0x61, 0x63, 0x3a, 0x04, 0x88, 0xb2, 0x19, 0x01, 0x22, 0xac, 0x01, 0x0a, 0x0a, 0x54, 0x78, 0x41,
	0x63, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x48, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x54, 0x78, 0x41, 0x63, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x54, 0x78, 0x41, 0x63,
	0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x02, 0x74,
	0x78, 0x1a, 0x4e, 0x0a, 0x11, 0x54, 0x78, 0x41, 0x63, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x57,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f,
	0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x3a, 0x04, 0x90, 0xb2, 0x19, 0x16, 0x22, 0xb3, 0x01, 0x0a, 0x0b, 0x54, 0x78, 0x41, 0x63,
	0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x4a, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x54, 0x78, 0x41, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x54, 0x78, 0x41,
	0x63, 0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52,
	0x02, 0x74, 0x78, 0x1a, 0x52, 0x0a, 0x12, 0x54, 0x78, 0x41, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x77, 0x2e, 0x74,
	0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62,
	0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3a, 0x04, 0x90, 0xb2, 0x19, 0x16, 0x22, 0x49, 0x0a,
	0x0d, 0x54, 0x78, 0x41, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x32,
	0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x77, 0x2e,
	0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x54, 0x78, 0x52, 0x02,
	0x74, 0x78, 0x3a, 0x04, 0x90, 0xb2, 0x19, 0x16, 0x22, 0xbe, 0x01, 0x0a, 0x0e, 0x54, 0x78, 0x41,
	0x63, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x50, 0x0a, 0x02, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65,
	0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x54, 0x78, 0x41, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x2e, 0x54, 0x78, 0x41, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x02, 0x74, 0x78, 0x1a, 0x54, 0x0a,
	0x15, 0x54, 0x78, 0x41, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x57,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f,
	0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x3a, 0x04, 0x90, 0xb2, 0x19, 0x16, 0x22, 0xc5, 0x01, 0x0a, 0x0f, 0x54, 0x78,
	0x41, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x52, 0x0a,
	0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x68, 0x77, 0x2e, 0x74,
	0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62,
	0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x54, 0x78, 0x41, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x76,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x54, 0x78, 0x41, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x76,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x02, 0x74,
	0x78, 0x1a, 0x58, 0x0a, 0x16, 0x54, 0x78, 0x41, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x77,
	0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3a, 0x04, 0x90, 0xb2, 0x19,
	0x16, 0x22, 0xbb, 0x01, 0x0a, 0x12, 0x54, 0x78, 0x41, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x54, 0x78, 0x41, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x78, 0x41, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x02,
	0x74, 0x78, 0x1a, 0x45, 0x0a, 0x19, 0x54, 0x78, 0x41, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12,
	0x28, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x3a, 0x04, 0x90, 0xb2, 0x19, 0x16, 0x22,
	0x88, 0x03, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4e, 0x12, 0x24, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x07, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x52, 0x08,
	0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x53, 0x50, 0x45, 0x4e,
	0x44, 0x57, 0x49, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a,
	0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x52, 0x65, 0x64, 0x65,
	0x65, 0x6d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x64, 0x73, 0x12,
	0x29, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x3a, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x57, 0x0a, 0x0e, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x27, 0x0a, 0x0f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0xab, 0x03, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x61, 0x78, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52,
	0x09, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x61,
	0x78, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x15, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x6b, 0x76, 0x62, 0x79, 0x74, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x0f, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x4b, 0x76, 0x62, 0x79, 0x74, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x12, 0x24, 0x0a,
	0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x3a, 0x07, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72,
	0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69,
	0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x50, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x3a, 0x07, 0x42, 0x49,
	0x54, 0x43, 0x4f, 0x49, 0x4e, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x2a, 0x7e, 0x0a, 0x0f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x53, 0x49, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x50, 0x45, 0x4e, 0x44,
	0x57, 0x49, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x50, 0x45,
	0x4e, 0x44, 0x50, 0x32, 0x53, 0x48, 0x57, 0x49, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x54, 0x41, 0x50, 0x52, 0x4f, 0x4f, 0x54, 0x10,
	0x05, 0x2a, 0x99, 0x01, 0x0a, 0x10, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x41, 0x59, 0x54, 0x4f, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x59, 0x54,
	0x4f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x48, 0x41, 0x53, 0x48, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x50, 0x41, 0x59, 0x54, 0x4f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x53, 0x49, 0x47, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x50, 0x41, 0x59, 0x54, 0x4f, 0x4f, 0x50, 0x52, 0x45, 0x54, 0x55, 0x52,
	0x4e, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x41, 0x59, 0x54, 0x4f, 0x57, 0x49, 0x54, 0x4e,
	0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x59, 0x54, 0x4f, 0x50, 0x32,
	0x53, 0x48, 0x57, 0x49, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x50,
	0x41, 0x59, 0x54, 0x4f, 0x54, 0x41, 0x50, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x06, 0x2a, 0x2e, 0x0a,
	0x16, 0x44, 0x65, 0x63, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x70,
	0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x53, 0x47, 0x65, 0x6e,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x53, 0x52, 0x54, 0x58, 0x10, 0x01, 0x2a, 0x4a, 0x0a,
	0x0a, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x42,
	0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x49, 0x4c, 0x4c,
	0x49, 0x42, 0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x49,
	0x43, 0x52, 0x4f, 0x42, 0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x41, 0x54, 0x4f, 0x53, 0x48, 0x49, 0x10, 0x03, 0x42, 0x3f, 0x0a, 0x23, 0x63, 0x6f, 0x6d,
	0x2e, 0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x74, 0x72, 0x65,
	0x7a, 0x6f, 0x72, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x42, 0x14, 0x54, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x80, 0xa6, 0x1d, 0x01,
}

var (
	file_messages_bitcoin_proto_rawDescOnce sync.Once
	file_messages_bitcoin_proto_rawDescData = file_messages_bitcoin_proto_rawDesc
)

func file_messages_bitcoin_proto_rawDescGZIP() []byte {
	file_messages_bitcoin_proto_rawDescOnce.Do(func() {
		file_messages_bitcoin_proto_rawDescData = protoimpl.X.CompressGZIP(file_messages_bitcoin_proto_rawDescData)
	})
	return file_messages_bitcoin_proto_rawDescData
}

var file_messages_bitcoin_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_messages_bitcoin_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_messages_bitcoin_proto_goTypes = []interface{}{
	(InputScriptType)(0),                                 // 0: hw.trezor.messages.bitcoin.InputScriptType
	(OutputScriptType)(0),                                // 1: hw.trezor.messages.bitcoin.OutputScriptType
	(DecredStakingSpendType)(0),                          // 2: hw.trezor.messages.bitcoin.DecredStakingSpendType
	(AmountUnit)(0),                                      // 3: hw.trezor.messages.bitcoin.AmountUnit
	(TxRequest_RequestType)(0),                           // 4: hw.trezor.messages.bitcoin.TxRequest.RequestType
	(*MultisigRedeemScriptType)(nil),                     // 5: hw.trezor.messages.bitcoin.MultisigRedeemScriptType
	(*GetPublicKey)(nil),                                 // 6: hw.trezor.messages.bitcoin.GetPublicKey
	(*PublicKey)(nil),                                    // 7: hw.trezor.messages.bitcoin.PublicKey
	(*GetAddress)(nil),                                   // 8: hw.trezor.messages.bitcoin.GetAddress
	(*Address)(nil),                                      // 9: hw.trezor.messages.bitcoin.Address
	(*GetOwnershipId)(nil),                               // 10: hw.trezor.messages.bitcoin.GetOwnershipId
	(*OwnershipId)(nil),                                  // 11: hw.trezor.messages.bitcoin.OwnershipId
	(*SignMessage)(nil),                                  // 12: hw.trezor.messages.bitcoin.SignMessage
	(*MessageSignature)(nil),                             // 13: hw.trezor.messages.bitcoin.MessageSignature
	(*VerifyMessage)(nil),                                // 14: hw.trezor.messages.bitcoin.VerifyMessage
	(*SignTx)(nil),                                       // 15: hw.trezor.messages.bitcoin.SignTx
	(*TxRequest)(nil),                                    // 16: hw.trezor.messages.bitcoin.TxRequest
	(*TxAck)(nil),                                        // 17: hw.trezor.messages.bitcoin.TxAck
	(*TxInput)(nil),                                      // 18: hw.trezor.messages.bitcoin.TxInput
	(*TxOutput)(nil),                                     // 19: hw.trezor.messages.bitcoin.TxOutput
	(*PrevTx)(nil),                                       // 20: hw.trezor.messages.bitcoin.PrevTx
	(*PrevInput)(nil),                                    // 21: hw.trezor.messages.bitcoin.PrevInput
	(*PrevOutput)(nil),                                   // 22: hw.trezor.messages.bitcoin.PrevOutput
	(*TxAckPaymentRequest)(nil),                          // 23: hw.trezor.messages.bitcoin.TxAckPaymentRequest
	(*TxAckInput)(nil),                                   // 24: hw.trezor.messages.bitcoin.TxAckInput
	(*TxAckOutput)(nil),                                  // 25: hw.trezor.messages.bitcoin.TxAckOutput
	(*TxAckPrevMeta)(nil),                                // 26: hw.trezor.messages.bitcoin.TxAckPrevMeta
	(*TxAckPrevInput)(nil),                               // 27: hw.trezor.messages.bitcoin.TxAckPrevInput
	(*TxAckPrevOutput)(nil),                              // 28: hw.trezor.messages.bitcoin.TxAckPrevOutput
	(*TxAckPrevExtraData)(nil),                           // 29: hw.trezor.messages.bitcoin.TxAckPrevExtraData
	(*GetOwnershipProof)(nil),                            // 30: hw.trezor.messages.bitcoin.GetOwnershipProof
	(*OwnershipProof)(nil),                               // 31: hw.trezor.messages.bitcoin.OwnershipProof
	(*AuthorizeCoinJoin)(nil),                            // 32: hw.trezor.messages.bitcoin.AuthorizeCoinJoin
	(*MultisigRedeemScriptType_HDNodePathType)(nil),      // 33: hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType
	(*SignTx_CoinJoinRequest)(nil),                       // 34: hw.trezor.messages.bitcoin.SignTx.CoinJoinRequest
	(*TxRequest_TxRequestDetailsType)(nil),               // 35: hw.trezor.messages.bitcoin.TxRequest.TxRequestDetailsType
	(*TxRequest_TxRequestSerializedType)(nil),            // 36: hw.trezor.messages.bitcoin.TxRequest.TxRequestSerializedType
	(*TxAck_TransactionType)(nil),                        // 37: hw.trezor.messages.bitcoin.TxAck.TransactionType
	(*TxAck_TransactionType_TxInputType)(nil),            // 38: hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType
	(*TxAck_TransactionType_TxOutputBinType)(nil),        // 39: hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType
	(*TxAck_TransactionType_TxOutputType)(nil),           // 40: hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType
	(*TxAckPaymentRequest_PaymentRequestMemo)(nil),       // 41: hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo
	(*TxAckPaymentRequest_TextMemo)(nil),                 // 42: hw.trezor.messages.bitcoin.TxAckPaymentRequest.TextMemo
	(*TxAckPaymentRequest_RefundMemo)(nil),               // 43: hw.trezor.messages.bitcoin.TxAckPaymentRequest.RefundMemo
	(*TxAckPaymentRequest_CoinPurchaseMemo)(nil),         // 44: hw.trezor.messages.bitcoin.TxAckPaymentRequest.CoinPurchaseMemo
	(*TxAckInput_TxAckInputWrapper)(nil),                 // 45: hw.trezor.messages.bitcoin.TxAckInput.TxAckInputWrapper
	(*TxAckOutput_TxAckOutputWrapper)(nil),               // 46: hw.trezor.messages.bitcoin.TxAckOutput.TxAckOutputWrapper
	(*TxAckPrevInput_TxAckPrevInputWrapper)(nil),         // 47: hw.trezor.messages.bitcoin.TxAckPrevInput.TxAckPrevInputWrapper
	(*TxAckPrevOutput_TxAckPrevOutputWrapper)(nil),       // 48: hw.trezor.messages.bitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper
	(*TxAckPrevExtraData_TxAckPrevExtraDataWrapper)(nil), // 49: hw.trezor.messages.bitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper
	(*HDNodeType)(nil),                                   // 50: hw.trezor.messages.common.HDNodeType
}
var file_messages_bitcoin_proto_depIdxs = []int32{
	33, // 0: hw.trezor.messages.bitcoin.MultisigRedeemScriptType.pubkeys:type_name -> hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType
	50, // 1: hw.trezor.messages.bitcoin.MultisigRedeemScriptType.nodes:type_name -> hw.trezor.messages.common.HDNodeType
	0,  // 2: hw.trezor.messages.bitcoin.GetPublicKey.script_type:type_name -> hw.trezor.messages.bitcoin.InputScriptType
	50, // 3: hw.trezor.messages.bitcoin.PublicKey.node:type_name -> hw.trezor.messages.common.HDNodeType
	5,  // 4: hw.trezor.messages.bitcoin.GetAddress.multisig:type_name -> hw.trezor.messages.bitcoin.MultisigRedeemScriptType
	0,  // 5: hw.trezor.messages.bitcoin.GetAddress.script_type:type_name -> hw.trezor.messages.bitcoin.InputScriptType
	5,  // 6: hw.trezor.messages.bitcoin.GetOwnershipId.multisig:type_name -> hw.trezor.messages.bitcoin.MultisigRedeemScriptType
	0,  // 7: hw.trezor.messages.bitcoin.GetOwnershipId.script_type:type_name -> hw.trezor.messages.bitcoin.InputScriptType
	0,  // 8: hw.trezor.messages.bitcoin.SignMessage.script_type:type_name -> hw.trezor.messages.bitcoin.InputScriptType
	3,  // 9: hw.trezor.messages.bitcoin.SignTx.amount_unit:type_name -> hw.trezor.messages.bitcoin.AmountUnit
	34, // 10: hw.trezor.messages.bitcoin.SignTx.coinjoin_request:type_name -> hw.trezor.messages.bitcoin.SignTx.CoinJoinRequest
	4,  // 11: hw.trezor.messages.bitcoin.TxRequest.request_type:type_name -> hw.trezor.messages.bitcoin.TxRequest.RequestType
	35, // 12: hw.trezor.messages.bitcoin.TxRequest.details:type_name -> hw.trezor.messages.bitcoin.TxRequest.TxRequestDetailsType
	36, // 13: hw.trezor.messages.bitcoin.TxRequest.serialized:type_name -> hw.trezor.messages.bitcoin.TxRequest.TxRequestSerializedType
	37, // 14: hw.trezor.messages.bitcoin.TxAck.tx:type_name -> hw.trezor.messages.bitcoin.TxAck.TransactionType
	0,  // 15: hw.trezor.messages.bitcoin.TxInput.script_type:type_name -> hw.trezor.messages.bitcoin.InputScriptType
	5,  // 16: hw.trezor.messages.bitcoin.TxInput.multisig:type_name -> hw.trezor.messages.bitcoin.MultisigRedeemScriptType
	2,  // 17: hw.trezor.messages.bitcoin.TxInput.decred_staking_spend:type_name -> hw.trezor.messages.bitcoin.DecredStakingSpendType
	1,  // 18: hw.trezor.messages.bitcoin.TxOutput.script_type:type_name -> hw.trezor.messages.bitcoin.OutputScriptType
	5,  // 19: hw.trezor.messages.bitcoin.TxOutput.multisig:type_name -> hw.trezor.messages.bitcoin.MultisigRedeemScriptType
	41, // 20: hw.trezor.messages.bitcoin.TxAckPaymentRequest.memos:type_name -> hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo
	45, // 21: hw.trezor.messages.bitcoin.TxAckInput.tx:type_name -> hw.trezor.messages.bitcoin.TxAckInput.TxAckInputWrapper
	46, // 22: hw.trezor.messages.bitcoin.TxAckOutput.tx:type_name -> hw.trezor.messages.bitcoin.TxAckOutput.TxAckOutputWrapper
	20, // 23: hw.trezor.messages.bitcoin.TxAckPrevMeta.tx:type_name -> hw.trezor.messages.bitcoin.PrevTx
	47, // 24: hw.trezor.messages.bitcoin.TxAckPrevInput.tx:type_name -> hw.trezor.messages.bitcoin.TxAckPrevInput.TxAckPrevInputWrapper
	48, // 25: hw.trezor.messages.bitcoin.TxAckPrevOutput.tx:type_name -> hw.trezor.messages.bitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper
	49, // 26: hw.trezor.messages.bitcoin.TxAckPrevExtraData.tx:type_name -> hw.trezor.messages.bitcoin.TxAckPrevExtraData.TxAckPrevExtraDataWrapper
	0,  // 27: hw.trezor.messages.bitcoin.GetOwnershipProof.script_type:type_name -> hw.trezor.messages.bitcoin.InputScriptType
	5,  // 28: hw.trezor.messages.bitcoin.GetOwnershipProof.multisig:type_name -> hw.trezor.messages.bitcoin.MultisigRedeemScriptType
	0,  // 29: hw.trezor.messages.bitcoin.AuthorizeCoinJoin.script_type:type_name -> hw.trezor.messages.bitcoin.InputScriptType
	3,  // 30: hw.trezor.messages.bitcoin.AuthorizeCoinJoin.amount_unit:type_name -> hw.trezor.messages.bitcoin.AmountUnit
	50, // 31: hw.trezor.messages.bitcoin.MultisigRedeemScriptType.HDNodePathType.node:type_name -> hw.trezor.messages.common.HDNodeType
	38, // 32: hw.trezor.messages.bitcoin.TxAck.TransactionType.inputs:type_name -> hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType
	39, // 33: hw.trezor.messages.bitcoin.TxAck.TransactionType.bin_outputs:type_name -> hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputBinType
	40, // 34: hw.trezor.messages.bitcoin.TxAck.TransactionType.outputs:type_name -> hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType
	0,  // 35: hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType.script_type:type_name -> hw.trezor.messages.bitcoin.InputScriptType
	5,  // 36: hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType.multisig:type_name -> hw.trezor.messages.bitcoin.MultisigRedeemScriptType
	2,  // 37: hw.trezor.messages.bitcoin.TxAck.TransactionType.TxInputType.decred_staking_spend:type_name -> hw.trezor.messages.bitcoin.DecredStakingSpendType
	1,  // 38: hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType.script_type:type_name -> hw.trezor.messages.bitcoin.OutputScriptType
	5,  // 39: hw.trezor.messages.bitcoin.TxAck.TransactionType.TxOutputType.multisig:type_name -> hw.trezor.messages.bitcoin.MultisigRedeemScriptType
	42, // 40: hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo.text_memo:type_name -> hw.trezor.messages.bitcoin.TxAckPaymentRequest.TextMemo
	43, // 41: hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo.refund_memo:type_name -> hw.trezor.messages.bitcoin.TxAckPaymentRequest.RefundMemo
	44, // 42: hw.trezor.messages.bitcoin.TxAckPaymentRequest.PaymentRequestMemo.coin_purchase_memo:type_name -> hw.trezor.messages.bitcoin.TxAckPaymentRequest.CoinPurchaseMemo
	18, // 43: hw.trezor.messages.bitcoin.TxAckInput.TxAckInputWrapper.input:type_name -> hw.trezor.messages.bitcoin.TxInput
	19, // 44: hw.trezor.messages.bitcoin.TxAckOutput.TxAckOutputWrapper.output:type_name -> hw.trezor.messages.bitcoin.TxOutput
	21, // 45: hw.trezor.messages.bitcoin.TxAckPrevInput.TxAckPrevInputWrapper.input:type_name -> hw.trezor.messages.bitcoin.PrevInput
	22, // 46: hw.trezor.messages.bitcoin.TxAckPrevOutput.TxAckPrevOutputWrapper.output:type_name -> hw.trezor.messages.bitcoin.PrevOutput
	47, // [47:47] is the sub-list for method output_type
	47, // [47:47] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_messages_bitcoin_proto_init() }
func file_messages_bitcoin_proto_init() {
	if File_messages_bitcoin_proto != nil {
		return
	}
	file_messages_proto_init()
	file_messages_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_messages_bitcoin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultisigRedeemScriptType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOwnershipId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OwnershipId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrevTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrevInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrevOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxAckPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxAckInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxAckOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxAckPrevMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxAckPrevInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxAckPrevOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxAckPrevExtraData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOwnershipProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OwnershipProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeCoinJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultisigRedeemScriptType_HDNodePathType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignTx_CoinJoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxRequest_TxRequestDetailsType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxRequest_TxRequestSerializedType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxAck_TransactionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxAck_TransactionType_TxInputType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxAck_TransactionType_TxOutputBinType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxAck_TransactionType_TxOutputType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxAckPaymentRequest_PaymentRequestMemo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxAckPaymentRequest_TextMemo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxAckPaymentRequest_RefundMemo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxAckPaymentRequest_CoinPurchaseMemo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxAckInput_TxAckInputWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxAckOutput_TxAckOutputWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxAckPrevInput_TxAckPrevInputWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxAckPrevOutput_TxAckPrevOutputWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_bitcoin_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxAckPrevExtraData_TxAckPrevExtraDataWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messages_bitcoin_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_bitcoin_proto_goTypes,
		DependencyIndexes: file_messages_bitcoin_proto_depIdxs,
		EnumInfos:         file_messages_bitcoin_proto_enumTypes,
		MessageInfos:      file_messages_bitcoin_proto_msgTypes,
	}.Build()
	File_messages_bitcoin_proto = out.File
	file_messages_bitcoin_proto_rawDesc = nil
	file_messages_bitcoin_proto_goTypes = nil
	file_messages_bitcoin_proto_depIdxs = nil
}
